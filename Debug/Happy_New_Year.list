
Happy_New_Year.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005acc  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00011858  08005c8c  08005c8c  00015c8c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080174e4  080174e4  0003000c  2**0
                  CONTENTS
  4 .ARM          00000008  080174e4  080174e4  000274e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080174ec  080174ec  0003000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080174ec  080174ec  000274ec  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080174f0  080174f0  000274f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080174f4  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  2000000c  08017500  0003000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000598  08017500  00030598  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0003000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d23  00000000  00000000  0003003c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002603  00000000  00000000  00042d5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000010a8  00000000  00000000  00045368  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000f70  00000000  00000000  00046410  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002b505  00000000  00000000  00047380  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000de1f  00000000  00000000  00072885  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001065e3  00000000  00000000  000806a4  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  00186c87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000457c  00000000  00000000  00186d04  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001c0 <__do_global_dtors_aux>:
 80001c0:	b510      	push	{r4, lr}
 80001c2:	4c05      	ldr	r4, [pc, #20]	; (80001d8 <__do_global_dtors_aux+0x18>)
 80001c4:	7823      	ldrb	r3, [r4, #0]
 80001c6:	b933      	cbnz	r3, 80001d6 <__do_global_dtors_aux+0x16>
 80001c8:	4b04      	ldr	r3, [pc, #16]	; (80001dc <__do_global_dtors_aux+0x1c>)
 80001ca:	b113      	cbz	r3, 80001d2 <__do_global_dtors_aux+0x12>
 80001cc:	4804      	ldr	r0, [pc, #16]	; (80001e0 <__do_global_dtors_aux+0x20>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	2301      	movs	r3, #1
 80001d4:	7023      	strb	r3, [r4, #0]
 80001d6:	bd10      	pop	{r4, pc}
 80001d8:	2000000c 	.word	0x2000000c
 80001dc:	00000000 	.word	0x00000000
 80001e0:	08005c74 	.word	0x08005c74

080001e4 <frame_dummy>:
 80001e4:	b508      	push	{r3, lr}
 80001e6:	4b03      	ldr	r3, [pc, #12]	; (80001f4 <frame_dummy+0x10>)
 80001e8:	b11b      	cbz	r3, 80001f2 <frame_dummy+0xe>
 80001ea:	4903      	ldr	r1, [pc, #12]	; (80001f8 <frame_dummy+0x14>)
 80001ec:	4803      	ldr	r0, [pc, #12]	; (80001fc <frame_dummy+0x18>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	bd08      	pop	{r3, pc}
 80001f4:	00000000 	.word	0x00000000
 80001f8:	20000010 	.word	0x20000010
 80001fc:	08005c74 	.word	0x08005c74

08000200 <__aeabi_uldivmod>:
 8000200:	b953      	cbnz	r3, 8000218 <__aeabi_uldivmod+0x18>
 8000202:	b94a      	cbnz	r2, 8000218 <__aeabi_uldivmod+0x18>
 8000204:	2900      	cmp	r1, #0
 8000206:	bf08      	it	eq
 8000208:	2800      	cmpeq	r0, #0
 800020a:	bf1c      	itt	ne
 800020c:	f04f 31ff 	movne.w	r1, #4294967295
 8000210:	f04f 30ff 	movne.w	r0, #4294967295
 8000214:	f000 b972 	b.w	80004fc <__aeabi_idiv0>
 8000218:	f1ad 0c08 	sub.w	ip, sp, #8
 800021c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000220:	f000 f806 	bl	8000230 <__udivmoddi4>
 8000224:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000228:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800022c:	b004      	add	sp, #16
 800022e:	4770      	bx	lr

08000230 <__udivmoddi4>:
 8000230:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000234:	9e08      	ldr	r6, [sp, #32]
 8000236:	4604      	mov	r4, r0
 8000238:	4688      	mov	r8, r1
 800023a:	2b00      	cmp	r3, #0
 800023c:	d14b      	bne.n	80002d6 <__udivmoddi4+0xa6>
 800023e:	428a      	cmp	r2, r1
 8000240:	4615      	mov	r5, r2
 8000242:	d967      	bls.n	8000314 <__udivmoddi4+0xe4>
 8000244:	fab2 f282 	clz	r2, r2
 8000248:	b14a      	cbz	r2, 800025e <__udivmoddi4+0x2e>
 800024a:	f1c2 0720 	rsb	r7, r2, #32
 800024e:	fa01 f302 	lsl.w	r3, r1, r2
 8000252:	fa20 f707 	lsr.w	r7, r0, r7
 8000256:	4095      	lsls	r5, r2
 8000258:	ea47 0803 	orr.w	r8, r7, r3
 800025c:	4094      	lsls	r4, r2
 800025e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000262:	0c23      	lsrs	r3, r4, #16
 8000264:	fbb8 f7fe 	udiv	r7, r8, lr
 8000268:	fa1f fc85 	uxth.w	ip, r5
 800026c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000270:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000274:	fb07 f10c 	mul.w	r1, r7, ip
 8000278:	4299      	cmp	r1, r3
 800027a:	d909      	bls.n	8000290 <__udivmoddi4+0x60>
 800027c:	18eb      	adds	r3, r5, r3
 800027e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000282:	f080 811b 	bcs.w	80004bc <__udivmoddi4+0x28c>
 8000286:	4299      	cmp	r1, r3
 8000288:	f240 8118 	bls.w	80004bc <__udivmoddi4+0x28c>
 800028c:	3f02      	subs	r7, #2
 800028e:	442b      	add	r3, r5
 8000290:	1a5b      	subs	r3, r3, r1
 8000292:	b2a4      	uxth	r4, r4
 8000294:	fbb3 f0fe 	udiv	r0, r3, lr
 8000298:	fb0e 3310 	mls	r3, lr, r0, r3
 800029c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a0:	fb00 fc0c 	mul.w	ip, r0, ip
 80002a4:	45a4      	cmp	ip, r4
 80002a6:	d909      	bls.n	80002bc <__udivmoddi4+0x8c>
 80002a8:	192c      	adds	r4, r5, r4
 80002aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80002ae:	f080 8107 	bcs.w	80004c0 <__udivmoddi4+0x290>
 80002b2:	45a4      	cmp	ip, r4
 80002b4:	f240 8104 	bls.w	80004c0 <__udivmoddi4+0x290>
 80002b8:	3802      	subs	r0, #2
 80002ba:	442c      	add	r4, r5
 80002bc:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80002c0:	eba4 040c 	sub.w	r4, r4, ip
 80002c4:	2700      	movs	r7, #0
 80002c6:	b11e      	cbz	r6, 80002d0 <__udivmoddi4+0xa0>
 80002c8:	40d4      	lsrs	r4, r2
 80002ca:	2300      	movs	r3, #0
 80002cc:	e9c6 4300 	strd	r4, r3, [r6]
 80002d0:	4639      	mov	r1, r7
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d909      	bls.n	80002ee <__udivmoddi4+0xbe>
 80002da:	2e00      	cmp	r6, #0
 80002dc:	f000 80eb 	beq.w	80004b6 <__udivmoddi4+0x286>
 80002e0:	2700      	movs	r7, #0
 80002e2:	e9c6 0100 	strd	r0, r1, [r6]
 80002e6:	4638      	mov	r0, r7
 80002e8:	4639      	mov	r1, r7
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	fab3 f783 	clz	r7, r3
 80002f2:	2f00      	cmp	r7, #0
 80002f4:	d147      	bne.n	8000386 <__udivmoddi4+0x156>
 80002f6:	428b      	cmp	r3, r1
 80002f8:	d302      	bcc.n	8000300 <__udivmoddi4+0xd0>
 80002fa:	4282      	cmp	r2, r0
 80002fc:	f200 80fa 	bhi.w	80004f4 <__udivmoddi4+0x2c4>
 8000300:	1a84      	subs	r4, r0, r2
 8000302:	eb61 0303 	sbc.w	r3, r1, r3
 8000306:	2001      	movs	r0, #1
 8000308:	4698      	mov	r8, r3
 800030a:	2e00      	cmp	r6, #0
 800030c:	d0e0      	beq.n	80002d0 <__udivmoddi4+0xa0>
 800030e:	e9c6 4800 	strd	r4, r8, [r6]
 8000312:	e7dd      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000314:	b902      	cbnz	r2, 8000318 <__udivmoddi4+0xe8>
 8000316:	deff      	udf	#255	; 0xff
 8000318:	fab2 f282 	clz	r2, r2
 800031c:	2a00      	cmp	r2, #0
 800031e:	f040 808f 	bne.w	8000440 <__udivmoddi4+0x210>
 8000322:	1b49      	subs	r1, r1, r5
 8000324:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000328:	fa1f f885 	uxth.w	r8, r5
 800032c:	2701      	movs	r7, #1
 800032e:	fbb1 fcfe 	udiv	ip, r1, lr
 8000332:	0c23      	lsrs	r3, r4, #16
 8000334:	fb0e 111c 	mls	r1, lr, ip, r1
 8000338:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800033c:	fb08 f10c 	mul.w	r1, r8, ip
 8000340:	4299      	cmp	r1, r3
 8000342:	d907      	bls.n	8000354 <__udivmoddi4+0x124>
 8000344:	18eb      	adds	r3, r5, r3
 8000346:	f10c 30ff 	add.w	r0, ip, #4294967295
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x122>
 800034c:	4299      	cmp	r1, r3
 800034e:	f200 80cd 	bhi.w	80004ec <__udivmoddi4+0x2bc>
 8000352:	4684      	mov	ip, r0
 8000354:	1a59      	subs	r1, r3, r1
 8000356:	b2a3      	uxth	r3, r4
 8000358:	fbb1 f0fe 	udiv	r0, r1, lr
 800035c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000360:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000364:	fb08 f800 	mul.w	r8, r8, r0
 8000368:	45a0      	cmp	r8, r4
 800036a:	d907      	bls.n	800037c <__udivmoddi4+0x14c>
 800036c:	192c      	adds	r4, r5, r4
 800036e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000372:	d202      	bcs.n	800037a <__udivmoddi4+0x14a>
 8000374:	45a0      	cmp	r8, r4
 8000376:	f200 80b6 	bhi.w	80004e6 <__udivmoddi4+0x2b6>
 800037a:	4618      	mov	r0, r3
 800037c:	eba4 0408 	sub.w	r4, r4, r8
 8000380:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000384:	e79f      	b.n	80002c6 <__udivmoddi4+0x96>
 8000386:	f1c7 0c20 	rsb	ip, r7, #32
 800038a:	40bb      	lsls	r3, r7
 800038c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000390:	ea4e 0e03 	orr.w	lr, lr, r3
 8000394:	fa01 f407 	lsl.w	r4, r1, r7
 8000398:	fa20 f50c 	lsr.w	r5, r0, ip
 800039c:	fa21 f30c 	lsr.w	r3, r1, ip
 80003a0:	ea4f 481e 	mov.w	r8, lr, lsr #16
 80003a4:	4325      	orrs	r5, r4
 80003a6:	fbb3 f9f8 	udiv	r9, r3, r8
 80003aa:	0c2c      	lsrs	r4, r5, #16
 80003ac:	fb08 3319 	mls	r3, r8, r9, r3
 80003b0:	fa1f fa8e 	uxth.w	sl, lr
 80003b4:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80003b8:	fb09 f40a 	mul.w	r4, r9, sl
 80003bc:	429c      	cmp	r4, r3
 80003be:	fa02 f207 	lsl.w	r2, r2, r7
 80003c2:	fa00 f107 	lsl.w	r1, r0, r7
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b0>
 80003c8:	eb1e 0303 	adds.w	r3, lr, r3
 80003cc:	f109 30ff 	add.w	r0, r9, #4294967295
 80003d0:	f080 8087 	bcs.w	80004e2 <__udivmoddi4+0x2b2>
 80003d4:	429c      	cmp	r4, r3
 80003d6:	f240 8084 	bls.w	80004e2 <__udivmoddi4+0x2b2>
 80003da:	f1a9 0902 	sub.w	r9, r9, #2
 80003de:	4473      	add	r3, lr
 80003e0:	1b1b      	subs	r3, r3, r4
 80003e2:	b2ad      	uxth	r5, r5
 80003e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003e8:	fb08 3310 	mls	r3, r8, r0, r3
 80003ec:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003f0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003f4:	45a2      	cmp	sl, r4
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1da>
 80003f8:	eb1e 0404 	adds.w	r4, lr, r4
 80003fc:	f100 33ff 	add.w	r3, r0, #4294967295
 8000400:	d26b      	bcs.n	80004da <__udivmoddi4+0x2aa>
 8000402:	45a2      	cmp	sl, r4
 8000404:	d969      	bls.n	80004da <__udivmoddi4+0x2aa>
 8000406:	3802      	subs	r0, #2
 8000408:	4474      	add	r4, lr
 800040a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800040e:	fba0 8902 	umull	r8, r9, r0, r2
 8000412:	eba4 040a 	sub.w	r4, r4, sl
 8000416:	454c      	cmp	r4, r9
 8000418:	46c2      	mov	sl, r8
 800041a:	464b      	mov	r3, r9
 800041c:	d354      	bcc.n	80004c8 <__udivmoddi4+0x298>
 800041e:	d051      	beq.n	80004c4 <__udivmoddi4+0x294>
 8000420:	2e00      	cmp	r6, #0
 8000422:	d069      	beq.n	80004f8 <__udivmoddi4+0x2c8>
 8000424:	ebb1 050a 	subs.w	r5, r1, sl
 8000428:	eb64 0403 	sbc.w	r4, r4, r3
 800042c:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000430:	40fd      	lsrs	r5, r7
 8000432:	40fc      	lsrs	r4, r7
 8000434:	ea4c 0505 	orr.w	r5, ip, r5
 8000438:	e9c6 5400 	strd	r5, r4, [r6]
 800043c:	2700      	movs	r7, #0
 800043e:	e747      	b.n	80002d0 <__udivmoddi4+0xa0>
 8000440:	f1c2 0320 	rsb	r3, r2, #32
 8000444:	fa20 f703 	lsr.w	r7, r0, r3
 8000448:	4095      	lsls	r5, r2
 800044a:	fa01 f002 	lsl.w	r0, r1, r2
 800044e:	fa21 f303 	lsr.w	r3, r1, r3
 8000452:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000456:	4338      	orrs	r0, r7
 8000458:	0c01      	lsrs	r1, r0, #16
 800045a:	fbb3 f7fe 	udiv	r7, r3, lr
 800045e:	fa1f f885 	uxth.w	r8, r5
 8000462:	fb0e 3317 	mls	r3, lr, r7, r3
 8000466:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800046a:	fb07 f308 	mul.w	r3, r7, r8
 800046e:	428b      	cmp	r3, r1
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d907      	bls.n	8000486 <__udivmoddi4+0x256>
 8000476:	1869      	adds	r1, r5, r1
 8000478:	f107 3cff 	add.w	ip, r7, #4294967295
 800047c:	d22f      	bcs.n	80004de <__udivmoddi4+0x2ae>
 800047e:	428b      	cmp	r3, r1
 8000480:	d92d      	bls.n	80004de <__udivmoddi4+0x2ae>
 8000482:	3f02      	subs	r7, #2
 8000484:	4429      	add	r1, r5
 8000486:	1acb      	subs	r3, r1, r3
 8000488:	b281      	uxth	r1, r0
 800048a:	fbb3 f0fe 	udiv	r0, r3, lr
 800048e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000492:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000496:	fb00 f308 	mul.w	r3, r0, r8
 800049a:	428b      	cmp	r3, r1
 800049c:	d907      	bls.n	80004ae <__udivmoddi4+0x27e>
 800049e:	1869      	adds	r1, r5, r1
 80004a0:	f100 3cff 	add.w	ip, r0, #4294967295
 80004a4:	d217      	bcs.n	80004d6 <__udivmoddi4+0x2a6>
 80004a6:	428b      	cmp	r3, r1
 80004a8:	d915      	bls.n	80004d6 <__udivmoddi4+0x2a6>
 80004aa:	3802      	subs	r0, #2
 80004ac:	4429      	add	r1, r5
 80004ae:	1ac9      	subs	r1, r1, r3
 80004b0:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80004b4:	e73b      	b.n	800032e <__udivmoddi4+0xfe>
 80004b6:	4637      	mov	r7, r6
 80004b8:	4630      	mov	r0, r6
 80004ba:	e709      	b.n	80002d0 <__udivmoddi4+0xa0>
 80004bc:	4607      	mov	r7, r0
 80004be:	e6e7      	b.n	8000290 <__udivmoddi4+0x60>
 80004c0:	4618      	mov	r0, r3
 80004c2:	e6fb      	b.n	80002bc <__udivmoddi4+0x8c>
 80004c4:	4541      	cmp	r1, r8
 80004c6:	d2ab      	bcs.n	8000420 <__udivmoddi4+0x1f0>
 80004c8:	ebb8 0a02 	subs.w	sl, r8, r2
 80004cc:	eb69 020e 	sbc.w	r2, r9, lr
 80004d0:	3801      	subs	r0, #1
 80004d2:	4613      	mov	r3, r2
 80004d4:	e7a4      	b.n	8000420 <__udivmoddi4+0x1f0>
 80004d6:	4660      	mov	r0, ip
 80004d8:	e7e9      	b.n	80004ae <__udivmoddi4+0x27e>
 80004da:	4618      	mov	r0, r3
 80004dc:	e795      	b.n	800040a <__udivmoddi4+0x1da>
 80004de:	4667      	mov	r7, ip
 80004e0:	e7d1      	b.n	8000486 <__udivmoddi4+0x256>
 80004e2:	4681      	mov	r9, r0
 80004e4:	e77c      	b.n	80003e0 <__udivmoddi4+0x1b0>
 80004e6:	3802      	subs	r0, #2
 80004e8:	442c      	add	r4, r5
 80004ea:	e747      	b.n	800037c <__udivmoddi4+0x14c>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	442b      	add	r3, r5
 80004f2:	e72f      	b.n	8000354 <__udivmoddi4+0x124>
 80004f4:	4638      	mov	r0, r7
 80004f6:	e708      	b.n	800030a <__udivmoddi4+0xda>
 80004f8:	4637      	mov	r7, r6
 80004fa:	e6e9      	b.n	80002d0 <__udivmoddi4+0xa0>

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fdb7 	bl	8001076 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f868 	bl	80005dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9be 	bl	800088c <MX_GPIO_Init>
  MX_LPUART1_UART_Init();
 8000510:	f000 f942 	bl	8000798 <MX_LPUART1_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f990 	bl	8000838 <MX_USB_OTG_FS_PCD_Init>
  MX_I2C1_Init();
 8000518:	f000 f8fe 	bl	8000718 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */

  OLED_init();
 800051c:	f000 fa56 	bl	80009cc <OLED_init>

  /* USER CODE END 2 */
  printBitmap(nine);
 8000520:	4824      	ldr	r0, [pc, #144]	; (80005b4 <main+0xb4>)
 8000522:	f000 fbc1 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000526:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800052a:	f000 fe15 	bl	8001158 <HAL_Delay>

  printBitmap(eight);
 800052e:	4822      	ldr	r0, [pc, #136]	; (80005b8 <main+0xb8>)
 8000530:	f000 fbba 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000534:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000538:	f000 fe0e 	bl	8001158 <HAL_Delay>

  printBitmap(seven);
 800053c:	481f      	ldr	r0, [pc, #124]	; (80005bc <main+0xbc>)
 800053e:	f000 fbb3 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000542:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000546:	f000 fe07 	bl	8001158 <HAL_Delay>

  printBitmap(six);
 800054a:	481d      	ldr	r0, [pc, #116]	; (80005c0 <main+0xc0>)
 800054c:	f000 fbac 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000550:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000554:	f000 fe00 	bl	8001158 <HAL_Delay>


  printBitmap(five);
 8000558:	481a      	ldr	r0, [pc, #104]	; (80005c4 <main+0xc4>)
 800055a:	f000 fba5 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 fdf9 	bl	8001158 <HAL_Delay>

  printBitmap(four);
 8000566:	4818      	ldr	r0, [pc, #96]	; (80005c8 <main+0xc8>)
 8000568:	f000 fb9e 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 800056c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000570:	f000 fdf2 	bl	8001158 <HAL_Delay>

  printBitmap(three);
 8000574:	4815      	ldr	r0, [pc, #84]	; (80005cc <main+0xcc>)
 8000576:	f000 fb97 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 800057a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800057e:	f000 fdeb 	bl	8001158 <HAL_Delay>

  printBitmap(two);
 8000582:	4813      	ldr	r0, [pc, #76]	; (80005d0 <main+0xd0>)
 8000584:	f000 fb90 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000588:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800058c:	f000 fde4 	bl	8001158 <HAL_Delay>

  printBitmap(one);
 8000590:	4810      	ldr	r0, [pc, #64]	; (80005d4 <main+0xd4>)
 8000592:	f000 fb89 	bl	8000ca8 <printBitmap>
  HAL_Delay(1000);
 8000596:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800059a:	f000 fddd 	bl	8001158 <HAL_Delay>
  while (1)
  {

    /* USER CODE END WHILE */

	  printBitmap(new_year);
 800059e:	480e      	ldr	r0, [pc, #56]	; (80005d8 <main+0xd8>)
 80005a0:	f000 fb82 	bl	8000ca8 <printBitmap>
	  HAL_Delay(1000);
 80005a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005a8:	f000 fdd6 	bl	8001158 <HAL_Delay>

	  printGif();
 80005ac:	f000 fab0 	bl	8000b10 <printGif>
	  printBitmap(new_year);
 80005b0:	e7f5      	b.n	800059e <main+0x9e>
 80005b2:	bf00      	nop
 80005b4:	08009c9c 	.word	0x08009c9c
 80005b8:	0800949c 	.word	0x0800949c
 80005bc:	08008c9c 	.word	0x08008c9c
 80005c0:	0800849c 	.word	0x0800849c
 80005c4:	08007c9c 	.word	0x08007c9c
 80005c8:	0800749c 	.word	0x0800749c
 80005cc:	08006c9c 	.word	0x08006c9c
 80005d0:	0800649c 	.word	0x0800649c
 80005d4:	08005c9c 	.word	0x08005c9c
 80005d8:	0800a49c 	.word	0x0800a49c

080005dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005dc:	b580      	push	{r7, lr}
 80005de:	b0be      	sub	sp, #248	; 0xf8
 80005e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005e2:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 80005e6:	2248      	movs	r2, #72	; 0x48
 80005e8:	2100      	movs	r1, #0
 80005ea:	4618      	mov	r0, r3
 80005ec:	f005 fb3a 	bl	8005c64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005f0:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80005f4:	2200      	movs	r2, #0
 80005f6:	601a      	str	r2, [r3, #0]
 80005f8:	605a      	str	r2, [r3, #4]
 80005fa:	609a      	str	r2, [r3, #8]
 80005fc:	60da      	str	r2, [r3, #12]
 80005fe:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	2298      	movs	r2, #152	; 0x98
 8000604:	2100      	movs	r1, #0
 8000606:	4618      	mov	r0, r3
 8000608:	f005 fb2c 	bl	8005c64 <memset>

  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST) != HAL_OK)
 800060c:	2000      	movs	r0, #0
 800060e:	f001 fe65 	bl	80022dc <HAL_PWREx_ControlVoltageScaling>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <SystemClock_Config+0x40>
  {
    Error_Handler();
 8000618:	f000 f9d0 	bl	80009bc <Error_Handler>
  }
  /** Configure LSE Drive Capability 
  */
  HAL_PWR_EnableBkUpAccess();
 800061c:	f001 fe2e 	bl	800227c <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 8000620:	4b3c      	ldr	r3, [pc, #240]	; (8000714 <SystemClock_Config+0x138>)
 8000622:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8000626:	4a3b      	ldr	r2, [pc, #236]	; (8000714 <SystemClock_Config+0x138>)
 8000628:	f023 0318 	bic.w	r3, r3, #24
 800062c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSE|RCC_OSCILLATORTYPE_MSI;
 8000630:	2314      	movs	r3, #20
 8000632:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8000636:	2301      	movs	r3, #1
 8000638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 800063c:	2301      	movs	r3, #1
 800063e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.MSICalibrationValue = 0;
 8000642:	2300      	movs	r3, #0
 8000644:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000648:	2360      	movs	r3, #96	; 0x60
 800064a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800064e:	2302      	movs	r3, #2
 8000650:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000654:	2301      	movs	r3, #1
 8000656:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  RCC_OscInitStruct.PLL.PLLM = 1;
 800065a:	2301      	movs	r3, #1
 800065c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  RCC_OscInitStruct.PLL.PLLN = 60;
 8000660:	233c      	movs	r3, #60	; 0x3c
 8000662:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000666:	2307      	movs	r3, #7
 8000668:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800066c:	2302      	movs	r3, #2
 800066e:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000672:	2302      	movs	r3, #2
 8000674:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000678:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800067c:	4618      	mov	r0, r3
 800067e:	f001 fef1 	bl	8002464 <HAL_RCC_OscConfig>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <SystemClock_Config+0xb0>
  {
    Error_Handler();
 8000688:	f000 f998 	bl	80009bc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800068c:	230f      	movs	r3, #15
 800068e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000692:	2303      	movs	r3, #3
 8000694:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000698:	2300      	movs	r3, #0
 800069a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800069e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80006a2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80006a6:	2300      	movs	r3, #0
 80006a8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80006ac:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80006b0:	2105      	movs	r1, #5
 80006b2:	4618      	mov	r0, r3
 80006b4:	f002 fb5e 	bl	8002d74 <HAL_RCC_ClockConfig>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d001      	beq.n	80006c2 <SystemClock_Config+0xe6>
  {
    Error_Handler();
 80006be:	f000 f97d 	bl	80009bc <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1|RCC_PERIPHCLK_I2C1
 80006c2:	f242 0360 	movw	r3, #8288	; 0x2060
 80006c6:	607b      	str	r3, [r7, #4]
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80006c8:	2300      	movs	r3, #0
 80006ca:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 80006cc:	2300      	movs	r3, #0
 80006ce:	65bb      	str	r3, [r7, #88]	; 0x58
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 80006d0:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80006d4:	67bb      	str	r3, [r7, #120]	; 0x78
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 80006d6:	2301      	movs	r3, #1
 80006d8:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 80006da:	2301      	movs	r3, #1
 80006dc:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 80006de:	2318      	movs	r3, #24
 80006e0:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006ea:	2302      	movs	r3, #2
 80006ec:	61fb      	str	r3, [r7, #28]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_48M2CLK;
 80006ee:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80006f2:	623b      	str	r3, [r7, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006f4:	1d3b      	adds	r3, r7, #4
 80006f6:	4618      	mov	r0, r3
 80006f8:	f002 fdec 	bl	80032d4 <HAL_RCCEx_PeriphCLKConfig>
 80006fc:	4603      	mov	r3, r0
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d001      	beq.n	8000706 <SystemClock_Config+0x12a>
  {
    Error_Handler();
 8000702:	f000 f95b 	bl	80009bc <Error_Handler>
  }
  /** Enable MSI Auto calibration 
  */
  HAL_RCCEx_EnableMSIPLLMode();
 8000706:	f003 f949 	bl	800399c <HAL_RCCEx_EnableMSIPLLMode>
}
 800070a:	bf00      	nop
 800070c:	37f8      	adds	r7, #248	; 0xf8
 800070e:	46bd      	mov	sp, r7
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	40021000 	.word	0x40021000

08000718 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800071c:	4b1b      	ldr	r3, [pc, #108]	; (800078c <MX_I2C1_Init+0x74>)
 800071e:	4a1c      	ldr	r2, [pc, #112]	; (8000790 <MX_I2C1_Init+0x78>)
 8000720:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00501E6C;
 8000722:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_I2C1_Init+0x74>)
 8000724:	4a1b      	ldr	r2, [pc, #108]	; (8000794 <MX_I2C1_Init+0x7c>)
 8000726:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000728:	4b18      	ldr	r3, [pc, #96]	; (800078c <MX_I2C1_Init+0x74>)
 800072a:	2200      	movs	r2, #0
 800072c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_I2C1_Init+0x74>)
 8000730:	2201      	movs	r2, #1
 8000732:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_I2C1_Init+0x74>)
 8000736:	2200      	movs	r2, #0
 8000738:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_I2C1_Init+0x74>)
 800073c:	2200      	movs	r2, #0
 800073e:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_I2C1_Init+0x74>)
 8000742:	2200      	movs	r2, #0
 8000744:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_I2C1_Init+0x74>)
 8000748:	2200      	movs	r2, #0
 800074a:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800074c:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_I2C1_Init+0x74>)
 800074e:	2200      	movs	r2, #0
 8000750:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000752:	480e      	ldr	r0, [pc, #56]	; (800078c <MX_I2C1_Init+0x74>)
 8000754:	f000 ffb2 	bl	80016bc <HAL_I2C_Init>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d001      	beq.n	8000762 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800075e:	f000 f92d 	bl	80009bc <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000762:	2100      	movs	r1, #0
 8000764:	4809      	ldr	r0, [pc, #36]	; (800078c <MX_I2C1_Init+0x74>)
 8000766:	f001 fba9 	bl	8001ebc <HAL_I2CEx_ConfigAnalogFilter>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000770:	f000 f924 	bl	80009bc <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000774:	2100      	movs	r1, #0
 8000776:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_I2C1_Init+0x74>)
 8000778:	f001 fbeb 	bl	8001f52 <HAL_I2CEx_ConfigDigitalFilter>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000782:	f000 f91b 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000786:	bf00      	nop
 8000788:	bd80      	pop	{r7, pc}
 800078a:	bf00      	nop
 800078c:	20000028 	.word	0x20000028
 8000790:	40005400 	.word	0x40005400
 8000794:	00501e6c 	.word	0x00501e6c

08000798 <MX_LPUART1_UART_Init>:
  * @brief LPUART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_LPUART1_UART_Init(void)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800079c:	4b22      	ldr	r3, [pc, #136]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 800079e:	4a23      	ldr	r2, [pc, #140]	; (800082c <MX_LPUART1_UART_Init+0x94>)
 80007a0:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 209700;
 80007a2:	4b21      	ldr	r3, [pc, #132]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007a4:	4a22      	ldr	r2, [pc, #136]	; (8000830 <MX_LPUART1_UART_Init+0x98>)
 80007a6:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_7B;
 80007a8:	4b1f      	ldr	r3, [pc, #124]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007aa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80007ae:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 80007b0:	4b1d      	ldr	r3, [pc, #116]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007b2:	2200      	movs	r2, #0
 80007b4:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 80007b6:	4b1c      	ldr	r3, [pc, #112]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007b8:	2200      	movs	r2, #0
 80007ba:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 80007bc:	4b1a      	ldr	r3, [pc, #104]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007be:	220c      	movs	r2, #12
 80007c0:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007c2:	4b19      	ldr	r3, [pc, #100]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007c4:	2200      	movs	r2, #0
 80007c6:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80007c8:	4b17      	ldr	r3, [pc, #92]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007ca:	2200      	movs	r2, #0
 80007cc:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80007ce:	4b16      	ldr	r3, [pc, #88]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007d0:	2200      	movs	r2, #0
 80007d2:	625a      	str	r2, [r3, #36]	; 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80007d4:	4b14      	ldr	r3, [pc, #80]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007d6:	2200      	movs	r2, #0
 80007d8:	629a      	str	r2, [r3, #40]	; 0x28
  hlpuart1.FifoMode = UART_FIFOMODE_DISABLE;
 80007da:	4b13      	ldr	r3, [pc, #76]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007dc:	2200      	movs	r2, #0
 80007de:	665a      	str	r2, [r3, #100]	; 0x64
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 80007e0:	4811      	ldr	r0, [pc, #68]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007e2:	f003 facb 	bl	8003d7c <HAL_UART_Init>
 80007e6:	4603      	mov	r3, r0
 80007e8:	2b00      	cmp	r3, #0
 80007ea:	d001      	beq.n	80007f0 <MX_LPUART1_UART_Init+0x58>
  {
    Error_Handler();
 80007ec:	f000 f8e6 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80007f0:	2100      	movs	r1, #0
 80007f2:	480d      	ldr	r0, [pc, #52]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 80007f4:	f004 fea5 	bl	8005542 <HAL_UARTEx_SetTxFifoThreshold>
 80007f8:	4603      	mov	r3, r0
 80007fa:	2b00      	cmp	r3, #0
 80007fc:	d001      	beq.n	8000802 <MX_LPUART1_UART_Init+0x6a>
  {
    Error_Handler();
 80007fe:	f000 f8dd 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000802:	2100      	movs	r1, #0
 8000804:	4808      	ldr	r0, [pc, #32]	; (8000828 <MX_LPUART1_UART_Init+0x90>)
 8000806:	f004 feda 	bl	80055be <HAL_UARTEx_SetRxFifoThreshold>
 800080a:	4603      	mov	r3, r0
 800080c:	2b00      	cmp	r3, #0
 800080e:	d001      	beq.n	8000814 <MX_LPUART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000810:	f000 f8d4 	bl	80009bc <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000814:	4807      	ldr	r0, [pc, #28]	; (8000834 <MX_LPUART1_UART_Init+0x9c>)
 8000816:	f004 fe5b 	bl	80054d0 <HAL_UARTEx_DisableFifoMode>
 800081a:	4603      	mov	r3, r0
 800081c:	2b00      	cmp	r3, #0
 800081e:	d001      	beq.n	8000824 <MX_LPUART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000820:	f000 f8cc 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8000824:	bf00      	nop
 8000826:	bd80      	pop	{r7, pc}
 8000828:	2000047c 	.word	0x2000047c
 800082c:	40008000 	.word	0x40008000
 8000830:	00033324 	.word	0x00033324
 8000834:	20000508 	.word	0x20000508

08000838 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000838:	b580      	push	{r7, lr}
 800083a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800083c:	4b12      	ldr	r3, [pc, #72]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800083e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000842:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000844:	4b10      	ldr	r3, [pc, #64]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000846:	2206      	movs	r2, #6
 8000848:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800084a:	4b0f      	ldr	r3, [pc, #60]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800084c:	2202      	movs	r2, #2
 800084e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000850:	4b0d      	ldr	r3, [pc, #52]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000852:	2201      	movs	r2, #1
 8000854:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000856:	4b0c      	ldr	r3, [pc, #48]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000858:	2200      	movs	r2, #0
 800085a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800085c:	4b0a      	ldr	r3, [pc, #40]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800085e:	2200      	movs	r2, #0
 8000860:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.battery_charging_enable = ENABLE;
 8000862:	4b09      	ldr	r3, [pc, #36]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000864:	2201      	movs	r2, #1
 8000866:	629a      	str	r2, [r3, #40]	; 0x28
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000868:	4b07      	ldr	r3, [pc, #28]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 800086a:	2200      	movs	r2, #0
 800086c:	631a      	str	r2, [r3, #48]	; 0x30
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800086e:	4b06      	ldr	r3, [pc, #24]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000870:	2201      	movs	r2, #1
 8000872:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000874:	4804      	ldr	r0, [pc, #16]	; (8000888 <MX_USB_OTG_FS_PCD_Init+0x50>)
 8000876:	f001 fbb8 	bl	8001fea <HAL_PCD_Init>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <MX_USB_OTG_FS_PCD_Init+0x4c>
  {
    Error_Handler();
 8000880:	f000 f89c 	bl	80009bc <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000884:	bf00      	nop
 8000886:	bd80      	pop	{r7, pc}
 8000888:	20000074 	.word	0x20000074

0800088c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b08a      	sub	sp, #40	; 0x28
 8000890:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000892:	f107 0314 	add.w	r3, r7, #20
 8000896:	2200      	movs	r2, #0
 8000898:	601a      	str	r2, [r3, #0]
 800089a:	605a      	str	r2, [r3, #4]
 800089c:	609a      	str	r2, [r3, #8]
 800089e:	60da      	str	r2, [r3, #12]
 80008a0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008a2:	4b41      	ldr	r3, [pc, #260]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008a6:	4a40      	ldr	r2, [pc, #256]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008a8:	f043 0304 	orr.w	r3, r3, #4
 80008ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008ae:	4b3e      	ldr	r3, [pc, #248]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008b2:	f003 0304 	and.w	r3, r3, #4
 80008b6:	613b      	str	r3, [r7, #16]
 80008b8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ba:	4b3b      	ldr	r3, [pc, #236]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008be:	4a3a      	ldr	r2, [pc, #232]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008c0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008c6:	4b38      	ldr	r3, [pc, #224]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ce:	60fb      	str	r3, [r7, #12]
 80008d0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008d2:	4b35      	ldr	r3, [pc, #212]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008d6:	4a34      	ldr	r2, [pc, #208]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008d8:	f043 0302 	orr.w	r3, r3, #2
 80008dc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008de:	4b32      	ldr	r3, [pc, #200]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008e0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008e2:	f003 0302 	and.w	r3, r3, #2
 80008e6:	60bb      	str	r3, [r7, #8]
 80008e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80008ea:	4b2f      	ldr	r3, [pc, #188]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008ee:	4a2e      	ldr	r2, [pc, #184]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008f0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80008f4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80008f6:	4b2c      	ldr	r3, [pc, #176]	; (80009a8 <MX_GPIO_Init+0x11c>)
 80008f8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80008fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80008fe:	607b      	str	r3, [r7, #4]
 8000900:	687b      	ldr	r3, [r7, #4]
  HAL_PWREx_EnableVddIO2();
 8000902:	f001 fd9f 	bl	8002444 <HAL_PWREx_EnableVddIO2>
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000906:	4b28      	ldr	r3, [pc, #160]	; (80009a8 <MX_GPIO_Init+0x11c>)
 8000908:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090a:	4a27      	ldr	r2, [pc, #156]	; (80009a8 <MX_GPIO_Init+0x11c>)
 800090c:	f043 0301 	orr.w	r3, r3, #1
 8000910:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000912:	4b25      	ldr	r3, [pc, #148]	; (80009a8 <MX_GPIO_Init+0x11c>)
 8000914:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800091e:	2200      	movs	r2, #0
 8000920:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000924:	4821      	ldr	r0, [pc, #132]	; (80009ac <MX_GPIO_Init+0x120>)
 8000926:	f000 feb1 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 800092a:	2200      	movs	r2, #0
 800092c:	2140      	movs	r1, #64	; 0x40
 800092e:	4820      	ldr	r0, [pc, #128]	; (80009b0 <MX_GPIO_Init+0x124>)
 8000930:	f000 feac 	bl	800168c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000934:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000938:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800093a:	4b1e      	ldr	r3, [pc, #120]	; (80009b4 <MX_GPIO_Init+0x128>)
 800093c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093e:	2300      	movs	r3, #0
 8000940:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	481b      	ldr	r0, [pc, #108]	; (80009b8 <MX_GPIO_Init+0x12c>)
 800094a:	f000 fd0d 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 800094e:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000952:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000954:	2301      	movs	r3, #1
 8000956:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000958:	2300      	movs	r3, #0
 800095a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095c:	2300      	movs	r3, #0
 800095e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000960:	f107 0314 	add.w	r3, r7, #20
 8000964:	4619      	mov	r1, r3
 8000966:	4811      	ldr	r0, [pc, #68]	; (80009ac <MX_GPIO_Init+0x120>)
 8000968:	f000 fcfe 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 800096c:	2320      	movs	r3, #32
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0314 	add.w	r3, r7, #20
 800097c:	4619      	mov	r1, r3
 800097e:	480c      	ldr	r0, [pc, #48]	; (80009b0 <MX_GPIO_Init+0x124>)
 8000980:	f000 fcf2 	bl	8001368 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000984:	2340      	movs	r3, #64	; 0x40
 8000986:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000988:	2301      	movs	r3, #1
 800098a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000990:	2300      	movs	r3, #0
 8000992:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000994:	f107 0314 	add.w	r3, r7, #20
 8000998:	4619      	mov	r1, r3
 800099a:	4805      	ldr	r0, [pc, #20]	; (80009b0 <MX_GPIO_Init+0x124>)
 800099c:	f000 fce4 	bl	8001368 <HAL_GPIO_Init>

}
 80009a0:	bf00      	nop
 80009a2:	3728      	adds	r7, #40	; 0x28
 80009a4:	46bd      	mov	sp, r7
 80009a6:	bd80      	pop	{r7, pc}
 80009a8:	40021000 	.word	0x40021000
 80009ac:	48000400 	.word	0x48000400
 80009b0:	48001800 	.word	0x48001800
 80009b4:	10110000 	.word	0x10110000
 80009b8:	48000800 	.word	0x48000800

080009bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80009c0:	bf00      	nop
 80009c2:	46bd      	mov	sp, r7
 80009c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c8:	4770      	bx	lr
	...

080009cc <OLED_init>:

#define DELAY_GIF (1)
extern I2C_HandleTypeDef hi2c1;

uint8_t OLED_init()
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	/* Check if the slave device is ready to start the communication */
	if (HAL_I2C_IsDeviceReady(&hi2c1, OLED_ADDRESS, 1, 20000) != HAL_OK)
 80009d0:	f644 6320 	movw	r3, #20000	; 0x4e20
 80009d4:	2201      	movs	r2, #1
 80009d6:	2178      	movs	r1, #120	; 0x78
 80009d8:	481f      	ldr	r0, [pc, #124]	; (8000a58 <OLED_init+0x8c>)
 80009da:	f000 fff3 	bl	80019c4 <HAL_I2C_IsDeviceReady>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d001      	beq.n	80009e8 <OLED_init+0x1c>
	{
			/* Return false */
			return 0;
 80009e4:	2300      	movs	r3, #0
 80009e6:	e035      	b.n	8000a54 <OLED_init+0x88>
	}

	writeCommand(0xae); //Display OFF
 80009e8:	20ae      	movs	r0, #174	; 0xae
 80009ea:	f000 f861 	bl	8000ab0 <writeCommand>
	writeCommand(0xd5); //Set Dclk
 80009ee:	20d5      	movs	r0, #213	; 0xd5
 80009f0:	f000 f85e 	bl	8000ab0 <writeCommand>
	writeCommand(0x50); //100 hz
 80009f4:	2050      	movs	r0, #80	; 0x50
 80009f6:	f000 f85b 	bl	8000ab0 <writeCommand>
	writeCommand(0x20); // Set row address
 80009fa:	2020      	movs	r0, #32
 80009fc:	f000 f858 	bl	8000ab0 <writeCommand>
	writeCommand(0x81); //Set contrast control
 8000a00:	2081      	movs	r0, #129	; 0x81
 8000a02:	f000 f855 	bl	8000ab0 <writeCommand>
	writeCommand(0x80); //
 8000a06:	2080      	movs	r0, #128	; 0x80
 8000a08:	f000 f852 	bl	8000ab0 <writeCommand>
	writeCommand(0xa0); //Segment remap
 8000a0c:	20a0      	movs	r0, #160	; 0xa0
 8000a0e:	f000 f84f 	bl	8000ab0 <writeCommand>
	writeCommand(0xa4); //Set Entire Display On
 8000a12:	20a4      	movs	r0, #164	; 0xa4
 8000a14:	f000 f84c 	bl	8000ab0 <writeCommand>
	writeCommand(0xa6); //Normal Display
 8000a18:	20a6      	movs	r0, #166	; 0xa6
 8000a1a:	f000 f849 	bl	8000ab0 <writeCommand>
	writeCommand(0xad); //Set external VCC
 8000a1e:	20ad      	movs	r0, #173	; 0xad
 8000a20:	f000 f846 	bl	8000ab0 <writeCommand>
	writeCommand(0x80); //
 8000a24:	2080      	movs	r0, #128	; 0x80
 8000a26:	f000 f843 	bl	8000ab0 <writeCommand>
	writeCommand(0xc0); //Set common scan direction
 8000a2a:	20c0      	movs	r0, #192	; 0xc0
 8000a2c:	f000 f840 	bl	8000ab0 <writeCommand>
	writeCommand(0xd9); //Set phase length
 8000a30:	20d9      	movs	r0, #217	; 0xd9
 8000a32:	f000 f83d 	bl	8000ab0 <writeCommand>
	writeCommand(0x1f); //
 8000a36:	201f      	movs	r0, #31
 8000a38:	f000 f83a 	bl	8000ab0 <writeCommand>
	writeCommand(0xdb); //Set Vcomh voltage
 8000a3c:	20db      	movs	r0, #219	; 0xdb
 8000a3e:	f000 f837 	bl	8000ab0 <writeCommand>
	writeCommand(0x27); //
 8000a42:	2027      	movs	r0, #39	; 0x27
 8000a44:	f000 f834 	bl	8000ab0 <writeCommand>
	Clear_All_RAM();
 8000a48:	f000 f808 	bl	8000a5c <Clear_All_RAM>
	writeCommand(0xaf); //Display On
 8000a4c:	20af      	movs	r0, #175	; 0xaf
 8000a4e:	f000 f82f 	bl	8000ab0 <writeCommand>

	return 1;  /* If the device is ready return 1 */
 8000a52:	2301      	movs	r3, #1

}
 8000a54:	4618      	mov	r0, r3
 8000a56:	bd80      	pop	{r7, pc}
 8000a58:	20000028 	.word	0x20000028

08000a5c <Clear_All_RAM>:

void Clear_All_RAM(void)
{
 8000a5c:	b580      	push	{r7, lr}
 8000a5e:	b082      	sub	sp, #8
 8000a60:	af00      	add	r7, sp, #0
	unsigned char i, j;
	/*Cycle for to clear all ram in each page */
	for(i = 0; i < PAGES; i++)
 8000a62:	2300      	movs	r3, #0
 8000a64:	71fb      	strb	r3, [r7, #7]
 8000a66:	e01b      	b.n	8000aa0 <Clear_All_RAM+0x44>
	{
		writeCommand(0xb0+i);  /*Skip to the next page  */
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	3b50      	subs	r3, #80	; 0x50
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f81e 	bl	8000ab0 <writeCommand>
		writeCommand(0x00);
 8000a74:	2000      	movs	r0, #0
 8000a76:	f000 f81b 	bl	8000ab0 <writeCommand>
		writeCommand(0x10);
 8000a7a:	2010      	movs	r0, #16
 8000a7c:	f000 f818 	bl	8000ab0 <writeCommand>
		for( j = 0; j < HEIGHT; j++)
 8000a80:	2300      	movs	r3, #0
 8000a82:	71bb      	strb	r3, [r7, #6]
 8000a84:	e005      	b.n	8000a92 <Clear_All_RAM+0x36>
		{
			writeData(0x00);
 8000a86:	2000      	movs	r0, #0
 8000a88:	f000 f82a 	bl	8000ae0 <writeData>
		for( j = 0; j < HEIGHT; j++)
 8000a8c:	79bb      	ldrb	r3, [r7, #6]
 8000a8e:	3301      	adds	r3, #1
 8000a90:	71bb      	strb	r3, [r7, #6]
 8000a92:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8000a96:	2b00      	cmp	r3, #0
 8000a98:	daf5      	bge.n	8000a86 <Clear_All_RAM+0x2a>
	for(i = 0; i < PAGES; i++)
 8000a9a:	79fb      	ldrb	r3, [r7, #7]
 8000a9c:	3301      	adds	r3, #1
 8000a9e:	71fb      	strb	r3, [r7, #7]
 8000aa0:	79fb      	ldrb	r3, [r7, #7]
 8000aa2:	2b0f      	cmp	r3, #15
 8000aa4:	d9e0      	bls.n	8000a68 <Clear_All_RAM+0xc>
		}
	}
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <writeCommand>:

void writeCommand(uint8_t data)
{
 8000ab0:	b580      	push	{r7, lr}
 8000ab2:	b086      	sub	sp, #24
 8000ab4:	af02      	add	r7, sp, #8
 8000ab6:	4603      	mov	r3, r0
 8000ab8:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_COMMAND;  /*Value to indicate that the next value is a command config */
 8000aba:	2300      	movs	r3, #0
 8000abc:	733b      	strb	r3, [r7, #12]
	dt[1] = data; /* Command option */
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS , dt, 2, 10);  /*Function HAL to transmit through I2C port selected  */
 8000ac2:	f107 020c 	add.w	r2, r7, #12
 8000ac6:	230a      	movs	r3, #10
 8000ac8:	9300      	str	r3, [sp, #0]
 8000aca:	2302      	movs	r3, #2
 8000acc:	2178      	movs	r1, #120	; 0x78
 8000ace:	4803      	ldr	r0, [pc, #12]	; (8000adc <writeCommand+0x2c>)
 8000ad0:	f000 fe84 	bl	80017dc <HAL_I2C_Master_Transmit>
}
 8000ad4:	bf00      	nop
 8000ad6:	3710      	adds	r7, #16
 8000ad8:	46bd      	mov	sp, r7
 8000ada:	bd80      	pop	{r7, pc}
 8000adc:	20000028 	.word	0x20000028

08000ae0 <writeData>:

void writeData(uint8_t data)
{
 8000ae0:	b580      	push	{r7, lr}
 8000ae2:	b086      	sub	sp, #24
 8000ae4:	af02      	add	r7, sp, #8
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	71fb      	strb	r3, [r7, #7]
	uint8_t dt[2];
	dt[0] = REG_DATA; /*Value to indicate that the next value is data to write in the RAM Oled Screen */
 8000aea:	2340      	movs	r3, #64	; 0x40
 8000aec:	733b      	strb	r3, [r7, #12]
	dt[1] = data;     /*Value to write in the OLED Screen RAM */
 8000aee:	79fb      	ldrb	r3, [r7, #7]
 8000af0:	737b      	strb	r3, [r7, #13]
	HAL_I2C_Master_Transmit(&hi2c1, OLED_ADDRESS, dt, 2, 10);
 8000af2:	f107 020c 	add.w	r2, r7, #12
 8000af6:	230a      	movs	r3, #10
 8000af8:	9300      	str	r3, [sp, #0]
 8000afa:	2302      	movs	r3, #2
 8000afc:	2178      	movs	r1, #120	; 0x78
 8000afe:	4803      	ldr	r0, [pc, #12]	; (8000b0c <writeData+0x2c>)
 8000b00:	f000 fe6c 	bl	80017dc <HAL_I2C_Master_Transmit>
}
 8000b04:	bf00      	nop
 8000b06:	3710      	adds	r7, #16
 8000b08:	46bd      	mov	sp, r7
 8000b0a:	bd80      	pop	{r7, pc}
 8000b0c:	20000028 	.word	0x20000028

08000b10 <printGif>:


void printGif()
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0

	printBitmap(fuego1);
 8000b14:	484b      	ldr	r0, [pc, #300]	; (8000c44 <printGif+0x134>)
 8000b16:	f000 f8c7 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b1a:	2001      	movs	r0, #1
 8000b1c:	f000 fb1c 	bl	8001158 <HAL_Delay>

	printBitmap(fuego2);
 8000b20:	4849      	ldr	r0, [pc, #292]	; (8000c48 <printGif+0x138>)
 8000b22:	f000 f8c1 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b26:	2001      	movs	r0, #1
 8000b28:	f000 fb16 	bl	8001158 <HAL_Delay>

	printBitmap(fuego3);
 8000b2c:	4847      	ldr	r0, [pc, #284]	; (8000c4c <printGif+0x13c>)
 8000b2e:	f000 f8bb 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b32:	2001      	movs	r0, #1
 8000b34:	f000 fb10 	bl	8001158 <HAL_Delay>


	printBitmap(fuego4);
 8000b38:	4845      	ldr	r0, [pc, #276]	; (8000c50 <printGif+0x140>)
 8000b3a:	f000 f8b5 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b3e:	2001      	movs	r0, #1
 8000b40:	f000 fb0a 	bl	8001158 <HAL_Delay>

	printBitmap(fuego5);
 8000b44:	4843      	ldr	r0, [pc, #268]	; (8000c54 <printGif+0x144>)
 8000b46:	f000 f8af 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b4a:	2001      	movs	r0, #1
 8000b4c:	f000 fb04 	bl	8001158 <HAL_Delay>

	printBitmap(fuego6);
 8000b50:	4841      	ldr	r0, [pc, #260]	; (8000c58 <printGif+0x148>)
 8000b52:	f000 f8a9 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b56:	2001      	movs	r0, #1
 8000b58:	f000 fafe 	bl	8001158 <HAL_Delay>

	printBitmap(fuego7);
 8000b5c:	483f      	ldr	r0, [pc, #252]	; (8000c5c <printGif+0x14c>)
 8000b5e:	f000 f8a3 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b62:	2001      	movs	r0, #1
 8000b64:	f000 faf8 	bl	8001158 <HAL_Delay>

	printBitmap(fuego8);
 8000b68:	483d      	ldr	r0, [pc, #244]	; (8000c60 <printGif+0x150>)
 8000b6a:	f000 f89d 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b6e:	2001      	movs	r0, #1
 8000b70:	f000 faf2 	bl	8001158 <HAL_Delay>

	printBitmap(fuego9);
 8000b74:	483b      	ldr	r0, [pc, #236]	; (8000c64 <printGif+0x154>)
 8000b76:	f000 f897 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b7a:	2001      	movs	r0, #1
 8000b7c:	f000 faec 	bl	8001158 <HAL_Delay>

	printBitmap(fuego10);
 8000b80:	4839      	ldr	r0, [pc, #228]	; (8000c68 <printGif+0x158>)
 8000b82:	f000 f891 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b86:	2001      	movs	r0, #1
 8000b88:	f000 fae6 	bl	8001158 <HAL_Delay>

	printBitmap(fuego11);
 8000b8c:	4837      	ldr	r0, [pc, #220]	; (8000c6c <printGif+0x15c>)
 8000b8e:	f000 f88b 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b92:	2001      	movs	r0, #1
 8000b94:	f000 fae0 	bl	8001158 <HAL_Delay>

	printBitmap(fuego12);
 8000b98:	4835      	ldr	r0, [pc, #212]	; (8000c70 <printGif+0x160>)
 8000b9a:	f000 f885 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000b9e:	2001      	movs	r0, #1
 8000ba0:	f000 fada 	bl	8001158 <HAL_Delay>

	printBitmap(fuego13);
 8000ba4:	4833      	ldr	r0, [pc, #204]	; (8000c74 <printGif+0x164>)
 8000ba6:	f000 f87f 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000baa:	2001      	movs	r0, #1
 8000bac:	f000 fad4 	bl	8001158 <HAL_Delay>


	printBitmap(fuego14);
 8000bb0:	4831      	ldr	r0, [pc, #196]	; (8000c78 <printGif+0x168>)
 8000bb2:	f000 f879 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bb6:	2001      	movs	r0, #1
 8000bb8:	f000 face 	bl	8001158 <HAL_Delay>

	printBitmap(fuego15);
 8000bbc:	482f      	ldr	r0, [pc, #188]	; (8000c7c <printGif+0x16c>)
 8000bbe:	f000 f873 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bc2:	2001      	movs	r0, #1
 8000bc4:	f000 fac8 	bl	8001158 <HAL_Delay>

	printBitmap(fuego16);
 8000bc8:	482d      	ldr	r0, [pc, #180]	; (8000c80 <printGif+0x170>)
 8000bca:	f000 f86d 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bce:	2001      	movs	r0, #1
 8000bd0:	f000 fac2 	bl	8001158 <HAL_Delay>

	printBitmap(fuego17);
 8000bd4:	482b      	ldr	r0, [pc, #172]	; (8000c84 <printGif+0x174>)
 8000bd6:	f000 f867 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bda:	2001      	movs	r0, #1
 8000bdc:	f000 fabc 	bl	8001158 <HAL_Delay>

	printBitmap(fuego18);
 8000be0:	4829      	ldr	r0, [pc, #164]	; (8000c88 <printGif+0x178>)
 8000be2:	f000 f861 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000be6:	2001      	movs	r0, #1
 8000be8:	f000 fab6 	bl	8001158 <HAL_Delay>

	printBitmap(fuego19);
 8000bec:	4827      	ldr	r0, [pc, #156]	; (8000c8c <printGif+0x17c>)
 8000bee:	f000 f85b 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bf2:	2001      	movs	r0, #1
 8000bf4:	f000 fab0 	bl	8001158 <HAL_Delay>

	printBitmap(fuego20);
 8000bf8:	4825      	ldr	r0, [pc, #148]	; (8000c90 <printGif+0x180>)
 8000bfa:	f000 f855 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000bfe:	2001      	movs	r0, #1
 8000c00:	f000 faaa 	bl	8001158 <HAL_Delay>

	printBitmap(fuego21);
 8000c04:	4823      	ldr	r0, [pc, #140]	; (8000c94 <printGif+0x184>)
 8000c06:	f000 f84f 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000c0a:	2001      	movs	r0, #1
 8000c0c:	f000 faa4 	bl	8001158 <HAL_Delay>

	printBitmap(fuego22);
 8000c10:	4821      	ldr	r0, [pc, #132]	; (8000c98 <printGif+0x188>)
 8000c12:	f000 f849 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000c16:	2001      	movs	r0, #1
 8000c18:	f000 fa9e 	bl	8001158 <HAL_Delay>

	printBitmap(fuego23);
 8000c1c:	481f      	ldr	r0, [pc, #124]	; (8000c9c <printGif+0x18c>)
 8000c1e:	f000 f843 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000c22:	2001      	movs	r0, #1
 8000c24:	f000 fa98 	bl	8001158 <HAL_Delay>


	printBitmap(fuego24);
 8000c28:	481d      	ldr	r0, [pc, #116]	; (8000ca0 <printGif+0x190>)
 8000c2a:	f000 f83d 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f000 fa92 	bl	8001158 <HAL_Delay>

	printBitmap(fuego25);
 8000c34:	481b      	ldr	r0, [pc, #108]	; (8000ca4 <printGif+0x194>)
 8000c36:	f000 f837 	bl	8000ca8 <printBitmap>
	HAL_Delay(DELAY_GIF);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fa8c 	bl	8001158 <HAL_Delay>


}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	0800ac9c 	.word	0x0800ac9c
 8000c48:	0800b49c 	.word	0x0800b49c
 8000c4c:	0800bc9c 	.word	0x0800bc9c
 8000c50:	0800c49c 	.word	0x0800c49c
 8000c54:	0800cc9c 	.word	0x0800cc9c
 8000c58:	0800d49c 	.word	0x0800d49c
 8000c5c:	0800dc9c 	.word	0x0800dc9c
 8000c60:	0800e49c 	.word	0x0800e49c
 8000c64:	0800ec9c 	.word	0x0800ec9c
 8000c68:	0800f49c 	.word	0x0800f49c
 8000c6c:	0800fc9c 	.word	0x0800fc9c
 8000c70:	0801049c 	.word	0x0801049c
 8000c74:	08010c9c 	.word	0x08010c9c
 8000c78:	0801149c 	.word	0x0801149c
 8000c7c:	08011c9c 	.word	0x08011c9c
 8000c80:	0801249c 	.word	0x0801249c
 8000c84:	08012c9c 	.word	0x08012c9c
 8000c88:	0801349c 	.word	0x0801349c
 8000c8c:	08013c9c 	.word	0x08013c9c
 8000c90:	0801449c 	.word	0x0801449c
 8000c94:	08014c9c 	.word	0x08014c9c
 8000c98:	0801549c 	.word	0x0801549c
 8000c9c:	08015c9c 	.word	0x08015c9c
 8000ca0:	0801649c 	.word	0x0801649c
 8000ca4:	08016c9c 	.word	0x08016c9c

08000ca8 <printBitmap>:


void printBitmap(const unsigned char* Bitmap)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
	   unsigned char i, j, k;
	   /*Because the Bitmap is a vector we need to use auxiliary variable to send all information in the correct order  */
	   int d = 0;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	60bb      	str	r3, [r7, #8]
	   k = 15;
 8000cb4:	230f      	movs	r3, #15
 8000cb6:	737b      	strb	r3, [r7, #13]

	    /*Cycles for to write all bitmap in all screen OLED */
	  	for(i = 0; i < PAGES; i++)
 8000cb8:	2300      	movs	r3, #0
 8000cba:	73fb      	strb	r3, [r7, #15]
 8000cbc:	e02a      	b.n	8000d14 <printBitmap+0x6c>
	  	{
	  		writeCommand(0xb0+i);
 8000cbe:	7bfb      	ldrb	r3, [r7, #15]
 8000cc0:	3b50      	subs	r3, #80	; 0x50
 8000cc2:	b2db      	uxtb	r3, r3
 8000cc4:	4618      	mov	r0, r3
 8000cc6:	f7ff fef3 	bl	8000ab0 <writeCommand>
	  		writeCommand(0x00);
 8000cca:	2000      	movs	r0, #0
 8000ccc:	f7ff fef0 	bl	8000ab0 <writeCommand>
	  		writeCommand(0x10);
 8000cd0:	2010      	movs	r0, #16
 8000cd2:	f7ff feed 	bl	8000ab0 <writeCommand>
	  		for( j = 0; j < HEIGHT ; j++)
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	73bb      	strb	r3, [r7, #14]
 8000cda:	e00f      	b.n	8000cfc <printBitmap+0x54>
	  		{
	  			writeData(Bitmap[k + d]);
 8000cdc:	7b7a      	ldrb	r2, [r7, #13]
 8000cde:	68bb      	ldr	r3, [r7, #8]
 8000ce0:	4413      	add	r3, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	687b      	ldr	r3, [r7, #4]
 8000ce6:	4413      	add	r3, r2
 8000ce8:	781b      	ldrb	r3, [r3, #0]
 8000cea:	4618      	mov	r0, r3
 8000cec:	f7ff fef8 	bl	8000ae0 <writeData>
	  			d = d +16;
 8000cf0:	68bb      	ldr	r3, [r7, #8]
 8000cf2:	3310      	adds	r3, #16
 8000cf4:	60bb      	str	r3, [r7, #8]
	  		for( j = 0; j < HEIGHT ; j++)
 8000cf6:	7bbb      	ldrb	r3, [r7, #14]
 8000cf8:	3301      	adds	r3, #1
 8000cfa:	73bb      	strb	r3, [r7, #14]
 8000cfc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	daeb      	bge.n	8000cdc <printBitmap+0x34>
	  		}
	  		d = 0;
 8000d04:	2300      	movs	r3, #0
 8000d06:	60bb      	str	r3, [r7, #8]
	  		k--;
 8000d08:	7b7b      	ldrb	r3, [r7, #13]
 8000d0a:	3b01      	subs	r3, #1
 8000d0c:	737b      	strb	r3, [r7, #13]
	  	for(i = 0; i < PAGES; i++)
 8000d0e:	7bfb      	ldrb	r3, [r7, #15]
 8000d10:	3301      	adds	r3, #1
 8000d12:	73fb      	strb	r3, [r7, #15]
 8000d14:	7bfb      	ldrb	r3, [r7, #15]
 8000d16:	2b0f      	cmp	r3, #15
 8000d18:	d9d1      	bls.n	8000cbe <printBitmap+0x16>
	  	}
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
	...

08000d24 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d24:	b480      	push	{r7}
 8000d26:	b083      	sub	sp, #12
 8000d28:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d2a:	4b0f      	ldr	r3, [pc, #60]	; (8000d68 <HAL_MspInit+0x44>)
 8000d2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2e:	4a0e      	ldr	r2, [pc, #56]	; (8000d68 <HAL_MspInit+0x44>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6613      	str	r3, [r2, #96]	; 0x60
 8000d36:	4b0c      	ldr	r3, [pc, #48]	; (8000d68 <HAL_MspInit+0x44>)
 8000d38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	607b      	str	r3, [r7, #4]
 8000d40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d42:	4b09      	ldr	r3, [pc, #36]	; (8000d68 <HAL_MspInit+0x44>)
 8000d44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d46:	4a08      	ldr	r2, [pc, #32]	; (8000d68 <HAL_MspInit+0x44>)
 8000d48:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d4c:	6593      	str	r3, [r2, #88]	; 0x58
 8000d4e:	4b06      	ldr	r3, [pc, #24]	; (8000d68 <HAL_MspInit+0x44>)
 8000d50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d52:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d56:	603b      	str	r3, [r7, #0]
 8000d58:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	370c      	adds	r7, #12
 8000d5e:	46bd      	mov	sp, r7
 8000d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d64:	4770      	bx	lr
 8000d66:	bf00      	nop
 8000d68:	40021000 	.word	0x40021000

08000d6c <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b08a      	sub	sp, #40	; 0x28
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d74:	f107 0314 	add.w	r3, r7, #20
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000d84:	687b      	ldr	r3, [r7, #4]
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	4a18      	ldr	r2, [pc, #96]	; (8000dec <HAL_I2C_MspInit+0x80>)
 8000d8a:	4293      	cmp	r3, r2
 8000d8c:	d12a      	bne.n	8000de4 <HAL_I2C_MspInit+0x78>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d8e:	4b18      	ldr	r3, [pc, #96]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d90:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d92:	4a17      	ldr	r2, [pc, #92]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d94:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000d98:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000d9a:	4b15      	ldr	r3, [pc, #84]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000da2:	613b      	str	r3, [r7, #16]
 8000da4:	693b      	ldr	r3, [r7, #16]
    HAL_PWREx_EnableVddIO2();
 8000da6:	f001 fb4d 	bl	8002444 <HAL_PWREx_EnableVddIO2>
    /**I2C1 GPIO Configuration    
    PG13     ------> I2C1_SDA
    PG14     ------> I2C1_SCL 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14;
 8000daa:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8000dae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000db0:	2312      	movs	r3, #18
 8000db2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000db4:	2301      	movs	r3, #1
 8000db6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000db8:	2303      	movs	r3, #3
 8000dba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000dbc:	2304      	movs	r3, #4
 8000dbe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000dc0:	f107 0314 	add.w	r3, r7, #20
 8000dc4:	4619      	mov	r1, r3
 8000dc6:	480b      	ldr	r0, [pc, #44]	; (8000df4 <HAL_I2C_MspInit+0x88>)
 8000dc8:	f000 face 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000dcc:	4b08      	ldr	r3, [pc, #32]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000dce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000dd0:	4a07      	ldr	r2, [pc, #28]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000dd2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000dd6:	6593      	str	r3, [r2, #88]	; 0x58
 8000dd8:	4b05      	ldr	r3, [pc, #20]	; (8000df0 <HAL_I2C_MspInit+0x84>)
 8000dda:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ddc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000de0:	60fb      	str	r3, [r7, #12]
 8000de2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000de4:	bf00      	nop
 8000de6:	3728      	adds	r7, #40	; 0x28
 8000de8:	46bd      	mov	sp, r7
 8000dea:	bd80      	pop	{r7, pc}
 8000dec:	40005400 	.word	0x40005400
 8000df0:	40021000 	.word	0x40021000
 8000df4:	48001800 	.word	0x48001800

08000df8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b08a      	sub	sp, #40	; 0x28
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e00:	f107 0314 	add.w	r3, r7, #20
 8000e04:	2200      	movs	r2, #0
 8000e06:	601a      	str	r2, [r3, #0]
 8000e08:	605a      	str	r2, [r3, #4]
 8000e0a:	609a      	str	r2, [r3, #8]
 8000e0c:	60da      	str	r2, [r3, #12]
 8000e0e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==LPUART1)
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	4a18      	ldr	r2, [pc, #96]	; (8000e78 <HAL_UART_MspInit+0x80>)
 8000e16:	4293      	cmp	r3, r2
 8000e18:	d12a      	bne.n	8000e70 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8000e1a:	4b18      	ldr	r3, [pc, #96]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e1e:	4a17      	ldr	r2, [pc, #92]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	65d3      	str	r3, [r2, #92]	; 0x5c
 8000e26:	4b15      	ldr	r3, [pc, #84]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	613b      	str	r3, [r7, #16]
 8000e30:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e32:	4b12      	ldr	r3, [pc, #72]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e34:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e36:	4a11      	ldr	r2, [pc, #68]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e3c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000e3e:	4b0f      	ldr	r3, [pc, #60]	; (8000e7c <HAL_UART_MspInit+0x84>)
 8000e40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000e42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
    HAL_PWREx_EnableVddIO2();
 8000e4a:	f001 fafb 	bl	8002444 <HAL_PWREx_EnableVddIO2>
    /**LPUART1 GPIO Configuration    
    PG7     ------> LPUART1_TX
    PG8     ------> LPUART1_RX 
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000e4e:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8000e52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e54:	2302      	movs	r3, #2
 8000e56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e5c:	2303      	movs	r3, #3
 8000e5e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_LPUART1;
 8000e60:	2308      	movs	r3, #8
 8000e62:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000e64:	f107 0314 	add.w	r3, r7, #20
 8000e68:	4619      	mov	r1, r3
 8000e6a:	4805      	ldr	r0, [pc, #20]	; (8000e80 <HAL_UART_MspInit+0x88>)
 8000e6c:	f000 fa7c 	bl	8001368 <HAL_GPIO_Init>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }

}
 8000e70:	bf00      	nop
 8000e72:	3728      	adds	r7, #40	; 0x28
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	40008000 	.word	0x40008000
 8000e7c:	40021000 	.word	0x40021000
 8000e80:	48001800 	.word	0x48001800

08000e84 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b08a      	sub	sp, #40	; 0x28
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	2200      	movs	r2, #0
 8000e92:	601a      	str	r2, [r3, #0]
 8000e94:	605a      	str	r2, [r3, #4]
 8000e96:	609a      	str	r2, [r3, #8]
 8000e98:	60da      	str	r2, [r3, #12]
 8000e9a:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ea4:	d154      	bne.n	8000f50 <HAL_PCD_MspInit+0xcc>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea6:	4b2c      	ldr	r3, [pc, #176]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000ea8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eaa:	4a2b      	ldr	r2, [pc, #172]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000eac:	f043 0301 	orr.w	r3, r3, #1
 8000eb0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000eb2:	4b29      	ldr	r3, [pc, #164]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000eb4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000eb6:	f003 0301 	and.w	r3, r3, #1
 8000eba:	613b      	str	r3, [r7, #16]
 8000ebc:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP 
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000ebe:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000ec2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ec4:	2302      	movs	r3, #2
 8000ec6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ec8:	2300      	movs	r3, #0
 8000eca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ecc:	2303      	movs	r3, #3
 8000ece:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000ed0:	230a      	movs	r3, #10
 8000ed2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ed4:	f107 0314 	add.w	r3, r7, #20
 8000ed8:	4619      	mov	r1, r3
 8000eda:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000ede:	f000 fa43 	bl	8001368 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000ee2:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000ee6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000ef0:	f107 0314 	add.w	r3, r7, #20
 8000ef4:	4619      	mov	r1, r3
 8000ef6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000efa:	f000 fa35 	bl	8001368 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f02:	4a15      	ldr	r2, [pc, #84]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f04:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000f08:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	60fb      	str	r3, [r7, #12]
 8000f14:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8000f16:	4b10      	ldr	r3, [pc, #64]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f1a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d114      	bne.n	8000f4c <HAL_PCD_MspInit+0xc8>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8000f22:	4b0d      	ldr	r3, [pc, #52]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f26:	4a0c      	ldr	r2, [pc, #48]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f28:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f2c:	6593      	str	r3, [r2, #88]	; 0x58
 8000f2e:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f30:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 8000f3a:	f001 fa73 	bl	8002424 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 8000f3e:	4b06      	ldr	r3, [pc, #24]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f40:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f42:	4a05      	ldr	r2, [pc, #20]	; (8000f58 <HAL_PCD_MspInit+0xd4>)
 8000f44:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8000f48:	6593      	str	r3, [r2, #88]	; 0x58
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000f4a:	e001      	b.n	8000f50 <HAL_PCD_MspInit+0xcc>
      HAL_PWREx_EnableVddUSB();
 8000f4c:	f001 fa6a 	bl	8002424 <HAL_PWREx_EnableVddUSB>
}
 8000f50:	bf00      	nop
 8000f52:	3728      	adds	r7, #40	; 0x28
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	40021000 	.word	0x40021000

08000f5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f5c:	b480      	push	{r7}
 8000f5e:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000f60:	bf00      	nop
 8000f62:	46bd      	mov	sp, r7
 8000f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f68:	4770      	bx	lr

08000f6a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f6a:	b480      	push	{r7}
 8000f6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f6e:	e7fe      	b.n	8000f6e <HardFault_Handler+0x4>

08000f70 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000f70:	b480      	push	{r7}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <MemManage_Handler+0x4>

08000f76 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000f76:	b480      	push	{r7}
 8000f78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000f7a:	e7fe      	b.n	8000f7a <BusFault_Handler+0x4>

08000f7c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000f7c:	b480      	push	{r7}
 8000f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <UsageFault_Handler+0x4>

08000f82 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f82:	b480      	push	{r7}
 8000f84:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000f86:	bf00      	nop
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f8e:	4770      	bx	lr

08000f90 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f94:	bf00      	nop
 8000f96:	46bd      	mov	sp, r7
 8000f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f9c:	4770      	bx	lr

08000f9e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f9e:	b480      	push	{r7}
 8000fa0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000fa2:	bf00      	nop
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000faa:	4770      	bx	lr

08000fac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fb0:	f000 f8b4 	bl	800111c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fb4:	bf00      	nop
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fbc:	4b17      	ldr	r3, [pc, #92]	; (800101c <SystemInit+0x64>)
 8000fbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fc2:	4a16      	ldr	r2, [pc, #88]	; (800101c <SystemInit+0x64>)
 8000fc4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fc8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8000fcc:	4b14      	ldr	r3, [pc, #80]	; (8001020 <SystemInit+0x68>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a13      	ldr	r2, [pc, #76]	; (8001020 <SystemInit+0x68>)
 8000fd2:	f043 0301 	orr.w	r3, r3, #1
 8000fd6:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8000fd8:	4b11      	ldr	r3, [pc, #68]	; (8001020 <SystemInit+0x68>)
 8000fda:	2200      	movs	r2, #0
 8000fdc:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8000fde:	4b10      	ldr	r3, [pc, #64]	; (8001020 <SystemInit+0x68>)
 8000fe0:	681b      	ldr	r3, [r3, #0]
 8000fe2:	4a0f      	ldr	r2, [pc, #60]	; (8001020 <SystemInit+0x68>)
 8000fe4:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8000fe8:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8000fec:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8000fee:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <SystemInit+0x68>)
 8000ff0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000ff4:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <SystemInit+0x68>)
 8000ff8:	681b      	ldr	r3, [r3, #0]
 8000ffa:	4a09      	ldr	r2, [pc, #36]	; (8001020 <SystemInit+0x68>)
 8000ffc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001000:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8001002:	4b07      	ldr	r3, [pc, #28]	; (8001020 <SystemInit+0x68>)
 8001004:	2200      	movs	r2, #0
 8001006:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8001008:	4b04      	ldr	r3, [pc, #16]	; (800101c <SystemInit+0x64>)
 800100a:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800100e:	609a      	str	r2, [r3, #8]
#endif
}
 8001010:	bf00      	nop
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
 800101a:	bf00      	nop
 800101c:	e000ed00 	.word	0xe000ed00
 8001020:	40021000 	.word	0x40021000

08001024 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8001024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800105c <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8001028:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 800102a:	e003      	b.n	8001034 <LoopCopyDataInit>

0800102c <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 800102c:	4b0c      	ldr	r3, [pc, #48]	; (8001060 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 800102e:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8001030:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8001032:	3104      	adds	r1, #4

08001034 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8001034:	480b      	ldr	r0, [pc, #44]	; (8001064 <LoopForever+0xa>)
	ldr	r3, =_edata
 8001036:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <LoopForever+0xe>)
	adds	r2, r0, r1
 8001038:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 800103a:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 800103c:	d3f6      	bcc.n	800102c <CopyDataInit>
	ldr	r2, =_sbss
 800103e:	4a0b      	ldr	r2, [pc, #44]	; (800106c <LoopForever+0x12>)
	b	LoopFillZerobss
 8001040:	e002      	b.n	8001048 <LoopFillZerobss>

08001042 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8001042:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8001044:	f842 3b04 	str.w	r3, [r2], #4

08001048 <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8001048:	4b09      	ldr	r3, [pc, #36]	; (8001070 <LoopForever+0x16>)
	cmp	r2, r3
 800104a:	429a      	cmp	r2, r3
	bcc	FillZerobss
 800104c:	d3f9      	bcc.n	8001042 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800104e:	f7ff ffb3 	bl	8000fb8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001052:	f004 fde3 	bl	8005c1c <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001056:	f7ff fa53 	bl	8000500 <main>

0800105a <LoopForever>:

LoopForever:
    b LoopForever
 800105a:	e7fe      	b.n	800105a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800105c:	20050000 	.word	0x20050000
	ldr	r3, =_sidata
 8001060:	080174f4 	.word	0x080174f4
	ldr	r0, =_sdata
 8001064:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8001068:	2000000c 	.word	0x2000000c
	ldr	r2, =_sbss
 800106c:	2000000c 	.word	0x2000000c
	ldr	r3, = _ebss
 8001070:	20000598 	.word	0x20000598

08001074 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001074:	e7fe      	b.n	8001074 <ADC1_2_IRQHandler>

08001076 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001076:	b580      	push	{r7, lr}
 8001078:	b082      	sub	sp, #8
 800107a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800107c:	2300      	movs	r3, #0
 800107e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001080:	2003      	movs	r0, #3
 8001082:	f000 f93d 	bl	8001300 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001086:	2000      	movs	r0, #0
 8001088:	f000 f80e 	bl	80010a8 <HAL_InitTick>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d002      	beq.n	8001098 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001092:	2301      	movs	r3, #1
 8001094:	71fb      	strb	r3, [r7, #7]
 8001096:	e001      	b.n	800109c <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001098:	f7ff fe44 	bl	8000d24 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800109c:	79fb      	ldrb	r3, [r7, #7]
}
 800109e:	4618      	mov	r0, r3
 80010a0:	3708      	adds	r7, #8
 80010a2:	46bd      	mov	sp, r7
 80010a4:	bd80      	pop	{r7, pc}
	...

080010a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b084      	sub	sp, #16
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80010b0:	2300      	movs	r3, #0
 80010b2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80010b4:	4b16      	ldr	r3, [pc, #88]	; (8001110 <HAL_InitTick+0x68>)
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	2b00      	cmp	r3, #0
 80010ba:	d022      	beq.n	8001102 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80010bc:	4b15      	ldr	r3, [pc, #84]	; (8001114 <HAL_InitTick+0x6c>)
 80010be:	681a      	ldr	r2, [r3, #0]
 80010c0:	4b13      	ldr	r3, [pc, #76]	; (8001110 <HAL_InitTick+0x68>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80010c8:	fbb1 f3f3 	udiv	r3, r1, r3
 80010cc:	fbb2 f3f3 	udiv	r3, r2, r3
 80010d0:	4618      	mov	r0, r3
 80010d2:	f000 f93c 	bl	800134e <HAL_SYSTICK_Config>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d10f      	bne.n	80010fc <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	2b0f      	cmp	r3, #15
 80010e0:	d809      	bhi.n	80010f6 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010e2:	2200      	movs	r2, #0
 80010e4:	6879      	ldr	r1, [r7, #4]
 80010e6:	f04f 30ff 	mov.w	r0, #4294967295
 80010ea:	f000 f914 	bl	8001316 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010ee:	4a0a      	ldr	r2, [pc, #40]	; (8001118 <HAL_InitTick+0x70>)
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	e007      	b.n	8001106 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 80010f6:	2301      	movs	r3, #1
 80010f8:	73fb      	strb	r3, [r7, #15]
 80010fa:	e004      	b.n	8001106 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010fc:	2301      	movs	r3, #1
 80010fe:	73fb      	strb	r3, [r7, #15]
 8001100:	e001      	b.n	8001106 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8001102:	2301      	movs	r3, #1
 8001104:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8001106:	7bfb      	ldrb	r3, [r7, #15]
}
 8001108:	4618      	mov	r0, r3
 800110a:	3710      	adds	r7, #16
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000008 	.word	0x20000008
 8001114:	20000000 	.word	0x20000000
 8001118:	20000004 	.word	0x20000004

0800111c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800111c:	b480      	push	{r7}
 800111e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001120:	4b05      	ldr	r3, [pc, #20]	; (8001138 <HAL_IncTick+0x1c>)
 8001122:	681a      	ldr	r2, [r3, #0]
 8001124:	4b05      	ldr	r3, [pc, #20]	; (800113c <HAL_IncTick+0x20>)
 8001126:	681b      	ldr	r3, [r3, #0]
 8001128:	4413      	add	r3, r2
 800112a:	4a03      	ldr	r2, [pc, #12]	; (8001138 <HAL_IncTick+0x1c>)
 800112c:	6013      	str	r3, [r2, #0]
}
 800112e:	bf00      	nop
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	20000594 	.word	0x20000594
 800113c:	20000008 	.word	0x20000008

08001140 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
  return uwTick;
 8001144:	4b03      	ldr	r3, [pc, #12]	; (8001154 <HAL_GetTick+0x14>)
 8001146:	681b      	ldr	r3, [r3, #0]
}
 8001148:	4618      	mov	r0, r3
 800114a:	46bd      	mov	sp, r7
 800114c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001150:	4770      	bx	lr
 8001152:	bf00      	nop
 8001154:	20000594 	.word	0x20000594

08001158 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001160:	f7ff ffee 	bl	8001140 <HAL_GetTick>
 8001164:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 800116a:	68fb      	ldr	r3, [r7, #12]
 800116c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001170:	d004      	beq.n	800117c <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 8001172:	4b09      	ldr	r3, [pc, #36]	; (8001198 <HAL_Delay+0x40>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	68fa      	ldr	r2, [r7, #12]
 8001178:	4413      	add	r3, r2
 800117a:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800117c:	bf00      	nop
 800117e:	f7ff ffdf 	bl	8001140 <HAL_GetTick>
 8001182:	4602      	mov	r2, r0
 8001184:	68bb      	ldr	r3, [r7, #8]
 8001186:	1ad3      	subs	r3, r2, r3
 8001188:	68fa      	ldr	r2, [r7, #12]
 800118a:	429a      	cmp	r2, r3
 800118c:	d8f7      	bhi.n	800117e <HAL_Delay+0x26>
  {
  }
}
 800118e:	bf00      	nop
 8001190:	3710      	adds	r7, #16
 8001192:	46bd      	mov	sp, r7
 8001194:	bd80      	pop	{r7, pc}
 8001196:	bf00      	nop
 8001198:	20000008 	.word	0x20000008

0800119c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800119c:	b480      	push	{r7}
 800119e:	b085      	sub	sp, #20
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	f003 0307 	and.w	r3, r3, #7
 80011aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80011ac:	4b0c      	ldr	r3, [pc, #48]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80011b2:	68ba      	ldr	r2, [r7, #8]
 80011b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80011b8:	4013      	ands	r3, r2
 80011ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80011bc:	68fb      	ldr	r3, [r7, #12]
 80011be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80011c0:	68bb      	ldr	r3, [r7, #8]
 80011c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80011c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80011c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80011cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80011ce:	4a04      	ldr	r2, [pc, #16]	; (80011e0 <__NVIC_SetPriorityGrouping+0x44>)
 80011d0:	68bb      	ldr	r3, [r7, #8]
 80011d2:	60d3      	str	r3, [r2, #12]
}
 80011d4:	bf00      	nop
 80011d6:	3714      	adds	r7, #20
 80011d8:	46bd      	mov	sp, r7
 80011da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011de:	4770      	bx	lr
 80011e0:	e000ed00 	.word	0xe000ed00

080011e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80011e8:	4b04      	ldr	r3, [pc, #16]	; (80011fc <__NVIC_GetPriorityGrouping+0x18>)
 80011ea:	68db      	ldr	r3, [r3, #12]
 80011ec:	0a1b      	lsrs	r3, r3, #8
 80011ee:	f003 0307 	and.w	r3, r3, #7
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	46bd      	mov	sp, r7
 80011f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fa:	4770      	bx	lr
 80011fc:	e000ed00 	.word	0xe000ed00

08001200 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001200:	b480      	push	{r7}
 8001202:	b083      	sub	sp, #12
 8001204:	af00      	add	r7, sp, #0
 8001206:	4603      	mov	r3, r0
 8001208:	6039      	str	r1, [r7, #0]
 800120a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800120c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001210:	2b00      	cmp	r3, #0
 8001212:	db0a      	blt.n	800122a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	b2da      	uxtb	r2, r3
 8001218:	490c      	ldr	r1, [pc, #48]	; (800124c <__NVIC_SetPriority+0x4c>)
 800121a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800121e:	0112      	lsls	r2, r2, #4
 8001220:	b2d2      	uxtb	r2, r2
 8001222:	440b      	add	r3, r1
 8001224:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001228:	e00a      	b.n	8001240 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800122a:	683b      	ldr	r3, [r7, #0]
 800122c:	b2da      	uxtb	r2, r3
 800122e:	4908      	ldr	r1, [pc, #32]	; (8001250 <__NVIC_SetPriority+0x50>)
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	f003 030f 	and.w	r3, r3, #15
 8001236:	3b04      	subs	r3, #4
 8001238:	0112      	lsls	r2, r2, #4
 800123a:	b2d2      	uxtb	r2, r2
 800123c:	440b      	add	r3, r1
 800123e:	761a      	strb	r2, [r3, #24]
}
 8001240:	bf00      	nop
 8001242:	370c      	adds	r7, #12
 8001244:	46bd      	mov	sp, r7
 8001246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800124a:	4770      	bx	lr
 800124c:	e000e100 	.word	0xe000e100
 8001250:	e000ed00 	.word	0xe000ed00

08001254 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001254:	b480      	push	{r7}
 8001256:	b089      	sub	sp, #36	; 0x24
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	60b9      	str	r1, [r7, #8]
 800125e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001268:	69fb      	ldr	r3, [r7, #28]
 800126a:	f1c3 0307 	rsb	r3, r3, #7
 800126e:	2b04      	cmp	r3, #4
 8001270:	bf28      	it	cs
 8001272:	2304      	movcs	r3, #4
 8001274:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001276:	69fb      	ldr	r3, [r7, #28]
 8001278:	3304      	adds	r3, #4
 800127a:	2b06      	cmp	r3, #6
 800127c:	d902      	bls.n	8001284 <NVIC_EncodePriority+0x30>
 800127e:	69fb      	ldr	r3, [r7, #28]
 8001280:	3b03      	subs	r3, #3
 8001282:	e000      	b.n	8001286 <NVIC_EncodePriority+0x32>
 8001284:	2300      	movs	r3, #0
 8001286:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001288:	f04f 32ff 	mov.w	r2, #4294967295
 800128c:	69bb      	ldr	r3, [r7, #24]
 800128e:	fa02 f303 	lsl.w	r3, r2, r3
 8001292:	43da      	mvns	r2, r3
 8001294:	68bb      	ldr	r3, [r7, #8]
 8001296:	401a      	ands	r2, r3
 8001298:	697b      	ldr	r3, [r7, #20]
 800129a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800129c:	f04f 31ff 	mov.w	r1, #4294967295
 80012a0:	697b      	ldr	r3, [r7, #20]
 80012a2:	fa01 f303 	lsl.w	r3, r1, r3
 80012a6:	43d9      	mvns	r1, r3
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80012ac:	4313      	orrs	r3, r2
         );
}
 80012ae:	4618      	mov	r0, r3
 80012b0:	3724      	adds	r7, #36	; 0x24
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b082      	sub	sp, #8
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3b01      	subs	r3, #1
 80012c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80012cc:	d301      	bcc.n	80012d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80012ce:	2301      	movs	r3, #1
 80012d0:	e00f      	b.n	80012f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80012d2:	4a0a      	ldr	r2, [pc, #40]	; (80012fc <SysTick_Config+0x40>)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	3b01      	subs	r3, #1
 80012d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80012da:	210f      	movs	r1, #15
 80012dc:	f04f 30ff 	mov.w	r0, #4294967295
 80012e0:	f7ff ff8e 	bl	8001200 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012e4:	4b05      	ldr	r3, [pc, #20]	; (80012fc <SysTick_Config+0x40>)
 80012e6:	2200      	movs	r2, #0
 80012e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ea:	4b04      	ldr	r3, [pc, #16]	; (80012fc <SysTick_Config+0x40>)
 80012ec:	2207      	movs	r2, #7
 80012ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bd80      	pop	{r7, pc}
 80012fa:	bf00      	nop
 80012fc:	e000e010 	.word	0xe000e010

08001300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001308:	6878      	ldr	r0, [r7, #4]
 800130a:	f7ff ff47 	bl	800119c <__NVIC_SetPriorityGrouping>
}
 800130e:	bf00      	nop
 8001310:	3708      	adds	r7, #8
 8001312:	46bd      	mov	sp, r7
 8001314:	bd80      	pop	{r7, pc}

08001316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001316:	b580      	push	{r7, lr}
 8001318:	b086      	sub	sp, #24
 800131a:	af00      	add	r7, sp, #0
 800131c:	4603      	mov	r3, r0
 800131e:	60b9      	str	r1, [r7, #8]
 8001320:	607a      	str	r2, [r7, #4]
 8001322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001324:	2300      	movs	r3, #0
 8001326:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001328:	f7ff ff5c 	bl	80011e4 <__NVIC_GetPriorityGrouping>
 800132c:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	68b9      	ldr	r1, [r7, #8]
 8001332:	6978      	ldr	r0, [r7, #20]
 8001334:	f7ff ff8e 	bl	8001254 <NVIC_EncodePriority>
 8001338:	4602      	mov	r2, r0
 800133a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800133e:	4611      	mov	r1, r2
 8001340:	4618      	mov	r0, r3
 8001342:	f7ff ff5d 	bl	8001200 <__NVIC_SetPriority>
}
 8001346:	bf00      	nop
 8001348:	3718      	adds	r7, #24
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
 8001354:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f7ff ffb0 	bl	80012bc <SysTick_Config>
 800135c:	4603      	mov	r3, r0
}
 800135e:	4618      	mov	r0, r3
 8001360:	3708      	adds	r7, #8
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
	...

08001368 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001368:	b480      	push	{r7}
 800136a:	b087      	sub	sp, #28
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001372:	2300      	movs	r3, #0
 8001374:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001376:	e166      	b.n	8001646 <HAL_GPIO_Init+0x2de>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001378:	683b      	ldr	r3, [r7, #0]
 800137a:	681a      	ldr	r2, [r3, #0]
 800137c:	2101      	movs	r1, #1
 800137e:	697b      	ldr	r3, [r7, #20]
 8001380:	fa01 f303 	lsl.w	r3, r1, r3
 8001384:	4013      	ands	r3, r2
 8001386:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001388:	68fb      	ldr	r3, [r7, #12]
 800138a:	2b00      	cmp	r3, #0
 800138c:	f000 8158 	beq.w	8001640 <HAL_GPIO_Init+0x2d8>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001390:	683b      	ldr	r3, [r7, #0]
 8001392:	685b      	ldr	r3, [r3, #4]
 8001394:	2b01      	cmp	r3, #1
 8001396:	d00b      	beq.n	80013b0 <HAL_GPIO_Init+0x48>
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	2b02      	cmp	r3, #2
 800139e:	d007      	beq.n	80013b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80013a4:	2b11      	cmp	r3, #17
 80013a6:	d003      	beq.n	80013b0 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80013a8:	683b      	ldr	r3, [r7, #0]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b12      	cmp	r3, #18
 80013ae:	d130      	bne.n	8001412 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80013b6:	697b      	ldr	r3, [r7, #20]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	2203      	movs	r2, #3
 80013bc:	fa02 f303 	lsl.w	r3, r2, r3
 80013c0:	43db      	mvns	r3, r3
 80013c2:	693a      	ldr	r2, [r7, #16]
 80013c4:	4013      	ands	r3, r2
 80013c6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80013c8:	683b      	ldr	r3, [r7, #0]
 80013ca:	68da      	ldr	r2, [r3, #12]
 80013cc:	697b      	ldr	r3, [r7, #20]
 80013ce:	005b      	lsls	r3, r3, #1
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	693a      	ldr	r2, [r7, #16]
 80013d6:	4313      	orrs	r3, r2
 80013d8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	693a      	ldr	r2, [r7, #16]
 80013de:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80013e6:	2201      	movs	r2, #1
 80013e8:	697b      	ldr	r3, [r7, #20]
 80013ea:	fa02 f303 	lsl.w	r3, r2, r3
 80013ee:	43db      	mvns	r3, r3
 80013f0:	693a      	ldr	r2, [r7, #16]
 80013f2:	4013      	ands	r3, r2
 80013f4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 80013f6:	683b      	ldr	r3, [r7, #0]
 80013f8:	685b      	ldr	r3, [r3, #4]
 80013fa:	091b      	lsrs	r3, r3, #4
 80013fc:	f003 0201 	and.w	r2, r3, #1
 8001400:	697b      	ldr	r3, [r7, #20]
 8001402:	fa02 f303 	lsl.w	r3, r2, r3
 8001406:	693a      	ldr	r2, [r7, #16]
 8001408:	4313      	orrs	r3, r2
 800140a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	693a      	ldr	r2, [r7, #16]
 8001410:	605a      	str	r2, [r3, #4]
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	68db      	ldr	r3, [r3, #12]
 8001416:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8001418:	697b      	ldr	r3, [r7, #20]
 800141a:	005b      	lsls	r3, r3, #1
 800141c:	2203      	movs	r2, #3
 800141e:	fa02 f303 	lsl.w	r3, r2, r3
 8001422:	43db      	mvns	r3, r3
 8001424:	693a      	ldr	r2, [r7, #16]
 8001426:	4013      	ands	r3, r2
 8001428:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	005b      	lsls	r3, r3, #1
 8001432:	fa02 f303 	lsl.w	r3, r2, r3
 8001436:	693a      	ldr	r2, [r7, #16]
 8001438:	4313      	orrs	r3, r2
 800143a:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	693a      	ldr	r2, [r7, #16]
 8001440:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001442:	683b      	ldr	r3, [r7, #0]
 8001444:	685b      	ldr	r3, [r3, #4]
 8001446:	2b02      	cmp	r3, #2
 8001448:	d003      	beq.n	8001452 <HAL_GPIO_Init+0xea>
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b12      	cmp	r3, #18
 8001450:	d123      	bne.n	800149a <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001452:	697b      	ldr	r3, [r7, #20]
 8001454:	08da      	lsrs	r2, r3, #3
 8001456:	687b      	ldr	r3, [r7, #4]
 8001458:	3208      	adds	r2, #8
 800145a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800145e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001460:	697b      	ldr	r3, [r7, #20]
 8001462:	f003 0307 	and.w	r3, r3, #7
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	220f      	movs	r2, #15
 800146a:	fa02 f303 	lsl.w	r3, r2, r3
 800146e:	43db      	mvns	r3, r3
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	4013      	ands	r3, r2
 8001474:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001476:	683b      	ldr	r3, [r7, #0]
 8001478:	691a      	ldr	r2, [r3, #16]
 800147a:	697b      	ldr	r3, [r7, #20]
 800147c:	f003 0307 	and.w	r3, r3, #7
 8001480:	009b      	lsls	r3, r3, #2
 8001482:	fa02 f303 	lsl.w	r3, r2, r3
 8001486:	693a      	ldr	r2, [r7, #16]
 8001488:	4313      	orrs	r3, r2
 800148a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	08da      	lsrs	r2, r3, #3
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	3208      	adds	r2, #8
 8001494:	6939      	ldr	r1, [r7, #16]
 8001496:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	005b      	lsls	r3, r3, #1
 80014a4:	2203      	movs	r2, #3
 80014a6:	fa02 f303 	lsl.w	r3, r2, r3
 80014aa:	43db      	mvns	r3, r3
 80014ac:	693a      	ldr	r2, [r7, #16]
 80014ae:	4013      	ands	r3, r2
 80014b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80014b2:	683b      	ldr	r3, [r7, #0]
 80014b4:	685b      	ldr	r3, [r3, #4]
 80014b6:	f003 0203 	and.w	r2, r3, #3
 80014ba:	697b      	ldr	r3, [r7, #20]
 80014bc:	005b      	lsls	r3, r3, #1
 80014be:	fa02 f303 	lsl.w	r3, r2, r3
 80014c2:	693a      	ldr	r2, [r7, #16]
 80014c4:	4313      	orrs	r3, r2
 80014c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	693a      	ldr	r2, [r7, #16]
 80014cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f000 80b2 	beq.w	8001640 <HAL_GPIO_Init+0x2d8>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014dc:	4b61      	ldr	r3, [pc, #388]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014de:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014e0:	4a60      	ldr	r2, [pc, #384]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014e2:	f043 0301 	orr.w	r3, r3, #1
 80014e6:	6613      	str	r3, [r2, #96]	; 0x60
 80014e8:	4b5e      	ldr	r3, [pc, #376]	; (8001664 <HAL_GPIO_Init+0x2fc>)
 80014ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	60bb      	str	r3, [r7, #8]
 80014f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80014f4:	4a5c      	ldr	r2, [pc, #368]	; (8001668 <HAL_GPIO_Init+0x300>)
 80014f6:	697b      	ldr	r3, [r7, #20]
 80014f8:	089b      	lsrs	r3, r3, #2
 80014fa:	3302      	adds	r3, #2
 80014fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001500:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001502:	697b      	ldr	r3, [r7, #20]
 8001504:	f003 0303 	and.w	r3, r3, #3
 8001508:	009b      	lsls	r3, r3, #2
 800150a:	220f      	movs	r2, #15
 800150c:	fa02 f303 	lsl.w	r3, r2, r3
 8001510:	43db      	mvns	r3, r3
 8001512:	693a      	ldr	r2, [r7, #16]
 8001514:	4013      	ands	r3, r2
 8001516:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800151e:	d02b      	beq.n	8001578 <HAL_GPIO_Init+0x210>
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	4a52      	ldr	r2, [pc, #328]	; (800166c <HAL_GPIO_Init+0x304>)
 8001524:	4293      	cmp	r3, r2
 8001526:	d025      	beq.n	8001574 <HAL_GPIO_Init+0x20c>
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	4a51      	ldr	r2, [pc, #324]	; (8001670 <HAL_GPIO_Init+0x308>)
 800152c:	4293      	cmp	r3, r2
 800152e:	d01f      	beq.n	8001570 <HAL_GPIO_Init+0x208>
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a50      	ldr	r2, [pc, #320]	; (8001674 <HAL_GPIO_Init+0x30c>)
 8001534:	4293      	cmp	r3, r2
 8001536:	d019      	beq.n	800156c <HAL_GPIO_Init+0x204>
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	4a4f      	ldr	r2, [pc, #316]	; (8001678 <HAL_GPIO_Init+0x310>)
 800153c:	4293      	cmp	r3, r2
 800153e:	d013      	beq.n	8001568 <HAL_GPIO_Init+0x200>
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	4a4e      	ldr	r2, [pc, #312]	; (800167c <HAL_GPIO_Init+0x314>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d00d      	beq.n	8001564 <HAL_GPIO_Init+0x1fc>
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	4a4d      	ldr	r2, [pc, #308]	; (8001680 <HAL_GPIO_Init+0x318>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d007      	beq.n	8001560 <HAL_GPIO_Init+0x1f8>
 8001550:	687b      	ldr	r3, [r7, #4]
 8001552:	4a4c      	ldr	r2, [pc, #304]	; (8001684 <HAL_GPIO_Init+0x31c>)
 8001554:	4293      	cmp	r3, r2
 8001556:	d101      	bne.n	800155c <HAL_GPIO_Init+0x1f4>
 8001558:	2307      	movs	r3, #7
 800155a:	e00e      	b.n	800157a <HAL_GPIO_Init+0x212>
 800155c:	2308      	movs	r3, #8
 800155e:	e00c      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001560:	2306      	movs	r3, #6
 8001562:	e00a      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001564:	2305      	movs	r3, #5
 8001566:	e008      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001568:	2304      	movs	r3, #4
 800156a:	e006      	b.n	800157a <HAL_GPIO_Init+0x212>
 800156c:	2303      	movs	r3, #3
 800156e:	e004      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001570:	2302      	movs	r3, #2
 8001572:	e002      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001574:	2301      	movs	r3, #1
 8001576:	e000      	b.n	800157a <HAL_GPIO_Init+0x212>
 8001578:	2300      	movs	r3, #0
 800157a:	697a      	ldr	r2, [r7, #20]
 800157c:	f002 0203 	and.w	r2, r2, #3
 8001580:	0092      	lsls	r2, r2, #2
 8001582:	4093      	lsls	r3, r2
 8001584:	693a      	ldr	r2, [r7, #16]
 8001586:	4313      	orrs	r3, r2
 8001588:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 800158a:	4937      	ldr	r1, [pc, #220]	; (8001668 <HAL_GPIO_Init+0x300>)
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	089b      	lsrs	r3, r3, #2
 8001590:	3302      	adds	r3, #2
 8001592:	693a      	ldr	r2, [r7, #16]
 8001594:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8001598:	4b3b      	ldr	r3, [pc, #236]	; (8001688 <HAL_GPIO_Init+0x320>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	43db      	mvns	r3, r3
 80015a2:	693a      	ldr	r2, [r7, #16]
 80015a4:	4013      	ands	r3, r2
 80015a6:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	685b      	ldr	r3, [r3, #4]
 80015ac:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d003      	beq.n	80015bc <HAL_GPIO_Init+0x254>
        {
          temp |= iocurrent;
 80015b4:	693a      	ldr	r2, [r7, #16]
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	4313      	orrs	r3, r2
 80015ba:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80015bc:	4a32      	ldr	r2, [pc, #200]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015be:	693b      	ldr	r3, [r7, #16]
 80015c0:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 80015c2:	4b31      	ldr	r3, [pc, #196]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015c4:	685b      	ldr	r3, [r3, #4]
 80015c6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	43db      	mvns	r3, r3
 80015cc:	693a      	ldr	r2, [r7, #16]
 80015ce:	4013      	ands	r3, r2
 80015d0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80015da:	2b00      	cmp	r3, #0
 80015dc:	d003      	beq.n	80015e6 <HAL_GPIO_Init+0x27e>
        {
          temp |= iocurrent;
 80015de:	693a      	ldr	r2, [r7, #16]
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	4313      	orrs	r3, r2
 80015e4:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80015e6:	4a28      	ldr	r2, [pc, #160]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015e8:	693b      	ldr	r3, [r7, #16]
 80015ea:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80015ec:	4b26      	ldr	r3, [pc, #152]	; (8001688 <HAL_GPIO_Init+0x320>)
 80015ee:	689b      	ldr	r3, [r3, #8]
 80015f0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	43db      	mvns	r3, r3
 80015f6:	693a      	ldr	r2, [r7, #16]
 80015f8:	4013      	ands	r3, r2
 80015fa:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80015fc:	683b      	ldr	r3, [r7, #0]
 80015fe:	685b      	ldr	r3, [r3, #4]
 8001600:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001604:	2b00      	cmp	r3, #0
 8001606:	d003      	beq.n	8001610 <HAL_GPIO_Init+0x2a8>
        {
          temp |= iocurrent;
 8001608:	693a      	ldr	r2, [r7, #16]
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	4313      	orrs	r3, r2
 800160e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001610:	4a1d      	ldr	r2, [pc, #116]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001616:	4b1c      	ldr	r3, [pc, #112]	; (8001688 <HAL_GPIO_Init+0x320>)
 8001618:	68db      	ldr	r3, [r3, #12]
 800161a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	43db      	mvns	r3, r3
 8001620:	693a      	ldr	r2, [r7, #16]
 8001622:	4013      	ands	r3, r2
 8001624:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800162e:	2b00      	cmp	r3, #0
 8001630:	d003      	beq.n	800163a <HAL_GPIO_Init+0x2d2>
        {
          temp |= iocurrent;
 8001632:	693a      	ldr	r2, [r7, #16]
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	4313      	orrs	r3, r2
 8001638:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 800163a:	4a13      	ldr	r2, [pc, #76]	; (8001688 <HAL_GPIO_Init+0x320>)
 800163c:	693b      	ldr	r3, [r7, #16]
 800163e:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	3301      	adds	r3, #1
 8001644:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001646:	683b      	ldr	r3, [r7, #0]
 8001648:	681a      	ldr	r2, [r3, #0]
 800164a:	697b      	ldr	r3, [r7, #20]
 800164c:	fa22 f303 	lsr.w	r3, r2, r3
 8001650:	2b00      	cmp	r3, #0
 8001652:	f47f ae91 	bne.w	8001378 <HAL_GPIO_Init+0x10>
  }
}
 8001656:	bf00      	nop
 8001658:	371c      	adds	r7, #28
 800165a:	46bd      	mov	sp, r7
 800165c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001660:	4770      	bx	lr
 8001662:	bf00      	nop
 8001664:	40021000 	.word	0x40021000
 8001668:	40010000 	.word	0x40010000
 800166c:	48000400 	.word	0x48000400
 8001670:	48000800 	.word	0x48000800
 8001674:	48000c00 	.word	0x48000c00
 8001678:	48001000 	.word	0x48001000
 800167c:	48001400 	.word	0x48001400
 8001680:	48001800 	.word	0x48001800
 8001684:	48001c00 	.word	0x48001c00
 8001688:	40010400 	.word	0x40010400

0800168c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800168c:	b480      	push	{r7}
 800168e:	b083      	sub	sp, #12
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	460b      	mov	r3, r1
 8001696:	807b      	strh	r3, [r7, #2]
 8001698:	4613      	mov	r3, r2
 800169a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800169c:	787b      	ldrb	r3, [r7, #1]
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d003      	beq.n	80016aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80016a2:	887a      	ldrh	r2, [r7, #2]
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80016a8:	e002      	b.n	80016b0 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80016aa:	887a      	ldrh	r2, [r7, #2]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	629a      	str	r2, [r3, #40]	; 0x28
}
 80016b0:	bf00      	nop
 80016b2:	370c      	adds	r7, #12
 80016b4:	46bd      	mov	sp, r7
 80016b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016ba:	4770      	bx	lr

080016bc <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d101      	bne.n	80016ce <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e081      	b.n	80017d2 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80016d4:	b2db      	uxtb	r3, r3
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d106      	bne.n	80016e8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	2200      	movs	r2, #0
 80016de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fb42 	bl	8000d6c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80016e8:	687b      	ldr	r3, [r7, #4]
 80016ea:	2224      	movs	r2, #36	; 0x24
 80016ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	681a      	ldr	r2, [r3, #0]
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f022 0201 	bic.w	r2, r2, #1
 80016fe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	685a      	ldr	r2, [r3, #4]
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800170c:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	689a      	ldr	r2, [r3, #8]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800171c:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	68db      	ldr	r3, [r3, #12]
 8001722:	2b01      	cmp	r3, #1
 8001724:	d107      	bne.n	8001736 <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	689a      	ldr	r2, [r3, #8]
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001732:	609a      	str	r2, [r3, #8]
 8001734:	e006      	b.n	8001744 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	689a      	ldr	r2, [r3, #8]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8001742:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b02      	cmp	r3, #2
 800174a:	d104      	bne.n	8001756 <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8001754:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	685b      	ldr	r3, [r3, #4]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	6812      	ldr	r2, [r2, #0]
 8001760:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001764:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001768:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	68da      	ldr	r2, [r3, #12]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001778:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | (hi2c->Init.OwnAddress2Masks << 8));
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	691a      	ldr	r2, [r3, #16]
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	695b      	ldr	r3, [r3, #20]
 8001782:	ea42 0103 	orr.w	r1, r2, r3
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	699b      	ldr	r3, [r3, #24]
 800178a:	021a      	lsls	r2, r3, #8
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	430a      	orrs	r2, r1
 8001792:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	69d9      	ldr	r1, [r3, #28]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6a1a      	ldr	r2, [r3, #32]
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	430a      	orrs	r2, r1
 80017a2:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	681a      	ldr	r2, [r3, #0]
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f042 0201 	orr.w	r2, r2, #1
 80017b2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	2200      	movs	r2, #0
 80017b8:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	2220      	movs	r2, #32
 80017be:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	2200      	movs	r2, #0
 80017c6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	2200      	movs	r2, #0
 80017cc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80017d0:	2300      	movs	r3, #0
}
 80017d2:	4618      	mov	r0, r3
 80017d4:	3708      	adds	r7, #8
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
	...

080017dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80017dc:	b580      	push	{r7, lr}
 80017de:	b088      	sub	sp, #32
 80017e0:	af02      	add	r7, sp, #8
 80017e2:	60f8      	str	r0, [r7, #12]
 80017e4:	607a      	str	r2, [r7, #4]
 80017e6:	461a      	mov	r2, r3
 80017e8:	460b      	mov	r3, r1
 80017ea:	817b      	strh	r3, [r7, #10]
 80017ec:	4613      	mov	r3, r2
 80017ee:	813b      	strh	r3, [r7, #8]
  uint32_t tickstart;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80017f6:	b2db      	uxtb	r3, r3
 80017f8:	2b20      	cmp	r3, #32
 80017fa:	f040 80da 	bne.w	80019b2 <HAL_I2C_Master_Transmit+0x1d6>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001804:	2b01      	cmp	r3, #1
 8001806:	d101      	bne.n	800180c <HAL_I2C_Master_Transmit+0x30>
 8001808:	2302      	movs	r3, #2
 800180a:	e0d3      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
 800180c:	68fb      	ldr	r3, [r7, #12]
 800180e:	2201      	movs	r2, #1
 8001810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8001814:	f7ff fc94 	bl	8001140 <HAL_GetTick>
 8001818:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800181a:	697b      	ldr	r3, [r7, #20]
 800181c:	9300      	str	r3, [sp, #0]
 800181e:	2319      	movs	r3, #25
 8001820:	2201      	movs	r2, #1
 8001822:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001826:	68f8      	ldr	r0, [r7, #12]
 8001828:	f000 f9f7 	bl	8001c1a <I2C_WaitOnFlagUntilTimeout>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <HAL_I2C_Master_Transmit+0x5a>
    {
      return HAL_ERROR;
 8001832:	2301      	movs	r3, #1
 8001834:	e0be      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	2221      	movs	r2, #33	; 0x21
 800183a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	2210      	movs	r2, #16
 8001842:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	2200      	movs	r2, #0
 800184a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	687a      	ldr	r2, [r7, #4]
 8001850:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	893a      	ldrh	r2, [r7, #8]
 8001856:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	2200      	movs	r2, #0
 800185c:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001862:	b29b      	uxth	r3, r3
 8001864:	2bff      	cmp	r3, #255	; 0xff
 8001866:	d90e      	bls.n	8001886 <HAL_I2C_Master_Transmit+0xaa>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	22ff      	movs	r2, #255	; 0xff
 800186c:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001872:	b2da      	uxtb	r2, r3
 8001874:	8979      	ldrh	r1, [r7, #10]
 8001876:	4b51      	ldr	r3, [pc, #324]	; (80019bc <HAL_I2C_Master_Transmit+0x1e0>)
 8001878:	9300      	str	r3, [sp, #0]
 800187a:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800187e:	68f8      	ldr	r0, [r7, #12]
 8001880:	f000 faee 	bl	8001e60 <I2C_TransferConfig>
 8001884:	e06c      	b.n	8001960 <HAL_I2C_Master_Transmit+0x184>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800188a:	b29a      	uxth	r2, r3
 800188c:	68fb      	ldr	r3, [r7, #12]
 800188e:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_GENERATE_START_WRITE);
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001894:	b2da      	uxtb	r2, r3
 8001896:	8979      	ldrh	r1, [r7, #10]
 8001898:	4b48      	ldr	r3, [pc, #288]	; (80019bc <HAL_I2C_Master_Transmit+0x1e0>)
 800189a:	9300      	str	r3, [sp, #0]
 800189c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80018a0:	68f8      	ldr	r0, [r7, #12]
 80018a2:	f000 fadd 	bl	8001e60 <I2C_TransferConfig>
    }

    while (hi2c->XferCount > 0U)
 80018a6:	e05b      	b.n	8001960 <HAL_I2C_Master_Transmit+0x184>
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80018a8:	697a      	ldr	r2, [r7, #20]
 80018aa:	6a39      	ldr	r1, [r7, #32]
 80018ac:	68f8      	ldr	r0, [r7, #12]
 80018ae:	f000 f9f4 	bl	8001c9a <I2C_WaitOnTXISFlagUntilTimeout>
 80018b2:	4603      	mov	r3, r0
 80018b4:	2b00      	cmp	r3, #0
 80018b6:	d001      	beq.n	80018bc <HAL_I2C_Master_Transmit+0xe0>
      {
        return HAL_ERROR;
 80018b8:	2301      	movs	r3, #1
 80018ba:	e07b      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
      }
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018c0:	781a      	ldrb	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80018c8:	68fb      	ldr	r3, [r7, #12]
 80018ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018cc:	1c5a      	adds	r2, r3, #1
 80018ce:	68fb      	ldr	r3, [r7, #12]
 80018d0:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018d6:	b29b      	uxth	r3, r3
 80018d8:	3b01      	subs	r3, #1
 80018da:	b29a      	uxth	r2, r3
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80018e0:	68fb      	ldr	r3, [r7, #12]
 80018e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018e4:	3b01      	subs	r3, #1
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80018f0:	b29b      	uxth	r3, r3
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d034      	beq.n	8001960 <HAL_I2C_Master_Transmit+0x184>
 80018f6:	68fb      	ldr	r3, [r7, #12]
 80018f8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018fa:	2b00      	cmp	r3, #0
 80018fc:	d130      	bne.n	8001960 <HAL_I2C_Master_Transmit+0x184>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80018fe:	697b      	ldr	r3, [r7, #20]
 8001900:	9300      	str	r3, [sp, #0]
 8001902:	6a3b      	ldr	r3, [r7, #32]
 8001904:	2200      	movs	r2, #0
 8001906:	2180      	movs	r1, #128	; 0x80
 8001908:	68f8      	ldr	r0, [r7, #12]
 800190a:	f000 f986 	bl	8001c1a <I2C_WaitOnFlagUntilTimeout>
 800190e:	4603      	mov	r3, r0
 8001910:	2b00      	cmp	r3, #0
 8001912:	d001      	beq.n	8001918 <HAL_I2C_Master_Transmit+0x13c>
        {
          return HAL_ERROR;
 8001914:	2301      	movs	r3, #1
 8001916:	e04d      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800191c:	b29b      	uxth	r3, r3
 800191e:	2bff      	cmp	r3, #255	; 0xff
 8001920:	d90e      	bls.n	8001940 <HAL_I2C_Master_Transmit+0x164>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	22ff      	movs	r2, #255	; 0xff
 8001926:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800192c:	b2da      	uxtb	r2, r3
 800192e:	8979      	ldrh	r1, [r7, #10]
 8001930:	2300      	movs	r3, #0
 8001932:	9300      	str	r3, [sp, #0]
 8001934:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f000 fa91 	bl	8001e60 <I2C_TransferConfig>
 800193e:	e00f      	b.n	8001960 <HAL_I2C_Master_Transmit+0x184>
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001944:	b29a      	uxth	r2, r3
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800194e:	b2da      	uxtb	r2, r3
 8001950:	8979      	ldrh	r1, [r7, #10]
 8001952:	2300      	movs	r3, #0
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800195a:	68f8      	ldr	r0, [r7, #12]
 800195c:	f000 fa80 	bl	8001e60 <I2C_TransferConfig>
    while (hi2c->XferCount > 0U)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001964:	b29b      	uxth	r3, r3
 8001966:	2b00      	cmp	r3, #0
 8001968:	d19e      	bne.n	80018a8 <HAL_I2C_Master_Transmit+0xcc>
      }
    }

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is set */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800196a:	697a      	ldr	r2, [r7, #20]
 800196c:	6a39      	ldr	r1, [r7, #32]
 800196e:	68f8      	ldr	r0, [r7, #12]
 8001970:	f000 f9d3 	bl	8001d1a <I2C_WaitOnSTOPFlagUntilTimeout>
 8001974:	4603      	mov	r3, r0
 8001976:	2b00      	cmp	r3, #0
 8001978:	d001      	beq.n	800197e <HAL_I2C_Master_Transmit+0x1a2>
    {
      return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e01a      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	2220      	movs	r2, #32
 8001984:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	6859      	ldr	r1, [r3, #4]
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b0b      	ldr	r3, [pc, #44]	; (80019c0 <HAL_I2C_Master_Transmit+0x1e4>)
 8001992:	400b      	ands	r3, r1
 8001994:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	2220      	movs	r2, #32
 800199a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800199e:	68fb      	ldr	r3, [r7, #12]
 80019a0:	2200      	movs	r2, #0
 80019a2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	2200      	movs	r2, #0
 80019aa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80019ae:	2300      	movs	r3, #0
 80019b0:	e000      	b.n	80019b4 <HAL_I2C_Master_Transmit+0x1d8>
  }
  else
  {
    return HAL_BUSY;
 80019b2:	2302      	movs	r3, #2
  }
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	3718      	adds	r7, #24
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	80002000 	.word	0x80002000
 80019c0:	fe00e800 	.word	0xfe00e800

080019c4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b08a      	sub	sp, #40	; 0x28
 80019c8:	af02      	add	r7, sp, #8
 80019ca:	60f8      	str	r0, [r7, #12]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	460b      	mov	r3, r1
 80019d2:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart;

  __IO uint32_t I2C_Trials = 0UL;
 80019d4:	2300      	movs	r3, #0
 80019d6:	617b      	str	r3, [r7, #20]

  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80019de:	b2db      	uxtb	r3, r3
 80019e0:	2b20      	cmp	r3, #32
 80019e2:	f040 80f1 	bne.w	8001bc8 <HAL_I2C_IsDeviceReady+0x204>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80019e6:	68fb      	ldr	r3, [r7, #12]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80019f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80019f4:	d101      	bne.n	80019fa <HAL_I2C_IsDeviceReady+0x36>
    {
      return HAL_BUSY;
 80019f6:	2302      	movs	r3, #2
 80019f8:	e0e7      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80019fa:	68fb      	ldr	r3, [r7, #12]
 80019fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001a00:	2b01      	cmp	r3, #1
 8001a02:	d101      	bne.n	8001a08 <HAL_I2C_IsDeviceReady+0x44>
 8001a04:	2302      	movs	r3, #2
 8001a06:	e0e0      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
 8001a08:	68fb      	ldr	r3, [r7, #12]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	2224      	movs	r2, #36	; 0x24
 8001a14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001a18:	68fb      	ldr	r3, [r7, #12]
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	645a      	str	r2, [r3, #68]	; 0x44

    do
    {
      /* Generate Start */
      hi2c->Instance->CR2 = I2C_GENERATE_START(hi2c->Init.AddressingMode, DevAddress);
 8001a1e:	68fb      	ldr	r3, [r7, #12]
 8001a20:	68db      	ldr	r3, [r3, #12]
 8001a22:	2b01      	cmp	r3, #1
 8001a24:	d107      	bne.n	8001a36 <HAL_I2C_IsDeviceReady+0x72>
 8001a26:	897b      	ldrh	r3, [r7, #10]
 8001a28:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a2c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001a30:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a34:	e004      	b.n	8001a40 <HAL_I2C_IsDeviceReady+0x7c>
 8001a36:	897b      	ldrh	r3, [r7, #10]
 8001a38:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a3c:	f443 5320 	orr.w	r3, r3, #10240	; 0x2800
 8001a40:	68fa      	ldr	r2, [r7, #12]
 8001a42:	6812      	ldr	r2, [r2, #0]
 8001a44:	6053      	str	r3, [r2, #4]

      /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
      /* Wait until STOPF flag is set or a NACK flag is set*/
      tickstart = HAL_GetTick();
 8001a46:	f7ff fb7b 	bl	8001140 <HAL_GetTick>
 8001a4a:	61b8      	str	r0, [r7, #24]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001a4c:	68fb      	ldr	r3, [r7, #12]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	699b      	ldr	r3, [r3, #24]
 8001a52:	f003 0320 	and.w	r3, r3, #32
 8001a56:	2b20      	cmp	r3, #32
 8001a58:	bf0c      	ite	eq
 8001a5a:	2301      	moveq	r3, #1
 8001a5c:	2300      	movne	r3, #0
 8001a5e:	b2db      	uxtb	r3, r3
 8001a60:	77fb      	strb	r3, [r7, #31]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001a62:	68fb      	ldr	r3, [r7, #12]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	f003 0310 	and.w	r3, r3, #16
 8001a6c:	2b10      	cmp	r3, #16
 8001a6e:	bf0c      	ite	eq
 8001a70:	2301      	moveq	r3, #1
 8001a72:	2300      	movne	r3, #0
 8001a74:	b2db      	uxtb	r3, r3
 8001a76:	77bb      	strb	r3, [r7, #30]

      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001a78:	e034      	b.n	8001ae4 <HAL_I2C_IsDeviceReady+0x120>
      {
        if (Timeout != HAL_MAX_DELAY)
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a80:	d01a      	beq.n	8001ab8 <HAL_I2C_IsDeviceReady+0xf4>
        {
          if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8001a82:	f7ff fb5d 	bl	8001140 <HAL_GetTick>
 8001a86:	4602      	mov	r2, r0
 8001a88:	69bb      	ldr	r3, [r7, #24]
 8001a8a:	1ad3      	subs	r3, r2, r3
 8001a8c:	683a      	ldr	r2, [r7, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d302      	bcc.n	8001a98 <HAL_I2C_IsDeviceReady+0xd4>
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	2b00      	cmp	r3, #0
 8001a96:	d10f      	bne.n	8001ab8 <HAL_I2C_IsDeviceReady+0xf4>
          {
            /* Update I2C state */
            hi2c->State = HAL_I2C_STATE_READY;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	2220      	movs	r2, #32
 8001a9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

            /* Update I2C error code */
            hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aa4:	f043 0220 	orr.w	r2, r3, #32
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	645a      	str	r2, [r3, #68]	; 0x44

            /* Process Unlocked */
            __HAL_UNLOCK(hi2c);
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	2200      	movs	r2, #0
 8001ab0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

            return HAL_ERROR;
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	e088      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
          }
        }

        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF);
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	699b      	ldr	r3, [r3, #24]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b20      	cmp	r3, #32
 8001ac4:	bf0c      	ite	eq
 8001ac6:	2301      	moveq	r3, #1
 8001ac8:	2300      	movne	r3, #0
 8001aca:	b2db      	uxtb	r3, r3
 8001acc:	77fb      	strb	r3, [r7, #31]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	699b      	ldr	r3, [r3, #24]
 8001ad4:	f003 0310 	and.w	r3, r3, #16
 8001ad8:	2b10      	cmp	r3, #16
 8001ada:	bf0c      	ite	eq
 8001adc:	2301      	moveq	r3, #1
 8001ade:	2300      	movne	r3, #0
 8001ae0:	b2db      	uxtb	r3, r3
 8001ae2:	77bb      	strb	r3, [r7, #30]
      while ((tmp1 == RESET) && (tmp2 == RESET))
 8001ae4:	7ffb      	ldrb	r3, [r7, #31]
 8001ae6:	2b00      	cmp	r3, #0
 8001ae8:	d102      	bne.n	8001af0 <HAL_I2C_IsDeviceReady+0x12c>
 8001aea:	7fbb      	ldrb	r3, [r7, #30]
 8001aec:	2b00      	cmp	r3, #0
 8001aee:	d0c4      	beq.n	8001a7a <HAL_I2C_IsDeviceReady+0xb6>
      }

      /* Check if the NACKF flag has not been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == RESET)
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	699b      	ldr	r3, [r3, #24]
 8001af6:	f003 0310 	and.w	r3, r3, #16
 8001afa:	2b10      	cmp	r3, #16
 8001afc:	d01a      	beq.n	8001b34 <HAL_I2C_IsDeviceReady+0x170>
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001afe:	69bb      	ldr	r3, [r7, #24]
 8001b00:	9300      	str	r3, [sp, #0]
 8001b02:	683b      	ldr	r3, [r7, #0]
 8001b04:	2200      	movs	r2, #0
 8001b06:	2120      	movs	r1, #32
 8001b08:	68f8      	ldr	r0, [r7, #12]
 8001b0a:	f000 f886 	bl	8001c1a <I2C_WaitOnFlagUntilTimeout>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <HAL_I2C_IsDeviceReady+0x154>
        {
          return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e058      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	2220      	movs	r2, #32
 8001b1e:	61da      	str	r2, [r3, #28]

        /* Device is ready */
        hi2c->State = HAL_I2C_STATE_READY;
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	2220      	movs	r2, #32
 8001b24:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_OK;
 8001b30:	2300      	movs	r3, #0
 8001b32:	e04a      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
      }
      else
      {
        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b34:	69bb      	ldr	r3, [r7, #24]
 8001b36:	9300      	str	r3, [sp, #0]
 8001b38:	683b      	ldr	r3, [r7, #0]
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	2120      	movs	r1, #32
 8001b3e:	68f8      	ldr	r0, [r7, #12]
 8001b40:	f000 f86b 	bl	8001c1a <I2C_WaitOnFlagUntilTimeout>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_IsDeviceReady+0x18a>
        {
          return HAL_ERROR;
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e03d      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	2210      	movs	r2, #16
 8001b54:	61da      	str	r2, [r3, #28]

        /* Clear STOP Flag, auto generated with autoend*/
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	2220      	movs	r2, #32
 8001b5c:	61da      	str	r2, [r3, #28]
      }

      /* Check if the maximum allowed number of trials has been reached */
      if (I2C_Trials == Trials)
 8001b5e:	697b      	ldr	r3, [r7, #20]
 8001b60:	687a      	ldr	r2, [r7, #4]
 8001b62:	429a      	cmp	r2, r3
 8001b64:	d118      	bne.n	8001b98 <HAL_I2C_IsDeviceReady+0x1d4>
      {
        /* Generate Stop */
        hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8001b74:	605a      	str	r2, [r3, #4]

        /* Wait until STOPF flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_STOPF, RESET, Timeout, tickstart) != HAL_OK)
 8001b76:	69bb      	ldr	r3, [r7, #24]
 8001b78:	9300      	str	r3, [sp, #0]
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2120      	movs	r1, #32
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f000 f84a 	bl	8001c1a <I2C_WaitOnFlagUntilTimeout>
 8001b86:	4603      	mov	r3, r0
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d001      	beq.n	8001b90 <HAL_I2C_IsDeviceReady+0x1cc>
        {
          return HAL_ERROR;
 8001b8c:	2301      	movs	r3, #1
 8001b8e:	e01c      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2220      	movs	r2, #32
 8001b96:	61da      	str	r2, [r3, #28]
      }

      /* Increment Trials */
      I2C_Trials++;
 8001b98:	697b      	ldr	r3, [r7, #20]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	617b      	str	r3, [r7, #20]
    }
    while (I2C_Trials < Trials);
 8001b9e:	697b      	ldr	r3, [r7, #20]
 8001ba0:	687a      	ldr	r2, [r7, #4]
 8001ba2:	429a      	cmp	r2, r3
 8001ba4:	f63f af3b 	bhi.w	8001a1e <HAL_I2C_IsDeviceReady+0x5a>

    /* Update I2C state */
    hi2c->State = HAL_I2C_STATE_READY;
 8001ba8:	68fb      	ldr	r3, [r7, #12]
 8001baa:	2220      	movs	r2, #32
 8001bac:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Update I2C error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb4:	f043 0220 	orr.w	r2, r3, #32
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001bbc:	68fb      	ldr	r3, [r7, #12]
 8001bbe:	2200      	movs	r2, #0
 8001bc0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001bc4:	2301      	movs	r3, #1
 8001bc6:	e000      	b.n	8001bca <HAL_I2C_IsDeviceReady+0x206>
  }
  else
  {
    return HAL_BUSY;
 8001bc8:	2302      	movs	r3, #2
  }
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3720      	adds	r7, #32
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}

08001bd2 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b083      	sub	sp, #12
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	f003 0302 	and.w	r3, r3, #2
 8001be4:	2b02      	cmp	r3, #2
 8001be6:	d103      	bne.n	8001bf0 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	681b      	ldr	r3, [r3, #0]
 8001bec:	2200      	movs	r2, #0
 8001bee:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	699b      	ldr	r3, [r3, #24]
 8001bf6:	f003 0301 	and.w	r3, r3, #1
 8001bfa:	2b01      	cmp	r3, #1
 8001bfc:	d007      	beq.n	8001c0e <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	699a      	ldr	r2, [r3, #24]
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	681b      	ldr	r3, [r3, #0]
 8001c08:	f042 0201 	orr.w	r2, r2, #1
 8001c0c:	619a      	str	r2, [r3, #24]
  }
}
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c18:	4770      	bx	lr

08001c1a <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001c1a:	b580      	push	{r7, lr}
 8001c1c:	b084      	sub	sp, #16
 8001c1e:	af00      	add	r7, sp, #0
 8001c20:	60f8      	str	r0, [r7, #12]
 8001c22:	60b9      	str	r1, [r7, #8]
 8001c24:	603b      	str	r3, [r7, #0]
 8001c26:	4613      	mov	r3, r2
 8001c28:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c2a:	e022      	b.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x58>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c32:	d01e      	beq.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x58>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c34:	f7ff fa84 	bl	8001140 <HAL_GetTick>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	69bb      	ldr	r3, [r7, #24]
 8001c3c:	1ad3      	subs	r3, r2, r3
 8001c3e:	683a      	ldr	r2, [r7, #0]
 8001c40:	429a      	cmp	r2, r3
 8001c42:	d302      	bcc.n	8001c4a <I2C_WaitOnFlagUntilTimeout+0x30>
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d113      	bne.n	8001c72 <I2C_WaitOnFlagUntilTimeout+0x58>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c4e:	f043 0220 	orr.w	r2, r3, #32
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001c56:	68fb      	ldr	r3, [r7, #12]
 8001c58:	2220      	movs	r2, #32
 8001c5a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	2200      	movs	r2, #0
 8001c62:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c66:	68fb      	ldr	r3, [r7, #12]
 8001c68:	2200      	movs	r2, #0
 8001c6a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8001c6e:	2301      	movs	r3, #1
 8001c70:	e00f      	b.n	8001c92 <I2C_WaitOnFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	699a      	ldr	r2, [r3, #24]
 8001c78:	68bb      	ldr	r3, [r7, #8]
 8001c7a:	4013      	ands	r3, r2
 8001c7c:	68ba      	ldr	r2, [r7, #8]
 8001c7e:	429a      	cmp	r2, r3
 8001c80:	bf0c      	ite	eq
 8001c82:	2301      	moveq	r3, #1
 8001c84:	2300      	movne	r3, #0
 8001c86:	b2db      	uxtb	r3, r3
 8001c88:	461a      	mov	r2, r3
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	429a      	cmp	r2, r3
 8001c8e:	d0cd      	beq.n	8001c2c <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001c90:	2300      	movs	r3, #0
}
 8001c92:	4618      	mov	r0, r3
 8001c94:	3710      	adds	r7, #16
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b084      	sub	sp, #16
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	60f8      	str	r0, [r7, #12]
 8001ca2:	60b9      	str	r1, [r7, #8]
 8001ca4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001ca6:	e02c      	b.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001ca8:	687a      	ldr	r2, [r7, #4]
 8001caa:	68b9      	ldr	r1, [r7, #8]
 8001cac:	68f8      	ldr	r0, [r7, #12]
 8001cae:	f000 f871 	bl	8001d94 <I2C_IsAcknowledgeFailed>
 8001cb2:	4603      	mov	r3, r0
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	d001      	beq.n	8001cbc <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001cb8:	2301      	movs	r3, #1
 8001cba:	e02a      	b.n	8001d12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001cc2:	d01e      	beq.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001cc4:	f7ff fa3c 	bl	8001140 <HAL_GetTick>
 8001cc8:	4602      	mov	r2, r0
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	1ad3      	subs	r3, r2, r3
 8001cce:	68ba      	ldr	r2, [r7, #8]
 8001cd0:	429a      	cmp	r2, r3
 8001cd2:	d302      	bcc.n	8001cda <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 8001cd4:	68bb      	ldr	r3, [r7, #8]
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d113      	bne.n	8001d02 <I2C_WaitOnTXISFlagUntilTimeout+0x68>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001cde:	f043 0220 	orr.w	r2, r3, #32
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2220      	movs	r2, #32
 8001cea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	2200      	movs	r2, #0
 8001cfa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 8001cfe:	2301      	movs	r3, #1
 8001d00:	e007      	b.n	8001d12 <I2C_WaitOnTXISFlagUntilTimeout+0x78>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	699b      	ldr	r3, [r3, #24]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b02      	cmp	r3, #2
 8001d0e:	d1cb      	bne.n	8001ca8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001d10:	2300      	movs	r3, #0
}
 8001d12:	4618      	mov	r0, r3
 8001d14:	3710      	adds	r7, #16
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bd80      	pop	{r7, pc}

08001d1a <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d1a:	b580      	push	{r7, lr}
 8001d1c:	b084      	sub	sp, #16
 8001d1e:	af00      	add	r7, sp, #0
 8001d20:	60f8      	str	r0, [r7, #12]
 8001d22:	60b9      	str	r1, [r7, #8]
 8001d24:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d26:	e028      	b.n	8001d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c, Timeout, Tickstart) != HAL_OK)
 8001d28:	687a      	ldr	r2, [r7, #4]
 8001d2a:	68b9      	ldr	r1, [r7, #8]
 8001d2c:	68f8      	ldr	r0, [r7, #12]
 8001d2e:	f000 f831 	bl	8001d94 <I2C_IsAcknowledgeFailed>
 8001d32:	4603      	mov	r3, r0
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d001      	beq.n	8001d3c <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	e026      	b.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001d3c:	f7ff fa00 	bl	8001140 <HAL_GetTick>
 8001d40:	4602      	mov	r2, r0
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	1ad3      	subs	r3, r2, r3
 8001d46:	68ba      	ldr	r2, [r7, #8]
 8001d48:	429a      	cmp	r2, r3
 8001d4a:	d302      	bcc.n	8001d52 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b00      	cmp	r3, #0
 8001d50:	d113      	bne.n	8001d7a <I2C_WaitOnSTOPFlagUntilTimeout+0x60>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d56:	f043 0220 	orr.w	r2, r3, #32
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	645a      	str	r2, [r3, #68]	; 0x44
      hi2c->State = HAL_I2C_STATE_READY;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2220      	movs	r2, #32
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8001d66:	68fb      	ldr	r3, [r7, #12]
 8001d68:	2200      	movs	r2, #0
 8001d6a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001d6e:	68fb      	ldr	r3, [r7, #12]
 8001d70:	2200      	movs	r2, #0
 8001d72:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8001d76:	2301      	movs	r3, #1
 8001d78:	e007      	b.n	8001d8a <I2C_WaitOnSTOPFlagUntilTimeout+0x70>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001d7a:	68fb      	ldr	r3, [r7, #12]
 8001d7c:	681b      	ldr	r3, [r3, #0]
 8001d7e:	699b      	ldr	r3, [r3, #24]
 8001d80:	f003 0320 	and.w	r3, r3, #32
 8001d84:	2b20      	cmp	r3, #32
 8001d86:	d1cf      	bne.n	8001d28 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8001d88:	2300      	movs	r3, #0
}
 8001d8a:	4618      	mov	r0, r3
 8001d8c:	3710      	adds	r7, #16
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bd80      	pop	{r7, pc}
	...

08001d94 <I2C_IsAcknowledgeFailed>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001d94:	b580      	push	{r7, lr}
 8001d96:	b084      	sub	sp, #16
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	60f8      	str	r0, [r7, #12]
 8001d9c:	60b9      	str	r1, [r7, #8]
 8001d9e:	607a      	str	r2, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001da0:	68fb      	ldr	r3, [r7, #12]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	699b      	ldr	r3, [r3, #24]
 8001da6:	f003 0310 	and.w	r3, r3, #16
 8001daa:	2b10      	cmp	r3, #16
 8001dac:	d151      	bne.n	8001e52 <I2C_IsAcknowledgeFailed+0xbe>
  {
    /* Wait until STOP Flag is reset */
    /* AutoEnd should be initiate after AF */
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001dae:	e022      	b.n	8001df6 <I2C_IsAcknowledgeFailed+0x62>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001db6:	d01e      	beq.n	8001df6 <I2C_IsAcknowledgeFailed+0x62>
      {
        if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001db8:	f7ff f9c2 	bl	8001140 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	68ba      	ldr	r2, [r7, #8]
 8001dc4:	429a      	cmp	r2, r3
 8001dc6:	d302      	bcc.n	8001dce <I2C_IsAcknowledgeFailed+0x3a>
 8001dc8:	68bb      	ldr	r3, [r7, #8]
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d113      	bne.n	8001df6 <I2C_IsAcknowledgeFailed+0x62>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dd2:	f043 0220 	orr.w	r2, r3, #32
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8001dda:	68fb      	ldr	r3, [r7, #12]
 8001ddc:	2220      	movs	r2, #32
 8001dde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	2200      	movs	r2, #0
 8001de6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8001dea:	68fb      	ldr	r3, [r7, #12]
 8001dec:	2200      	movs	r2, #0
 8001dee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
 8001df4:	e02e      	b.n	8001e54 <I2C_IsAcknowledgeFailed+0xc0>
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8001df6:	68fb      	ldr	r3, [r7, #12]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	699b      	ldr	r3, [r3, #24]
 8001dfc:	f003 0320 	and.w	r3, r3, #32
 8001e00:	2b20      	cmp	r3, #32
 8001e02:	d1d5      	bne.n	8001db0 <I2C_IsAcknowledgeFailed+0x1c>
        }
      }
    }

    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	2210      	movs	r2, #16
 8001e0a:	61da      	str	r2, [r3, #28]

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	2220      	movs	r2, #32
 8001e12:	61da      	str	r2, [r3, #28]

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8001e14:	68f8      	ldr	r0, [r7, #12]
 8001e16:	f7ff fedc 	bl	8001bd2 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	4b0d      	ldr	r3, [pc, #52]	; (8001e5c <I2C_IsAcknowledgeFailed+0xc8>)
 8001e26:	400b      	ands	r3, r1
 8001e28:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8001e2a:	68fb      	ldr	r3, [r7, #12]
 8001e2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e2e:	f043 0204 	orr.w	r2, r3, #4
 8001e32:	68fb      	ldr	r3, [r7, #12]
 8001e34:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8001e36:	68fb      	ldr	r3, [r7, #12]
 8001e38:	2220      	movs	r2, #32
 8001e3a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e3e:	68fb      	ldr	r3, [r7, #12]
 8001e40:	2200      	movs	r2, #0
 8001e42:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	2200      	movs	r2, #0
 8001e4a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <I2C_IsAcknowledgeFailed+0xc0>
  }
  return HAL_OK;
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}
 8001e5c:	fe00e800 	.word	0xfe00e800

08001e60 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_READ Generate Restart for read request.
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode, uint32_t Request)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b085      	sub	sp, #20
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	607b      	str	r3, [r7, #4]
 8001e6a:	460b      	mov	r3, r1
 8001e6c:	817b      	strh	r3, [r7, #10]
 8001e6e:	4613      	mov	r3, r2
 8001e70:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | I2C_CR2_START | I2C_CR2_STOP)), \
 8001e72:	68fb      	ldr	r3, [r7, #12]
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	685a      	ldr	r2, [r3, #4]
 8001e78:	69bb      	ldr	r3, [r7, #24]
 8001e7a:	0d5b      	lsrs	r3, r3, #21
 8001e7c:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8001e80:	4b0d      	ldr	r3, [pc, #52]	; (8001eb8 <I2C_TransferConfig+0x58>)
 8001e82:	430b      	orrs	r3, r1
 8001e84:	43db      	mvns	r3, r3
 8001e86:	ea02 0103 	and.w	r1, r2, r3
 8001e8a:	897b      	ldrh	r3, [r7, #10]
 8001e8c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8001e90:	7a7b      	ldrb	r3, [r7, #9]
 8001e92:	041b      	lsls	r3, r3, #16
 8001e94:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8001e98:	431a      	orrs	r2, r3
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	431a      	orrs	r2, r3
 8001e9e:	69bb      	ldr	r3, [r7, #24]
 8001ea0:	431a      	orrs	r2, r3
 8001ea2:	68fb      	ldr	r3, [r7, #12]
 8001ea4:	681b      	ldr	r3, [r3, #0]
 8001ea6:	430a      	orrs	r2, r1
 8001ea8:	605a      	str	r2, [r3, #4]
             (uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | (uint32_t)Mode | (uint32_t)Request));
}
 8001eaa:	bf00      	nop
 8001eac:	3714      	adds	r7, #20
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb4:	4770      	bx	lr
 8001eb6:	bf00      	nop
 8001eb8:	03ff63ff 	.word	0x03ff63ff

08001ebc <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b083      	sub	sp, #12
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
 8001ec4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001ecc:	b2db      	uxtb	r3, r3
 8001ece:	2b20      	cmp	r3, #32
 8001ed0:	d138      	bne.n	8001f44 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001ed8:	2b01      	cmp	r3, #1
 8001eda:	d101      	bne.n	8001ee0 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8001edc:	2302      	movs	r3, #2
 8001ede:	e032      	b.n	8001f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2224      	movs	r2, #36	; 0x24
 8001eec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	681a      	ldr	r2, [r3, #0]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f022 0201 	bic.w	r2, r2, #1
 8001efe:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	681a      	ldr	r2, [r3, #0]
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8001f0e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	6819      	ldr	r1, [r3, #0]
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	683a      	ldr	r2, [r7, #0]
 8001f1c:	430a      	orrs	r2, r1
 8001f1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681a      	ldr	r2, [r3, #0]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f042 0201 	orr.w	r2, r2, #1
 8001f2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	2220      	movs	r2, #32
 8001f34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001f40:	2300      	movs	r3, #0
 8001f42:	e000      	b.n	8001f46 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8001f44:	2302      	movs	r3, #2
  }
}
 8001f46:	4618      	mov	r0, r3
 8001f48:	370c      	adds	r7, #12
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f50:	4770      	bx	lr

08001f52 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8001f52:	b480      	push	{r7}
 8001f54:	b085      	sub	sp, #20
 8001f56:	af00      	add	r7, sp, #0
 8001f58:	6078      	str	r0, [r7, #4]
 8001f5a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8001f62:	b2db      	uxtb	r3, r3
 8001f64:	2b20      	cmp	r3, #32
 8001f66:	d139      	bne.n	8001fdc <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001f6e:	2b01      	cmp	r3, #1
 8001f70:	d101      	bne.n	8001f76 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8001f72:	2302      	movs	r3, #2
 8001f74:	e033      	b.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2224      	movs	r2, #36	; 0x24
 8001f82:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	f022 0201 	bic.w	r2, r2, #1
 8001f94:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8001f9e:	68fb      	ldr	r3, [r7, #12]
 8001fa0:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8001fa4:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8001fa6:	683b      	ldr	r3, [r7, #0]
 8001fa8:	021b      	lsls	r3, r3, #8
 8001faa:	68fa      	ldr	r2, [r7, #12]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	68fa      	ldr	r2, [r7, #12]
 8001fb6:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f042 0201 	orr.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	2220      	movs	r2, #32
 8001fcc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8001fd8:	2300      	movs	r3, #0
 8001fda:	e000      	b.n	8001fde <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8001fdc:	2302      	movs	r3, #2
  }
}
 8001fde:	4618      	mov	r0, r3
 8001fe0:	3714      	adds	r7, #20
 8001fe2:	46bd      	mov	sp, r7
 8001fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fe8:	4770      	bx	lr

08001fea <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001fea:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001fec:	b08f      	sub	sp, #60	; 0x3c
 8001fee:	af0a      	add	r7, sp, #40	; 0x28
 8001ff0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d101      	bne.n	8001ffc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001ff8:	2301      	movs	r3, #1
 8001ffa:	e116      	b.n	800222a <HAL_PCD_Init+0x240>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8002008:	b2db      	uxtb	r3, r3
 800200a:	2b00      	cmp	r3, #0
 800200c:	d106      	bne.n	800201c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	2200      	movs	r2, #0
 8002012:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002016:	6878      	ldr	r0, [r7, #4]
 8002018:	f7fe ff34 	bl	8000e84 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2203      	movs	r2, #3
 8002020:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002024:	68bb      	ldr	r3, [r7, #8]
 8002026:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002028:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800202c:	2b00      	cmp	r3, #0
 800202e:	d102      	bne.n	8002036 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2200      	movs	r2, #0
 8002034:	611a      	str	r2, [r3, #16]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	4618      	mov	r0, r3
 800203c:	f003 fbb8 	bl	80057b0 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	603b      	str	r3, [r7, #0]
 8002046:	687e      	ldr	r6, [r7, #4]
 8002048:	466d      	mov	r5, sp
 800204a:	f106 0410 	add.w	r4, r6, #16
 800204e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002050:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002052:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002054:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002056:	e894 0003 	ldmia.w	r4, {r0, r1}
 800205a:	e885 0003 	stmia.w	r5, {r0, r1}
 800205e:	1d33      	adds	r3, r6, #4
 8002060:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002062:	6838      	ldr	r0, [r7, #0]
 8002064:	f003 fb52 	bl	800570c <USB_CoreInit>
 8002068:	4603      	mov	r3, r0
 800206a:	2b00      	cmp	r3, #0
 800206c:	d005      	beq.n	800207a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2202      	movs	r2, #2
 8002072:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e0d7      	b.n	800222a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	2100      	movs	r1, #0
 8002080:	4618      	mov	r0, r3
 8002082:	f003 fba6 	bl	80057d2 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002086:	2300      	movs	r3, #0
 8002088:	73fb      	strb	r3, [r7, #15]
 800208a:	e04a      	b.n	8002122 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800208c:	7bfa      	ldrb	r2, [r7, #15]
 800208e:	6879      	ldr	r1, [r7, #4]
 8002090:	4613      	mov	r3, r2
 8002092:	00db      	lsls	r3, r3, #3
 8002094:	1a9b      	subs	r3, r3, r2
 8002096:	009b      	lsls	r3, r3, #2
 8002098:	440b      	add	r3, r1
 800209a:	333d      	adds	r3, #61	; 0x3d
 800209c:	2201      	movs	r2, #1
 800209e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020a0:	7bfa      	ldrb	r2, [r7, #15]
 80020a2:	6879      	ldr	r1, [r7, #4]
 80020a4:	4613      	mov	r3, r2
 80020a6:	00db      	lsls	r3, r3, #3
 80020a8:	1a9b      	subs	r3, r3, r2
 80020aa:	009b      	lsls	r3, r3, #2
 80020ac:	440b      	add	r3, r1
 80020ae:	333c      	adds	r3, #60	; 0x3c
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020b4:	7bfa      	ldrb	r2, [r7, #15]
 80020b6:	7bfb      	ldrb	r3, [r7, #15]
 80020b8:	b298      	uxth	r0, r3
 80020ba:	6879      	ldr	r1, [r7, #4]
 80020bc:	4613      	mov	r3, r2
 80020be:	00db      	lsls	r3, r3, #3
 80020c0:	1a9b      	subs	r3, r3, r2
 80020c2:	009b      	lsls	r3, r3, #2
 80020c4:	440b      	add	r3, r1
 80020c6:	3342      	adds	r3, #66	; 0x42
 80020c8:	4602      	mov	r2, r0
 80020ca:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	6879      	ldr	r1, [r7, #4]
 80020d0:	4613      	mov	r3, r2
 80020d2:	00db      	lsls	r3, r3, #3
 80020d4:	1a9b      	subs	r3, r3, r2
 80020d6:	009b      	lsls	r3, r3, #2
 80020d8:	440b      	add	r3, r1
 80020da:	333f      	adds	r3, #63	; 0x3f
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80020e0:	7bfa      	ldrb	r2, [r7, #15]
 80020e2:	6879      	ldr	r1, [r7, #4]
 80020e4:	4613      	mov	r3, r2
 80020e6:	00db      	lsls	r3, r3, #3
 80020e8:	1a9b      	subs	r3, r3, r2
 80020ea:	009b      	lsls	r3, r3, #2
 80020ec:	440b      	add	r3, r1
 80020ee:	3344      	adds	r3, #68	; 0x44
 80020f0:	2200      	movs	r2, #0
 80020f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80020f4:	7bfa      	ldrb	r2, [r7, #15]
 80020f6:	6879      	ldr	r1, [r7, #4]
 80020f8:	4613      	mov	r3, r2
 80020fa:	00db      	lsls	r3, r3, #3
 80020fc:	1a9b      	subs	r3, r3, r2
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	440b      	add	r3, r1
 8002102:	3348      	adds	r3, #72	; 0x48
 8002104:	2200      	movs	r2, #0
 8002106:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002108:	7bfa      	ldrb	r2, [r7, #15]
 800210a:	6879      	ldr	r1, [r7, #4]
 800210c:	4613      	mov	r3, r2
 800210e:	00db      	lsls	r3, r3, #3
 8002110:	1a9b      	subs	r3, r3, r2
 8002112:	009b      	lsls	r3, r3, #2
 8002114:	440b      	add	r3, r1
 8002116:	3350      	adds	r3, #80	; 0x50
 8002118:	2200      	movs	r2, #0
 800211a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	3301      	adds	r3, #1
 8002120:	73fb      	strb	r3, [r7, #15]
 8002122:	7bfa      	ldrb	r2, [r7, #15]
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	429a      	cmp	r2, r3
 800212a:	d3af      	bcc.n	800208c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800212c:	2300      	movs	r3, #0
 800212e:	73fb      	strb	r3, [r7, #15]
 8002130:	e044      	b.n	80021bc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002132:	7bfa      	ldrb	r2, [r7, #15]
 8002134:	6879      	ldr	r1, [r7, #4]
 8002136:	4613      	mov	r3, r2
 8002138:	00db      	lsls	r3, r3, #3
 800213a:	1a9b      	subs	r3, r3, r2
 800213c:	009b      	lsls	r3, r3, #2
 800213e:	440b      	add	r3, r1
 8002140:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002148:	7bfa      	ldrb	r2, [r7, #15]
 800214a:	6879      	ldr	r1, [r7, #4]
 800214c:	4613      	mov	r3, r2
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	1a9b      	subs	r3, r3, r2
 8002152:	009b      	lsls	r3, r3, #2
 8002154:	440b      	add	r3, r1
 8002156:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800215a:	7bfa      	ldrb	r2, [r7, #15]
 800215c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800215e:	7bfa      	ldrb	r2, [r7, #15]
 8002160:	6879      	ldr	r1, [r7, #4]
 8002162:	4613      	mov	r3, r2
 8002164:	00db      	lsls	r3, r3, #3
 8002166:	1a9b      	subs	r3, r3, r2
 8002168:	009b      	lsls	r3, r3, #2
 800216a:	440b      	add	r3, r1
 800216c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002170:	2200      	movs	r2, #0
 8002172:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002174:	7bfa      	ldrb	r2, [r7, #15]
 8002176:	6879      	ldr	r1, [r7, #4]
 8002178:	4613      	mov	r3, r2
 800217a:	00db      	lsls	r3, r3, #3
 800217c:	1a9b      	subs	r3, r3, r2
 800217e:	009b      	lsls	r3, r3, #2
 8002180:	440b      	add	r3, r1
 8002182:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002186:	2200      	movs	r2, #0
 8002188:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800218a:	7bfa      	ldrb	r2, [r7, #15]
 800218c:	6879      	ldr	r1, [r7, #4]
 800218e:	4613      	mov	r3, r2
 8002190:	00db      	lsls	r3, r3, #3
 8002192:	1a9b      	subs	r3, r3, r2
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	440b      	add	r3, r1
 8002198:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	6879      	ldr	r1, [r7, #4]
 80021a4:	4613      	mov	r3, r2
 80021a6:	00db      	lsls	r3, r3, #3
 80021a8:	1a9b      	subs	r3, r3, r2
 80021aa:	009b      	lsls	r3, r3, #2
 80021ac:	440b      	add	r3, r1
 80021ae:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80021b2:	2200      	movs	r2, #0
 80021b4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021b6:	7bfb      	ldrb	r3, [r7, #15]
 80021b8:	3301      	adds	r3, #1
 80021ba:	73fb      	strb	r3, [r7, #15]
 80021bc:	7bfa      	ldrb	r2, [r7, #15]
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	685b      	ldr	r3, [r3, #4]
 80021c2:	429a      	cmp	r2, r3
 80021c4:	d3b5      	bcc.n	8002132 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	603b      	str	r3, [r7, #0]
 80021cc:	687e      	ldr	r6, [r7, #4]
 80021ce:	466d      	mov	r5, sp
 80021d0:	f106 0410 	add.w	r4, r6, #16
 80021d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80021e0:	e885 0003 	stmia.w	r5, {r0, r1}
 80021e4:	1d33      	adds	r3, r6, #4
 80021e6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80021e8:	6838      	ldr	r0, [r7, #0]
 80021ea:	f003 fb1d 	bl	8005828 <USB_DevInit>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d005      	beq.n	8002200 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	2202      	movs	r2, #2
 80021f8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80021fc:	2301      	movs	r3, #1
 80021fe:	e014      	b.n	800222a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	2200      	movs	r2, #0
 8002204:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	2201      	movs	r2, #1
 800220c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002214:	2b01      	cmp	r3, #1
 8002216:	d102      	bne.n	800221e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002218:	6878      	ldr	r0, [r7, #4]
 800221a:	f000 f80a 	bl	8002232 <HAL_PCDEx_ActivateLPM>
  }
  
  (void)USB_DevDisconnect(hpcd->Instance);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f003 fcad 	bl	8005b82 <USB_DevDisconnect>

  return HAL_OK;
 8002228:	2300      	movs	r3, #0
}
 800222a:	4618      	mov	r0, r3
 800222c:	3714      	adds	r7, #20
 800222e:	46bd      	mov	sp, r7
 8002230:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002232 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002232:	b480      	push	{r7}
 8002234:	b085      	sub	sp, #20
 8002236:	af00      	add	r7, sp, #0
 8002238:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	2201      	movs	r2, #1
 8002244:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	2200      	movs	r2, #0
 800224c:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	699b      	ldr	r3, [r3, #24]
 8002254:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002264:	f043 0303 	orr.w	r3, r3, #3
 8002268:	68fa      	ldr	r2, [r7, #12]
 800226a:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800226c:	2300      	movs	r3, #0
}
 800226e:	4618      	mov	r0, r3
 8002270:	3714      	adds	r7, #20
 8002272:	46bd      	mov	sp, r7
 8002274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002278:	4770      	bx	lr
	...

0800227c <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800227c:	b480      	push	{r7}
 800227e:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002280:	4b05      	ldr	r3, [pc, #20]	; (8002298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a04      	ldr	r2, [pc, #16]	; (8002298 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002286:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800228a:	6013      	str	r3, [r2, #0]
}
 800228c:	bf00      	nop
 800228e:	46bd      	mov	sp, r7
 8002290:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002294:	4770      	bx	lr
 8002296:	bf00      	nop
 8002298:	40007000 	.word	0x40007000

0800229c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800229c:	b480      	push	{r7}
 800229e:	af00      	add	r7, sp, #0
#if defined(PWR_CR5_R1MODE)
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022a0:	4b0d      	ldr	r3, [pc, #52]	; (80022d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022ac:	d102      	bne.n	80022b4 <HAL_PWREx_GetVoltageRange+0x18>
    {
      return PWR_REGULATOR_VOLTAGE_SCALE2;
 80022ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80022b2:	e00b      	b.n	80022cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else if (READ_BIT(PWR->CR5, PWR_CR5_R1MODE) == PWR_CR5_R1MODE)
 80022b4:	4b08      	ldr	r3, [pc, #32]	; (80022d8 <HAL_PWREx_GetVoltageRange+0x3c>)
 80022b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022ba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022be:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80022c2:	d102      	bne.n	80022ca <HAL_PWREx_GetVoltageRange+0x2e>
    {
      /* PWR_CR5_R1MODE bit set means that Range 1 Boost is disabled */
      return PWR_REGULATOR_VOLTAGE_SCALE1;
 80022c4:	f44f 7300 	mov.w	r3, #512	; 0x200
 80022c8:	e000      	b.n	80022cc <HAL_PWREx_GetVoltageRange+0x30>
    }
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
 80022ca:	2300      	movs	r3, #0
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
#endif
}
 80022cc:	4618      	mov	r0, r3
 80022ce:	46bd      	mov	sp, r7
 80022d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022d4:	4770      	bx	lr
 80022d6:	bf00      	nop
 80022d8:	40007000 	.word	0x40007000

080022dc <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80022dc:	b480      	push	{r7}
 80022de:	b085      	sub	sp, #20
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

#if defined(PWR_CR5_R1MODE)
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d141      	bne.n	800236e <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80022ea:	4b4b      	ldr	r3, [pc, #300]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80022f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80022f6:	d131      	bne.n	800235c <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80022f8:	4b47      	ldr	r3, [pc, #284]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80022fa:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80022fe:	4a46      	ldr	r2, [pc, #280]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002300:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002304:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002308:	4b43      	ldr	r3, [pc, #268]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002310:	4a41      	ldr	r2, [pc, #260]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002312:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002316:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 8002318:	4b40      	ldr	r3, [pc, #256]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x140>)
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	2232      	movs	r2, #50	; 0x32
 800231e:	fb02 f303 	mul.w	r3, r2, r3
 8002322:	4a3f      	ldr	r2, [pc, #252]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8002324:	fba2 2303 	umull	r2, r3, r2, r3
 8002328:	0c9b      	lsrs	r3, r3, #18
 800232a:	3301      	adds	r3, #1
 800232c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800232e:	e002      	b.n	8002336 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8002330:	68fb      	ldr	r3, [r7, #12]
 8002332:	3b01      	subs	r3, #1
 8002334:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8002336:	4b38      	ldr	r3, [pc, #224]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002338:	695b      	ldr	r3, [r3, #20]
 800233a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800233e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002342:	d102      	bne.n	800234a <HAL_PWREx_ControlVoltageScaling+0x6e>
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	2b00      	cmp	r3, #0
 8002348:	d1f2      	bne.n	8002330 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800234a:	4b33      	ldr	r3, [pc, #204]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800234c:	695b      	ldr	r3, [r3, #20]
 800234e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002352:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002356:	d158      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8002358:	2303      	movs	r3, #3
 800235a:	e057      	b.n	800240c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 800235c:	4b2e      	ldr	r3, [pc, #184]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800235e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002362:	4a2d      	ldr	r2, [pc, #180]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002364:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002368:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 800236c:	e04d      	b.n	800240a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800236e:	687b      	ldr	r3, [r7, #4]
 8002370:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002374:	d141      	bne.n	80023fa <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8002376:	4b28      	ldr	r3, [pc, #160]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800237e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002382:	d131      	bne.n	80023e8 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8002384:	4b24      	ldr	r3, [pc, #144]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002386:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800238a:	4a23      	ldr	r2, [pc, #140]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800238c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002390:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800239c:	4a1e      	ldr	r2, [pc, #120]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800239e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80023a2:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1;
 80023a4:	4b1d      	ldr	r3, [pc, #116]	; (800241c <HAL_PWREx_ControlVoltageScaling+0x140>)
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	2232      	movs	r2, #50	; 0x32
 80023aa:	fb02 f303 	mul.w	r3, r2, r3
 80023ae:	4a1c      	ldr	r2, [pc, #112]	; (8002420 <HAL_PWREx_ControlVoltageScaling+0x144>)
 80023b0:	fba2 2303 	umull	r2, r3, r2, r3
 80023b4:	0c9b      	lsrs	r3, r3, #18
 80023b6:	3301      	adds	r3, #1
 80023b8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023ba:	e002      	b.n	80023c2 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80023bc:	68fb      	ldr	r3, [r7, #12]
 80023be:	3b01      	subs	r3, #1
 80023c0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80023c2:	4b15      	ldr	r3, [pc, #84]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023c4:	695b      	ldr	r3, [r3, #20]
 80023c6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023ca:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023ce:	d102      	bne.n	80023d6 <HAL_PWREx_ControlVoltageScaling+0xfa>
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d1f2      	bne.n	80023bc <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80023d6:	4b10      	ldr	r3, [pc, #64]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023d8:	695b      	ldr	r3, [r3, #20]
 80023da:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80023de:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80023e2:	d112      	bne.n	800240a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e011      	b.n	800240c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80023e8:	4b0b      	ldr	r3, [pc, #44]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80023ee:	4a0a      	ldr	r2, [pc, #40]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80023f4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80023f8:	e007      	b.n	800240a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80023fa:	4b07      	ldr	r3, [pc, #28]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8002404:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002408:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 800240a:	2300      	movs	r3, #0
}
 800240c:	4618      	mov	r0, r3
 800240e:	3714      	adds	r7, #20
 8002410:	46bd      	mov	sp, r7
 8002412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002416:	4770      	bx	lr
 8002418:	40007000 	.word	0x40007000
 800241c:	20000000 	.word	0x20000000
 8002420:	431bde83 	.word	0x431bde83

08002424 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8002424:	b480      	push	{r7}
 8002426:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 8002428:	4b05      	ldr	r3, [pc, #20]	; (8002440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a04      	ldr	r2, [pc, #16]	; (8002440 <HAL_PWREx_EnableVddUSB+0x1c>)
 800242e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002432:	6053      	str	r3, [r2, #4]
}
 8002434:	bf00      	nop
 8002436:	46bd      	mov	sp, r7
 8002438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243c:	4770      	bx	lr
 800243e:	bf00      	nop
 8002440:	40007000 	.word	0x40007000

08002444 <HAL_PWREx_EnableVddIO2>:
  * @brief Enable VDDIO2 supply.
  * @note  Remove VDDIO2 electrical and logical isolation, once VDDIO2 supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddIO2(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_IOSV);
 8002448:	4b05      	ldr	r3, [pc, #20]	; (8002460 <HAL_PWREx_EnableVddIO2+0x1c>)
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	4a04      	ldr	r2, [pc, #16]	; (8002460 <HAL_PWREx_EnableVddIO2+0x1c>)
 800244e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002452:	6053      	str	r3, [r2, #4]
}
 8002454:	bf00      	nop
 8002456:	46bd      	mov	sp, r7
 8002458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800245c:	4770      	bx	lr
 800245e:	bf00      	nop
 8002460:	40007000 	.word	0x40007000

08002464 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	b08a      	sub	sp, #40	; 0x28
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	2b00      	cmp	r3, #0
 8002470:	d102      	bne.n	8002478 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	f000 bc76 	b.w	8002d64 <HAL_RCC_OscConfig+0x900>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002478:	4ba1      	ldr	r3, [pc, #644]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800247a:	689b      	ldr	r3, [r3, #8]
 800247c:	f003 030c 	and.w	r3, r3, #12
 8002480:	623b      	str	r3, [r7, #32]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002482:	4b9f      	ldr	r3, [pc, #636]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002484:	68db      	ldr	r3, [r3, #12]
 8002486:	f003 0303 	and.w	r3, r3, #3
 800248a:	61fb      	str	r3, [r7, #28]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f003 0310 	and.w	r3, r3, #16
 8002494:	2b00      	cmp	r3, #0
 8002496:	f000 80e6 	beq.w	8002666 <HAL_RCC_OscConfig+0x202>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 800249a:	6a3b      	ldr	r3, [r7, #32]
 800249c:	2b00      	cmp	r3, #0
 800249e:	d007      	beq.n	80024b0 <HAL_RCC_OscConfig+0x4c>
 80024a0:	6a3b      	ldr	r3, [r7, #32]
 80024a2:	2b0c      	cmp	r3, #12
 80024a4:	f040 808d 	bne.w	80025c2 <HAL_RCC_OscConfig+0x15e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	2b01      	cmp	r3, #1
 80024ac:	f040 8089 	bne.w	80025c2 <HAL_RCC_OscConfig+0x15e>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80024b0:	4b93      	ldr	r3, [pc, #588]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	f003 0302 	and.w	r3, r3, #2
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d006      	beq.n	80024ca <HAL_RCC_OscConfig+0x66>
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	69db      	ldr	r3, [r3, #28]
 80024c0:	2b00      	cmp	r3, #0
 80024c2:	d102      	bne.n	80024ca <HAL_RCC_OscConfig+0x66>
      {
        return HAL_ERROR;
 80024c4:	2301      	movs	r3, #1
 80024c6:	f000 bc4d 	b.w	8002d64 <HAL_RCC_OscConfig+0x900>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80024ce:	4b8c      	ldr	r3, [pc, #560]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	f003 0308 	and.w	r3, r3, #8
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d004      	beq.n	80024e4 <HAL_RCC_OscConfig+0x80>
 80024da:	4b89      	ldr	r3, [pc, #548]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_OscConfig+0x8c>
 80024e4:	4b86      	ldr	r3, [pc, #536]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80024e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80024ea:	091b      	lsrs	r3, r3, #4
 80024ec:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80024f0:	4293      	cmp	r3, r2
 80024f2:	d224      	bcs.n	800253e <HAL_RCC_OscConfig+0xda>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024f8:	4618      	mov	r0, r3
 80024fa:	f000 fe29 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 80024fe:	4603      	mov	r3, r0
 8002500:	2b00      	cmp	r3, #0
 8002502:	d002      	beq.n	800250a <HAL_RCC_OscConfig+0xa6>
          {
            return HAL_ERROR;
 8002504:	2301      	movs	r3, #1
 8002506:	f000 bc2d 	b.w	8002d64 <HAL_RCC_OscConfig+0x900>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800250a:	4b7d      	ldr	r3, [pc, #500]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	4a7c      	ldr	r2, [pc, #496]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002510:	f043 0308 	orr.w	r3, r3, #8
 8002514:	6013      	str	r3, [r2, #0]
 8002516:	4b7a      	ldr	r3, [pc, #488]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002518:	681b      	ldr	r3, [r3, #0]
 800251a:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002522:	4977      	ldr	r1, [pc, #476]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002524:	4313      	orrs	r3, r2
 8002526:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8002528:	4b75      	ldr	r3, [pc, #468]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800252a:	685b      	ldr	r3, [r3, #4]
 800252c:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	6a1b      	ldr	r3, [r3, #32]
 8002534:	021b      	lsls	r3, r3, #8
 8002536:	4972      	ldr	r1, [pc, #456]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002538:	4313      	orrs	r3, r2
 800253a:	604b      	str	r3, [r1, #4]
 800253c:	e025      	b.n	800258a <HAL_RCC_OscConfig+0x126>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800253e:	4b70      	ldr	r3, [pc, #448]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4a6f      	ldr	r2, [pc, #444]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002544:	f043 0308 	orr.w	r3, r3, #8
 8002548:	6013      	str	r3, [r2, #0]
 800254a:	4b6d      	ldr	r3, [pc, #436]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002556:	496a      	ldr	r1, [pc, #424]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002558:	4313      	orrs	r3, r2
 800255a:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800255c:	4b68      	ldr	r3, [pc, #416]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800255e:	685b      	ldr	r3, [r3, #4]
 8002560:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	6a1b      	ldr	r3, [r3, #32]
 8002568:	021b      	lsls	r3, r3, #8
 800256a:	4965      	ldr	r1, [pc, #404]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800256c:	4313      	orrs	r3, r2
 800256e:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8002570:	6a3b      	ldr	r3, [r7, #32]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d109      	bne.n	800258a <HAL_RCC_OscConfig+0x126>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800257a:	4618      	mov	r0, r3
 800257c:	f000 fde8 	bl	8003150 <RCC_SetFlashLatencyFromMSIRange>
 8002580:	4603      	mov	r3, r0
 8002582:	2b00      	cmp	r3, #0
 8002584:	d001      	beq.n	800258a <HAL_RCC_OscConfig+0x126>
            {
              return HAL_ERROR;
 8002586:	2301      	movs	r3, #1
 8002588:	e3ec      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800258a:	f000 fd1f 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 800258e:	4601      	mov	r1, r0
 8002590:	4b5b      	ldr	r3, [pc, #364]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002592:	689b      	ldr	r3, [r3, #8]
 8002594:	091b      	lsrs	r3, r3, #4
 8002596:	f003 030f 	and.w	r3, r3, #15
 800259a:	4a5a      	ldr	r2, [pc, #360]	; (8002704 <HAL_RCC_OscConfig+0x2a0>)
 800259c:	5cd3      	ldrb	r3, [r2, r3]
 800259e:	f003 031f 	and.w	r3, r3, #31
 80025a2:	fa21 f303 	lsr.w	r3, r1, r3
 80025a6:	4a58      	ldr	r2, [pc, #352]	; (8002708 <HAL_RCC_OscConfig+0x2a4>)
 80025a8:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80025aa:	4b58      	ldr	r3, [pc, #352]	; (800270c <HAL_RCC_OscConfig+0x2a8>)
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	4618      	mov	r0, r3
 80025b0:	f7fe fd7a 	bl	80010a8 <HAL_InitTick>
 80025b4:	4603      	mov	r3, r0
 80025b6:	75fb      	strb	r3, [r7, #23]
        if(status != HAL_OK)
 80025b8:	7dfb      	ldrb	r3, [r7, #23]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d052      	beq.n	8002664 <HAL_RCC_OscConfig+0x200>
        {
          return status;
 80025be:	7dfb      	ldrb	r3, [r7, #23]
 80025c0:	e3d0      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	69db      	ldr	r3, [r3, #28]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d032      	beq.n	8002630 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80025ca:	4b4d      	ldr	r3, [pc, #308]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4a4c      	ldr	r2, [pc, #304]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80025d0:	f043 0301 	orr.w	r3, r3, #1
 80025d4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80025d6:	f7fe fdb3 	bl	8001140 <HAL_GetTick>
 80025da:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025dc:	e008      	b.n	80025f0 <HAL_RCC_OscConfig+0x18c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80025de:	f7fe fdaf 	bl	8001140 <HAL_GetTick>
 80025e2:	4602      	mov	r2, r0
 80025e4:	69bb      	ldr	r3, [r7, #24]
 80025e6:	1ad3      	subs	r3, r2, r3
 80025e8:	2b02      	cmp	r3, #2
 80025ea:	d901      	bls.n	80025f0 <HAL_RCC_OscConfig+0x18c>
          {
            return HAL_TIMEOUT;
 80025ec:	2303      	movs	r3, #3
 80025ee:	e3b9      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 80025f0:	4b43      	ldr	r3, [pc, #268]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0302 	and.w	r3, r3, #2
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d0f0      	beq.n	80025de <HAL_RCC_OscConfig+0x17a>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80025fc:	4b40      	ldr	r3, [pc, #256]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4a3f      	ldr	r2, [pc, #252]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002602:	f043 0308 	orr.w	r3, r3, #8
 8002606:	6013      	str	r3, [r2, #0]
 8002608:	4b3d      	ldr	r3, [pc, #244]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002614:	493a      	ldr	r1, [pc, #232]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002616:	4313      	orrs	r3, r2
 8002618:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800261a:	4b39      	ldr	r3, [pc, #228]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800261c:	685b      	ldr	r3, [r3, #4]
 800261e:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	6a1b      	ldr	r3, [r3, #32]
 8002626:	021b      	lsls	r3, r3, #8
 8002628:	4935      	ldr	r1, [pc, #212]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 800262a:	4313      	orrs	r3, r2
 800262c:	604b      	str	r3, [r1, #4]
 800262e:	e01a      	b.n	8002666 <HAL_RCC_OscConfig+0x202>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8002630:	4b33      	ldr	r3, [pc, #204]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a32      	ldr	r2, [pc, #200]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002636:	f023 0301 	bic.w	r3, r3, #1
 800263a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800263c:	f7fe fd80 	bl	8001140 <HAL_GetTick>
 8002640:	61b8      	str	r0, [r7, #24]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002642:	e008      	b.n	8002656 <HAL_RCC_OscConfig+0x1f2>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8002644:	f7fe fd7c 	bl	8001140 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	69bb      	ldr	r3, [r7, #24]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b02      	cmp	r3, #2
 8002650:	d901      	bls.n	8002656 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e386      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8002656:	4b2a      	ldr	r3, [pc, #168]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0302 	and.w	r3, r3, #2
 800265e:	2b00      	cmp	r3, #0
 8002660:	d1f0      	bne.n	8002644 <HAL_RCC_OscConfig+0x1e0>
 8002662:	e000      	b.n	8002666 <HAL_RCC_OscConfig+0x202>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8002664:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 0301 	and.w	r3, r3, #1
 800266e:	2b00      	cmp	r3, #0
 8002670:	d073      	beq.n	800275a <HAL_RCC_OscConfig+0x2f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8002672:	6a3b      	ldr	r3, [r7, #32]
 8002674:	2b08      	cmp	r3, #8
 8002676:	d005      	beq.n	8002684 <HAL_RCC_OscConfig+0x220>
 8002678:	6a3b      	ldr	r3, [r7, #32]
 800267a:	2b0c      	cmp	r3, #12
 800267c:	d10e      	bne.n	800269c <HAL_RCC_OscConfig+0x238>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 800267e:	69fb      	ldr	r3, [r7, #28]
 8002680:	2b03      	cmp	r3, #3
 8002682:	d10b      	bne.n	800269c <HAL_RCC_OscConfig+0x238>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002684:	4b1e      	ldr	r3, [pc, #120]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800268c:	2b00      	cmp	r3, #0
 800268e:	d063      	beq.n	8002758 <HAL_RCC_OscConfig+0x2f4>
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	2b00      	cmp	r3, #0
 8002696:	d15f      	bne.n	8002758 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8002698:	2301      	movs	r3, #1
 800269a:	e363      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	685b      	ldr	r3, [r3, #4]
 80026a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026a4:	d106      	bne.n	80026b4 <HAL_RCC_OscConfig+0x250>
 80026a6:	4b16      	ldr	r3, [pc, #88]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026b0:	6013      	str	r3, [r2, #0]
 80026b2:	e01d      	b.n	80026f0 <HAL_RCC_OscConfig+0x28c>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80026bc:	d10c      	bne.n	80026d8 <HAL_RCC_OscConfig+0x274>
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4a0f      	ldr	r2, [pc, #60]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80026c8:	6013      	str	r3, [r2, #0]
 80026ca:	4b0d      	ldr	r3, [pc, #52]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4a0c      	ldr	r2, [pc, #48]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80026d4:	6013      	str	r3, [r2, #0]
 80026d6:	e00b      	b.n	80026f0 <HAL_RCC_OscConfig+0x28c>
 80026d8:	4b09      	ldr	r3, [pc, #36]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	4a08      	ldr	r2, [pc, #32]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80026e2:	6013      	str	r3, [r2, #0]
 80026e4:	4b06      	ldr	r3, [pc, #24]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	4a05      	ldr	r2, [pc, #20]	; (8002700 <HAL_RCC_OscConfig+0x29c>)
 80026ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80026ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	685b      	ldr	r3, [r3, #4]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d01b      	beq.n	8002730 <HAL_RCC_OscConfig+0x2cc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026f8:	f7fe fd22 	bl	8001140 <HAL_GetTick>
 80026fc:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80026fe:	e010      	b.n	8002722 <HAL_RCC_OscConfig+0x2be>
 8002700:	40021000 	.word	0x40021000
 8002704:	0801749c 	.word	0x0801749c
 8002708:	20000000 	.word	0x20000000
 800270c:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002710:	f7fe fd16 	bl	8001140 <HAL_GetTick>
 8002714:	4602      	mov	r2, r0
 8002716:	69bb      	ldr	r3, [r7, #24]
 8002718:	1ad3      	subs	r3, r2, r3
 800271a:	2b64      	cmp	r3, #100	; 0x64
 800271c:	d901      	bls.n	8002722 <HAL_RCC_OscConfig+0x2be>
          {
            return HAL_TIMEOUT;
 800271e:	2303      	movs	r3, #3
 8002720:	e320      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002722:	4ba0      	ldr	r3, [pc, #640]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800272a:	2b00      	cmp	r3, #0
 800272c:	d0f0      	beq.n	8002710 <HAL_RCC_OscConfig+0x2ac>
 800272e:	e014      	b.n	800275a <HAL_RCC_OscConfig+0x2f6>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002730:	f7fe fd06 	bl	8001140 <HAL_GetTick>
 8002734:	61b8      	str	r0, [r7, #24]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8002736:	e008      	b.n	800274a <HAL_RCC_OscConfig+0x2e6>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002738:	f7fe fd02 	bl	8001140 <HAL_GetTick>
 800273c:	4602      	mov	r2, r0
 800273e:	69bb      	ldr	r3, [r7, #24]
 8002740:	1ad3      	subs	r3, r2, r3
 8002742:	2b64      	cmp	r3, #100	; 0x64
 8002744:	d901      	bls.n	800274a <HAL_RCC_OscConfig+0x2e6>
          {
            return HAL_TIMEOUT;
 8002746:	2303      	movs	r3, #3
 8002748:	e30c      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800274a:	4b96      	ldr	r3, [pc, #600]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d1f0      	bne.n	8002738 <HAL_RCC_OscConfig+0x2d4>
 8002756:	e000      	b.n	800275a <HAL_RCC_OscConfig+0x2f6>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002758:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0302 	and.w	r3, r3, #2
 8002762:	2b00      	cmp	r3, #0
 8002764:	d060      	beq.n	8002828 <HAL_RCC_OscConfig+0x3c4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8002766:	6a3b      	ldr	r3, [r7, #32]
 8002768:	2b04      	cmp	r3, #4
 800276a:	d005      	beq.n	8002778 <HAL_RCC_OscConfig+0x314>
 800276c:	6a3b      	ldr	r3, [r7, #32]
 800276e:	2b0c      	cmp	r3, #12
 8002770:	d119      	bne.n	80027a6 <HAL_RCC_OscConfig+0x342>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8002772:	69fb      	ldr	r3, [r7, #28]
 8002774:	2b02      	cmp	r3, #2
 8002776:	d116      	bne.n	80027a6 <HAL_RCC_OscConfig+0x342>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002778:	4b8a      	ldr	r3, [pc, #552]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002780:	2b00      	cmp	r3, #0
 8002782:	d005      	beq.n	8002790 <HAL_RCC_OscConfig+0x32c>
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	68db      	ldr	r3, [r3, #12]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d101      	bne.n	8002790 <HAL_RCC_OscConfig+0x32c>
      {
        return HAL_ERROR;
 800278c:	2301      	movs	r3, #1
 800278e:	e2e9      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002790:	4b84      	ldr	r3, [pc, #528]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002792:	685b      	ldr	r3, [r3, #4]
 8002794:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	691b      	ldr	r3, [r3, #16]
 800279c:	061b      	lsls	r3, r3, #24
 800279e:	4981      	ldr	r1, [pc, #516]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027a0:	4313      	orrs	r3, r2
 80027a2:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80027a4:	e040      	b.n	8002828 <HAL_RCC_OscConfig+0x3c4>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	68db      	ldr	r3, [r3, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d023      	beq.n	80027f6 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80027ae:	4b7d      	ldr	r3, [pc, #500]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4a7c      	ldr	r2, [pc, #496]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80027ba:	f7fe fcc1 	bl	8001140 <HAL_GetTick>
 80027be:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027c0:	e008      	b.n	80027d4 <HAL_RCC_OscConfig+0x370>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80027c2:	f7fe fcbd 	bl	8001140 <HAL_GetTick>
 80027c6:	4602      	mov	r2, r0
 80027c8:	69bb      	ldr	r3, [r7, #24]
 80027ca:	1ad3      	subs	r3, r2, r3
 80027cc:	2b02      	cmp	r3, #2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x370>
          {
            return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e2c7      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80027d4:	4b73      	ldr	r3, [pc, #460]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0f0      	beq.n	80027c2 <HAL_RCC_OscConfig+0x35e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80027e0:	4b70      	ldr	r3, [pc, #448]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	691b      	ldr	r3, [r3, #16]
 80027ec:	061b      	lsls	r3, r3, #24
 80027ee:	496d      	ldr	r1, [pc, #436]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027f0:	4313      	orrs	r3, r2
 80027f2:	604b      	str	r3, [r1, #4]
 80027f4:	e018      	b.n	8002828 <HAL_RCC_OscConfig+0x3c4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80027f6:	4b6b      	ldr	r3, [pc, #428]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6a      	ldr	r2, [pc, #424]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80027fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002800:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002802:	f7fe fc9d 	bl	8001140 <HAL_GetTick>
 8002806:	61b8      	str	r0, [r7, #24]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002808:	e008      	b.n	800281c <HAL_RCC_OscConfig+0x3b8>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800280a:	f7fe fc99 	bl	8001140 <HAL_GetTick>
 800280e:	4602      	mov	r2, r0
 8002810:	69bb      	ldr	r3, [r7, #24]
 8002812:	1ad3      	subs	r3, r2, r3
 8002814:	2b02      	cmp	r3, #2
 8002816:	d901      	bls.n	800281c <HAL_RCC_OscConfig+0x3b8>
          {
            return HAL_TIMEOUT;
 8002818:	2303      	movs	r3, #3
 800281a:	e2a3      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800281c:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002824:	2b00      	cmp	r3, #0
 8002826:	d1f0      	bne.n	800280a <HAL_RCC_OscConfig+0x3a6>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 0308 	and.w	r3, r3, #8
 8002830:	2b00      	cmp	r3, #0
 8002832:	d07f      	beq.n	8002934 <HAL_RCC_OscConfig+0x4d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	695b      	ldr	r3, [r3, #20]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d05f      	beq.n	80028fc <HAL_RCC_OscConfig+0x498>
    {
#if defined(RCC_CSR_LSIPREDIV)
      uint32_t csr_temp = RCC->CSR;
 800283c:	4b59      	ldr	r3, [pc, #356]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800283e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002842:	613b      	str	r3, [r7, #16]

      /* Check LSI division factor */
      assert_param(IS_RCC_LSIDIV(RCC_OscInitStruct->LSIDiv));

      if (RCC_OscInitStruct->LSIDiv != (csr_temp & RCC_CSR_LSIPREDIV))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	699a      	ldr	r2, [r3, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	f003 0310 	and.w	r3, r3, #16
 800284e:	429a      	cmp	r2, r3
 8002850:	d037      	beq.n	80028c2 <HAL_RCC_OscConfig+0x45e>
      {
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002852:	693b      	ldr	r3, [r7, #16]
 8002854:	f003 0302 	and.w	r3, r3, #2
 8002858:	2b00      	cmp	r3, #0
 800285a:	d006      	beq.n	800286a <HAL_RCC_OscConfig+0x406>
            ((csr_temp & RCC_CSR_LSION) != RCC_CSR_LSION))
 800285c:	693b      	ldr	r3, [r7, #16]
 800285e:	f003 0301 	and.w	r3, r3, #1
        if (((csr_temp & RCC_CSR_LSIRDY) == RCC_CSR_LSIRDY) && \
 8002862:	2b00      	cmp	r3, #0
 8002864:	d101      	bne.n	800286a <HAL_RCC_OscConfig+0x406>
        {
           /* If LSIRDY is set while LSION is not enabled,
              LSIPREDIV can't be updated  */
          return HAL_ERROR;
 8002866:	2301      	movs	r3, #1
 8002868:	e27c      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        }

        /* Turn off LSI before changing RCC_CSR_LSIPREDIV */
        if ((csr_temp & RCC_CSR_LSION) == RCC_CSR_LSION)
 800286a:	693b      	ldr	r3, [r7, #16]
 800286c:	f003 0301 	and.w	r3, r3, #1
 8002870:	2b00      	cmp	r3, #0
 8002872:	d01b      	beq.n	80028ac <HAL_RCC_OscConfig+0x448>
        {
          __HAL_RCC_LSI_DISABLE();
 8002874:	4b4b      	ldr	r3, [pc, #300]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002876:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800287a:	4a4a      	ldr	r2, [pc, #296]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800287c:	f023 0301 	bic.w	r3, r3, #1
 8002880:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002884:	f7fe fc5c 	bl	8001140 <HAL_GetTick>
 8002888:	61b8      	str	r0, [r7, #24]

          /* Wait till LSI is disabled */
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800288a:	e008      	b.n	800289e <HAL_RCC_OscConfig+0x43a>
          {
            if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800288c:	f7fe fc58 	bl	8001140 <HAL_GetTick>
 8002890:	4602      	mov	r2, r0
 8002892:	69bb      	ldr	r3, [r7, #24]
 8002894:	1ad3      	subs	r3, r2, r3
 8002896:	2b11      	cmp	r3, #17
 8002898:	d901      	bls.n	800289e <HAL_RCC_OscConfig+0x43a>
            {
              return HAL_TIMEOUT;
 800289a:	2303      	movs	r3, #3
 800289c:	e262      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800289e:	4b41      	ldr	r3, [pc, #260]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028a0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028a4:	f003 0302 	and.w	r3, r3, #2
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d1ef      	bne.n	800288c <HAL_RCC_OscConfig+0x428>
            }
          }
        }

        /* Set LSI division factor */
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
 80028ac:	4b3d      	ldr	r3, [pc, #244]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028b2:	f023 0210 	bic.w	r2, r3, #16
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	699b      	ldr	r3, [r3, #24]
 80028ba:	493a      	ldr	r1, [pc, #232]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028bc:	4313      	orrs	r3, r2
 80028be:	f8c1 3094 	str.w	r3, [r1, #148]	; 0x94
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80028c2:	4b38      	ldr	r3, [pc, #224]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028c8:	4a36      	ldr	r2, [pc, #216]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028ca:	f043 0301 	orr.w	r3, r3, #1
 80028ce:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80028d2:	f7fe fc35 	bl	8001140 <HAL_GetTick>
 80028d6:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028d8:	e008      	b.n	80028ec <HAL_RCC_OscConfig+0x488>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80028da:	f7fe fc31 	bl	8001140 <HAL_GetTick>
 80028de:	4602      	mov	r2, r0
 80028e0:	69bb      	ldr	r3, [r7, #24]
 80028e2:	1ad3      	subs	r3, r2, r3
 80028e4:	2b11      	cmp	r3, #17
 80028e6:	d901      	bls.n	80028ec <HAL_RCC_OscConfig+0x488>
        {
          return HAL_TIMEOUT;
 80028e8:	2303      	movs	r3, #3
 80028ea:	e23b      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80028ec:	4b2d      	ldr	r3, [pc, #180]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80028f2:	f003 0302 	and.w	r3, r3, #2
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d0ef      	beq.n	80028da <HAL_RCC_OscConfig+0x476>
 80028fa:	e01b      	b.n	8002934 <HAL_RCC_OscConfig+0x4d0>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80028fc:	4b29      	ldr	r3, [pc, #164]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 80028fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8002902:	4a28      	ldr	r2, [pc, #160]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002904:	f023 0301 	bic.w	r3, r3, #1
 8002908:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800290c:	f7fe fc18 	bl	8001140 <HAL_GetTick>
 8002910:	61b8      	str	r0, [r7, #24]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002912:	e008      	b.n	8002926 <HAL_RCC_OscConfig+0x4c2>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002914:	f7fe fc14 	bl	8001140 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b11      	cmp	r3, #17
 8002920:	d901      	bls.n	8002926 <HAL_RCC_OscConfig+0x4c2>
        {
          return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e21e      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8002926:	4b1f      	ldr	r3, [pc, #124]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002928:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800292c:	f003 0302 	and.w	r3, r3, #2
 8002930:	2b00      	cmp	r3, #0
 8002932:	d1ef      	bne.n	8002914 <HAL_RCC_OscConfig+0x4b0>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	f003 0304 	and.w	r3, r3, #4
 800293c:	2b00      	cmp	r3, #0
 800293e:	f000 80c1 	beq.w	8002ac4 <HAL_RCC_OscConfig+0x660>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002942:	2300      	movs	r3, #0
 8002944:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8002948:	4b16      	ldr	r3, [pc, #88]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800294a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800294c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002950:	2b00      	cmp	r3, #0
 8002952:	d10e      	bne.n	8002972 <HAL_RCC_OscConfig+0x50e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002954:	4b13      	ldr	r3, [pc, #76]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002956:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002958:	4a12      	ldr	r2, [pc, #72]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 800295a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800295e:	6593      	str	r3, [r2, #88]	; 0x58
 8002960:	4b10      	ldr	r3, [pc, #64]	; (80029a4 <HAL_RCC_OscConfig+0x540>)
 8002962:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002964:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800296c:	2301      	movs	r3, #1
 800296e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002972:	4b0d      	ldr	r3, [pc, #52]	; (80029a8 <HAL_RCC_OscConfig+0x544>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800297a:	2b00      	cmp	r3, #0
 800297c:	d11c      	bne.n	80029b8 <HAL_RCC_OscConfig+0x554>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800297e:	4b0a      	ldr	r3, [pc, #40]	; (80029a8 <HAL_RCC_OscConfig+0x544>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4a09      	ldr	r2, [pc, #36]	; (80029a8 <HAL_RCC_OscConfig+0x544>)
 8002984:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002988:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800298a:	f7fe fbd9 	bl	8001140 <HAL_GetTick>
 800298e:	61b8      	str	r0, [r7, #24]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002990:	e00c      	b.n	80029ac <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002992:	f7fe fbd5 	bl	8001140 <HAL_GetTick>
 8002996:	4602      	mov	r2, r0
 8002998:	69bb      	ldr	r3, [r7, #24]
 800299a:	1ad3      	subs	r3, r2, r3
 800299c:	2b02      	cmp	r3, #2
 800299e:	d905      	bls.n	80029ac <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 80029a0:	2303      	movs	r3, #3
 80029a2:	e1df      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
 80029a4:	40021000 	.word	0x40021000
 80029a8:	40007000 	.word	0x40007000
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80029ac:	4b99      	ldr	r3, [pc, #612]	; (8002c14 <HAL_RCC_OscConfig+0x7b0>)
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d0ec      	beq.n	8002992 <HAL_RCC_OscConfig+0x52e>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
#if defined(RCC_BDCR_LSESYSDIS)
    if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEON) != 0U)
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	689b      	ldr	r3, [r3, #8]
 80029bc:	f003 0301 	and.w	r3, r3, #1
 80029c0:	2b00      	cmp	r3, #0
 80029c2:	d02c      	beq.n	8002a1e <HAL_RCC_OscConfig+0x5ba>
    {
      /* Set LSESYSDIS bit according to LSE propagation option (enabled or disabled) */
      MODIFY_REG(RCC->BDCR, RCC_BDCR_LSESYSDIS, (RCC_OscInitStruct->LSEState & RCC_BDCR_LSESYSDIS));
 80029c4:	4b94      	ldr	r3, [pc, #592]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 80029c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	689b      	ldr	r3, [r3, #8]
 80029d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029d6:	4990      	ldr	r1, [pc, #576]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 80029d8:	4313      	orrs	r3, r2
 80029da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

      if((RCC_OscInitStruct->LSEState & RCC_BDCR_LSEBYP) != 0U)
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	689b      	ldr	r3, [r3, #8]
 80029e2:	f003 0304 	and.w	r3, r3, #4
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d010      	beq.n	8002a0c <HAL_RCC_OscConfig+0x5a8>
      {
        /* LSE oscillator bypass enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 80029ea:	4b8b      	ldr	r3, [pc, #556]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 80029ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80029f0:	4a89      	ldr	r2, [pc, #548]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 80029f2:	f043 0304 	orr.w	r3, r3, #4
 80029f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 80029fa:	4b87      	ldr	r3, [pc, #540]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 80029fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a00:	4a85      	ldr	r2, [pc, #532]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a02:	f043 0301 	orr.w	r3, r3, #1
 8002a06:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a0a:	e018      	b.n	8002a3e <HAL_RCC_OscConfig+0x5da>
      }
      else
      {
        /* LSE oscillator enable */
        SET_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a0c:	4b82      	ldr	r3, [pc, #520]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a0e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a12:	4a81      	ldr	r2, [pc, #516]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a14:	f043 0301 	orr.w	r3, r3, #1
 8002a18:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8002a1c:	e00f      	b.n	8002a3e <HAL_RCC_OscConfig+0x5da>
      }
    }
    else
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
 8002a1e:	4b7e      	ldr	r3, [pc, #504]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a20:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a24:	4a7c      	ldr	r2, [pc, #496]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a26:	f023 0301 	bic.w	r3, r3, #1
 8002a2a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
 8002a2e:	4b7a      	ldr	r3, [pc, #488]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a30:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a34:	4a78      	ldr	r2, [pc, #480]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a36:	f023 0304 	bic.w	r3, r3, #4
 8002a3a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	689b      	ldr	r3, [r3, #8]
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d016      	beq.n	8002a74 <HAL_RCC_OscConfig+0x610>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a46:	f7fe fb7b 	bl	8001140 <HAL_GetTick>
 8002a4a:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a4c:	e00a      	b.n	8002a64 <HAL_RCC_OscConfig+0x600>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a4e:	f7fe fb77 	bl	8001140 <HAL_GetTick>
 8002a52:	4602      	mov	r2, r0
 8002a54:	69bb      	ldr	r3, [r7, #24]
 8002a56:	1ad3      	subs	r3, r2, r3
 8002a58:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a5c:	4293      	cmp	r3, r2
 8002a5e:	d901      	bls.n	8002a64 <HAL_RCC_OscConfig+0x600>
        {
          return HAL_TIMEOUT;
 8002a60:	2303      	movs	r3, #3
 8002a62:	e17f      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002a64:	4b6c      	ldr	r3, [pc, #432]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a6a:	f003 0302 	and.w	r3, r3, #2
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d0ed      	beq.n	8002a4e <HAL_RCC_OscConfig+0x5ea>
 8002a72:	e01d      	b.n	8002ab0 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002a74:	f7fe fb64 	bl	8001140 <HAL_GetTick>
 8002a78:	61b8      	str	r0, [r7, #24]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a7a:	e00a      	b.n	8002a92 <HAL_RCC_OscConfig+0x62e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002a7c:	f7fe fb60 	bl	8001140 <HAL_GetTick>
 8002a80:	4602      	mov	r2, r0
 8002a82:	69bb      	ldr	r3, [r7, #24]
 8002a84:	1ad3      	subs	r3, r2, r3
 8002a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d901      	bls.n	8002a92 <HAL_RCC_OscConfig+0x62e>
        {
          return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e168      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002a92:	4b61      	ldr	r3, [pc, #388]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002a94:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002a98:	f003 0302 	and.w	r3, r3, #2
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d1ed      	bne.n	8002a7c <HAL_RCC_OscConfig+0x618>
        }
      }

#if defined(RCC_BDCR_LSESYSDIS)
      /* By default, stop disabling LSE propagation */
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
 8002aa0:	4b5d      	ldr	r3, [pc, #372]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002aa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002aa6:	4a5c      	ldr	r2, [pc, #368]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002aa8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002aac:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002ab0:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8002ab4:	2b01      	cmp	r3, #1
 8002ab6:	d105      	bne.n	8002ac4 <HAL_RCC_OscConfig+0x660>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ab8:	4b57      	ldr	r3, [pc, #348]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002aba:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002abc:	4a56      	ldr	r2, [pc, #344]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002abe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002ac2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f003 0320 	and.w	r3, r3, #32
 8002acc:	2b00      	cmp	r3, #0
 8002ace:	d03c      	beq.n	8002b4a <HAL_RCC_OscConfig+0x6e6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ad4:	2b00      	cmp	r3, #0
 8002ad6:	d01c      	beq.n	8002b12 <HAL_RCC_OscConfig+0x6ae>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002ad8:	4b4f      	ldr	r3, [pc, #316]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002ada:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002ade:	4a4e      	ldr	r2, [pc, #312]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002ae0:	f043 0301 	orr.w	r3, r3, #1
 8002ae4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ae8:	f7fe fb2a 	bl	8001140 <HAL_GetTick>
 8002aec:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002aee:	e008      	b.n	8002b02 <HAL_RCC_OscConfig+0x69e>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002af0:	f7fe fb26 	bl	8001140 <HAL_GetTick>
 8002af4:	4602      	mov	r2, r0
 8002af6:	69bb      	ldr	r3, [r7, #24]
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	2b02      	cmp	r3, #2
 8002afc:	d901      	bls.n	8002b02 <HAL_RCC_OscConfig+0x69e>
        {
          return HAL_TIMEOUT;
 8002afe:	2303      	movs	r3, #3
 8002b00:	e130      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8002b02:	4b45      	ldr	r3, [pc, #276]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002b04:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b08:	f003 0302 	and.w	r3, r3, #2
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d0ef      	beq.n	8002af0 <HAL_RCC_OscConfig+0x68c>
 8002b10:	e01b      	b.n	8002b4a <HAL_RCC_OscConfig+0x6e6>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8002b12:	4b41      	ldr	r3, [pc, #260]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002b14:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b18:	4a3f      	ldr	r2, [pc, #252]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002b1a:	f023 0301 	bic.w	r3, r3, #1
 8002b1e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b22:	f7fe fb0d 	bl	8001140 <HAL_GetTick>
 8002b26:	61b8      	str	r0, [r7, #24]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b28:	e008      	b.n	8002b3c <HAL_RCC_OscConfig+0x6d8>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002b2a:	f7fe fb09 	bl	8001140 <HAL_GetTick>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	1ad3      	subs	r3, r2, r3
 8002b34:	2b02      	cmp	r3, #2
 8002b36:	d901      	bls.n	8002b3c <HAL_RCC_OscConfig+0x6d8>
        {
          return HAL_TIMEOUT;
 8002b38:	2303      	movs	r3, #3
 8002b3a:	e113      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8002b3c:	4b36      	ldr	r3, [pc, #216]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002b3e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8002b42:	f003 0302 	and.w	r3, r3, #2
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d1ef      	bne.n	8002b2a <HAL_RCC_OscConfig+0x6c6>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	f000 8107 	beq.w	8002d62 <HAL_RCC_OscConfig+0x8fe>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b58:	2b02      	cmp	r3, #2
 8002b5a:	f040 80cf 	bne.w	8002cfc <HAL_RCC_OscConfig+0x898>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8002b5e:	4b2e      	ldr	r3, [pc, #184]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	61fb      	str	r3, [r7, #28]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	f003 0203 	and.w	r2, r3, #3
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	d12c      	bne.n	8002bcc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b72:	69fb      	ldr	r3, [r7, #28]
 8002b74:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b7c:	3b01      	subs	r3, #1
 8002b7e:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b80:	429a      	cmp	r2, r3
 8002b82:	d123      	bne.n	8002bcc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b84:	69fb      	ldr	r3, [r7, #28]
 8002b86:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002b8e:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8002b90:	429a      	cmp	r2, r3
 8002b92:	d11b      	bne.n	8002bcc <HAL_RCC_OscConfig+0x768>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002b94:	69fb      	ldr	r3, [r7, #28]
 8002b96:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b9e:	06db      	lsls	r3, r3, #27
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002ba0:	429a      	cmp	r2, r3
 8002ba2:	d113      	bne.n	8002bcc <HAL_RCC_OscConfig+0x768>
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ba4:	69fb      	ldr	r3, [r7, #28]
 8002ba6:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	085b      	lsrs	r3, r3, #1
 8002bb0:	3b01      	subs	r3, #1
 8002bb2:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8002bb4:	429a      	cmp	r2, r3
 8002bb6:	d109      	bne.n	8002bcc <HAL_RCC_OscConfig+0x768>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8002bb8:	69fb      	ldr	r3, [r7, #28]
 8002bba:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bc2:	085b      	lsrs	r3, r3, #1
 8002bc4:	3b01      	subs	r3, #1
 8002bc6:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d071      	beq.n	8002cb0 <HAL_RCC_OscConfig+0x84c>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002bcc:	6a3b      	ldr	r3, [r7, #32]
 8002bce:	2b0c      	cmp	r3, #12
 8002bd0:	d06c      	beq.n	8002cac <HAL_RCC_OscConfig+0x848>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8002bd2:	4b11      	ldr	r3, [pc, #68]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d105      	bne.n	8002bea <HAL_RCC_OscConfig+0x786>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8002bde:	4b0e      	ldr	r3, [pc, #56]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_RCC_OscConfig+0x78a>
#endif
            )
          {
            return HAL_ERROR;
 8002bea:	2301      	movs	r3, #1
 8002bec:	e0ba      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8002bee:	4b0a      	ldr	r3, [pc, #40]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	4a09      	ldr	r2, [pc, #36]	; (8002c18 <HAL_RCC_OscConfig+0x7b4>)
 8002bf4:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002bf8:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002bfa:	f7fe faa1 	bl	8001140 <HAL_GetTick>
 8002bfe:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c00:	e00c      	b.n	8002c1c <HAL_RCC_OscConfig+0x7b8>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c02:	f7fe fa9d 	bl	8001140 <HAL_GetTick>
 8002c06:	4602      	mov	r2, r0
 8002c08:	69bb      	ldr	r3, [r7, #24]
 8002c0a:	1ad3      	subs	r3, r2, r3
 8002c0c:	2b02      	cmp	r3, #2
 8002c0e:	d905      	bls.n	8002c1c <HAL_RCC_OscConfig+0x7b8>
              {
                return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e0a7      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
 8002c14:	40007000 	.word	0x40007000
 8002c18:	40021000 	.word	0x40021000
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002c1c:	4b53      	ldr	r3, [pc, #332]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d1ec      	bne.n	8002c02 <HAL_RCC_OscConfig+0x79e>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002c28:	4b50      	ldr	r3, [pc, #320]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c2a:	68da      	ldr	r2, [r3, #12]
 8002c2c:	4b50      	ldr	r3, [pc, #320]	; (8002d70 <HAL_RCC_OscConfig+0x90c>)
 8002c2e:	4013      	ands	r3, r2
 8002c30:	687a      	ldr	r2, [r7, #4]
 8002c32:	6b11      	ldr	r1, [r2, #48]	; 0x30
 8002c34:	687a      	ldr	r2, [r7, #4]
 8002c36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8002c38:	3a01      	subs	r2, #1
 8002c3a:	0112      	lsls	r2, r2, #4
 8002c3c:	4311      	orrs	r1, r2
 8002c3e:	687a      	ldr	r2, [r7, #4]
 8002c40:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8002c42:	0212      	lsls	r2, r2, #8
 8002c44:	4311      	orrs	r1, r2
 8002c46:	687a      	ldr	r2, [r7, #4]
 8002c48:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8002c4a:	0852      	lsrs	r2, r2, #1
 8002c4c:	3a01      	subs	r2, #1
 8002c4e:	0552      	lsls	r2, r2, #21
 8002c50:	4311      	orrs	r1, r2
 8002c52:	687a      	ldr	r2, [r7, #4]
 8002c54:	6c52      	ldr	r2, [r2, #68]	; 0x44
 8002c56:	0852      	lsrs	r2, r2, #1
 8002c58:	3a01      	subs	r2, #1
 8002c5a:	0652      	lsls	r2, r2, #25
 8002c5c:	4311      	orrs	r1, r2
 8002c5e:	687a      	ldr	r2, [r7, #4]
 8002c60:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8002c62:	06d2      	lsls	r2, r2, #27
 8002c64:	430a      	orrs	r2, r1
 8002c66:	4941      	ldr	r1, [pc, #260]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c68:	4313      	orrs	r3, r2
 8002c6a:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8002c6c:	4b3f      	ldr	r3, [pc, #252]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a3e      	ldr	r2, [pc, #248]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c72:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c76:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002c78:	4b3c      	ldr	r3, [pc, #240]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c7a:	68db      	ldr	r3, [r3, #12]
 8002c7c:	4a3b      	ldr	r2, [pc, #236]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002c7e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002c82:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8002c84:	f7fe fa5c 	bl	8001140 <HAL_GetTick>
 8002c88:	61b8      	str	r0, [r7, #24]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c8a:	e008      	b.n	8002c9e <HAL_RCC_OscConfig+0x83a>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002c8c:	f7fe fa58 	bl	8001140 <HAL_GetTick>
 8002c90:	4602      	mov	r2, r0
 8002c92:	69bb      	ldr	r3, [r7, #24]
 8002c94:	1ad3      	subs	r3, r2, r3
 8002c96:	2b02      	cmp	r3, #2
 8002c98:	d901      	bls.n	8002c9e <HAL_RCC_OscConfig+0x83a>
              {
                return HAL_TIMEOUT;
 8002c9a:	2303      	movs	r3, #3
 8002c9c:	e062      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c9e:	4b33      	ldr	r3, [pc, #204]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002ca6:	2b00      	cmp	r3, #0
 8002ca8:	d0f0      	beq.n	8002c8c <HAL_RCC_OscConfig+0x828>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002caa:	e05a      	b.n	8002d62 <HAL_RCC_OscConfig+0x8fe>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8002cac:	2301      	movs	r3, #1
 8002cae:	e059      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cb0:	4b2e      	ldr	r3, [pc, #184]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d152      	bne.n	8002d62 <HAL_RCC_OscConfig+0x8fe>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	4a2a      	ldr	r2, [pc, #168]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cc2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cc6:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cca:	68db      	ldr	r3, [r3, #12]
 8002ccc:	4a27      	ldr	r2, [pc, #156]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cce:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002cd2:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8002cd4:	f7fe fa34 	bl	8001140 <HAL_GetTick>
 8002cd8:	61b8      	str	r0, [r7, #24]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cda:	e008      	b.n	8002cee <HAL_RCC_OscConfig+0x88a>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cdc:	f7fe fa30 	bl	8001140 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	69bb      	ldr	r3, [r7, #24]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d901      	bls.n	8002cee <HAL_RCC_OscConfig+0x88a>
            {
              return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03a      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002cee:	4b1f      	ldr	r3, [pc, #124]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d0f0      	beq.n	8002cdc <HAL_RCC_OscConfig+0x878>
 8002cfa:	e032      	b.n	8002d62 <HAL_RCC_OscConfig+0x8fe>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8002cfc:	6a3b      	ldr	r3, [r7, #32]
 8002cfe:	2b0c      	cmp	r3, #12
 8002d00:	d02d      	beq.n	8002d5e <HAL_RCC_OscConfig+0x8fa>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d02:	4b1a      	ldr	r3, [pc, #104]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	4a19      	ldr	r2, [pc, #100]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d08:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d0c:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8002d0e:	4b17      	ldr	r3, [pc, #92]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d105      	bne.n	8002d26 <HAL_RCC_OscConfig+0x8c2>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8002d1a:	4b14      	ldr	r3, [pc, #80]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d1c:	68db      	ldr	r3, [r3, #12]
 8002d1e:	4a13      	ldr	r2, [pc, #76]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d20:	f023 0303 	bic.w	r3, r3, #3
 8002d24:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8002d26:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d28:	68db      	ldr	r3, [r3, #12]
 8002d2a:	4a10      	ldr	r2, [pc, #64]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d2c:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8002d30:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d34:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d36:	f7fe fa03 	bl	8001140 <HAL_GetTick>
 8002d3a:	61b8      	str	r0, [r7, #24]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d3c:	e008      	b.n	8002d50 <HAL_RCC_OscConfig+0x8ec>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d3e:	f7fe f9ff 	bl	8001140 <HAL_GetTick>
 8002d42:	4602      	mov	r2, r0
 8002d44:	69bb      	ldr	r3, [r7, #24]
 8002d46:	1ad3      	subs	r3, r2, r3
 8002d48:	2b02      	cmp	r3, #2
 8002d4a:	d901      	bls.n	8002d50 <HAL_RCC_OscConfig+0x8ec>
          {
            return HAL_TIMEOUT;
 8002d4c:	2303      	movs	r3, #3
 8002d4e:	e009      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002d50:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <HAL_RCC_OscConfig+0x908>)
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d1f0      	bne.n	8002d3e <HAL_RCC_OscConfig+0x8da>
 8002d5c:	e001      	b.n	8002d62 <HAL_RCC_OscConfig+0x8fe>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e000      	b.n	8002d64 <HAL_RCC_OscConfig+0x900>
      }
    }
  }
  return HAL_OK;
 8002d62:	2300      	movs	r3, #0
}
 8002d64:	4618      	mov	r0, r3
 8002d66:	3728      	adds	r7, #40	; 0x28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd80      	pop	{r7, pc}
 8002d6c:	40021000 	.word	0x40021000
 8002d70:	019d800c 	.word	0x019d800c

08002d74 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002d74:	b580      	push	{r7, lr}
 8002d76:	b086      	sub	sp, #24
 8002d78:	af00      	add	r7, sp, #0
 8002d7a:	6078      	str	r0, [r7, #4]
 8002d7c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8002d7e:	2300      	movs	r3, #0
 8002d80:	617b      	str	r3, [r7, #20]
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d101      	bne.n	8002d8c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e10f      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002d8c:	4b89      	ldr	r3, [pc, #548]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f003 030f 	and.w	r3, r3, #15
 8002d94:	683a      	ldr	r2, [r7, #0]
 8002d96:	429a      	cmp	r2, r3
 8002d98:	d910      	bls.n	8002dbc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d9a:	4b86      	ldr	r3, [pc, #536]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f023 020f 	bic.w	r2, r3, #15
 8002da2:	4984      	ldr	r1, [pc, #528]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002daa:	4b82      	ldr	r3, [pc, #520]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	f003 030f 	and.w	r3, r3, #15
 8002db2:	683a      	ldr	r2, [r7, #0]
 8002db4:	429a      	cmp	r2, r3
 8002db6:	d001      	beq.n	8002dbc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e0f7      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	f003 0301 	and.w	r3, r3, #1
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	f000 8089 	beq.w	8002edc <HAL_RCC_ClockConfig+0x168>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	2b03      	cmp	r3, #3
 8002dd0:	d133      	bne.n	8002e3a <HAL_RCC_ClockConfig+0xc6>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002dd2:	4b79      	ldr	r3, [pc, #484]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d101      	bne.n	8002de2 <HAL_RCC_ClockConfig+0x6e>
      {
        return HAL_ERROR;
 8002dde:	2301      	movs	r3, #1
 8002de0:	e0e4      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      if(RCC_GetSysClockFreqFromPLLSource() > 80000000U)
 8002de2:	f000 fa0f 	bl	8003204 <RCC_GetSysClockFreqFromPLLSource>
 8002de6:	4602      	mov	r2, r0
 8002de8:	4b74      	ldr	r3, [pc, #464]	; (8002fbc <HAL_RCC_ClockConfig+0x248>)
 8002dea:	429a      	cmp	r2, r3
 8002dec:	d955      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x126>
      {
        if(READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8002dee:	4b72      	ldr	r3, [pc, #456]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002df0:	689b      	ldr	r3, [r3, #8]
 8002df2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d10a      	bne.n	8002e10 <HAL_RCC_ClockConfig+0x9c>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002dfa:	4b6f      	ldr	r3, [pc, #444]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002dfc:	689b      	ldr	r3, [r3, #8]
 8002dfe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e02:	4a6d      	ldr	r2, [pc, #436]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e08:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e0a:	2380      	movs	r3, #128	; 0x80
 8002e0c:	617b      	str	r3, [r7, #20]
 8002e0e:	e044      	b.n	8002e9a <HAL_RCC_ClockConfig+0x126>
        }
        else if((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) && (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0302 	and.w	r3, r3, #2
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d03e      	beq.n	8002e9a <HAL_RCC_ClockConfig+0x126>
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d13a      	bne.n	8002e9a <HAL_RCC_ClockConfig+0x126>
        {
          /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e24:	4b64      	ldr	r3, [pc, #400]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e26:	689b      	ldr	r3, [r3, #8]
 8002e28:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e2c:	4a62      	ldr	r2, [pc, #392]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e2e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e32:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8002e34:	2380      	movs	r3, #128	; 0x80
 8002e36:	617b      	str	r3, [r7, #20]
 8002e38:	e02f      	b.n	8002e9a <HAL_RCC_ClockConfig+0x126>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	685b      	ldr	r3, [r3, #4]
 8002e3e:	2b02      	cmp	r3, #2
 8002e40:	d107      	bne.n	8002e52 <HAL_RCC_ClockConfig+0xde>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002e42:	4b5d      	ldr	r3, [pc, #372]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e4a:	2b00      	cmp	r3, #0
 8002e4c:	d115      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e4e:	2301      	movs	r3, #1
 8002e50:	e0ac      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	685b      	ldr	r3, [r3, #4]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d107      	bne.n	8002e6a <HAL_RCC_ClockConfig+0xf6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8002e5a:	4b57      	ldr	r3, [pc, #348]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d109      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e66:	2301      	movs	r3, #1
 8002e68:	e0a0      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002e6a:	4b53      	ldr	r3, [pc, #332]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d101      	bne.n	8002e7a <HAL_RCC_ClockConfig+0x106>
        {
          return HAL_ERROR;
 8002e76:	2301      	movs	r3, #1
 8002e78:	e098      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
        }
      }
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      if(HAL_RCC_GetSysClockFreq() > 80000000U)
 8002e7a:	f000 f8a7 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	4b4e      	ldr	r3, [pc, #312]	; (8002fbc <HAL_RCC_ClockConfig+0x248>)
 8002e82:	429a      	cmp	r2, r3
 8002e84:	d909      	bls.n	8002e9a <HAL_RCC_ClockConfig+0x126>
      {
        /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8002e86:	4b4c      	ldr	r3, [pc, #304]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e8e:	4a4a      	ldr	r2, [pc, #296]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e90:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002e94:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8002e96:	2380      	movs	r3, #128	; 0x80
 8002e98:	617b      	str	r3, [r7, #20]
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002e9a:	4b47      	ldr	r3, [pc, #284]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002e9c:	689b      	ldr	r3, [r3, #8]
 8002e9e:	f023 0203 	bic.w	r2, r3, #3
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	685b      	ldr	r3, [r3, #4]
 8002ea6:	4944      	ldr	r1, [pc, #272]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002eac:	f7fe f948 	bl	8001140 <HAL_GetTick>
 8002eb0:	6138      	str	r0, [r7, #16]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eb2:	e00a      	b.n	8002eca <HAL_RCC_ClockConfig+0x156>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002eb4:	f7fe f944 	bl	8001140 <HAL_GetTick>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	1ad3      	subs	r3, r2, r3
 8002ebe:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ec2:	4293      	cmp	r3, r2
 8002ec4:	d901      	bls.n	8002eca <HAL_RCC_ClockConfig+0x156>
      {
        return HAL_TIMEOUT;
 8002ec6:	2303      	movs	r3, #3
 8002ec8:	e070      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002eca:	4b3b      	ldr	r3, [pc, #236]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 020c 	and.w	r2, r3, #12
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	685b      	ldr	r3, [r3, #4]
 8002ed6:	009b      	lsls	r3, r3, #2
 8002ed8:	429a      	cmp	r2, r3
 8002eda:	d1eb      	bne.n	8002eb4 <HAL_RCC_ClockConfig+0x140>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f003 0302 	and.w	r3, r3, #2
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d009      	beq.n	8002efc <HAL_RCC_ClockConfig+0x188>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002ee8:	4b33      	ldr	r3, [pc, #204]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	689b      	ldr	r3, [r3, #8]
 8002ef4:	4930      	ldr	r1, [pc, #192]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002ef6:	4313      	orrs	r3, r2
 8002ef8:	608b      	str	r3, [r1, #8]
 8002efa:	e008      	b.n	8002f0e <HAL_RCC_ClockConfig+0x19a>
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	2b80      	cmp	r3, #128	; 0x80
 8002f00:	d105      	bne.n	8002f0e <HAL_RCC_ClockConfig+0x19a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8002f02:	4b2d      	ldr	r3, [pc, #180]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f04:	689b      	ldr	r3, [r3, #8]
 8002f06:	4a2c      	ldr	r2, [pc, #176]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f08:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f0c:	6093      	str	r3, [r2, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f0e:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	f003 030f 	and.w	r3, r3, #15
 8002f16:	683a      	ldr	r2, [r7, #0]
 8002f18:	429a      	cmp	r2, r3
 8002f1a:	d210      	bcs.n	8002f3e <HAL_RCC_ClockConfig+0x1ca>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1c:	4b25      	ldr	r3, [pc, #148]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	f023 020f 	bic.w	r2, r3, #15
 8002f24:	4923      	ldr	r1, [pc, #140]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f26:	683b      	ldr	r3, [r7, #0]
 8002f28:	4313      	orrs	r3, r2
 8002f2a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2c:	4b21      	ldr	r3, [pc, #132]	; (8002fb4 <HAL_RCC_ClockConfig+0x240>)
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	f003 030f 	and.w	r3, r3, #15
 8002f34:	683a      	ldr	r2, [r7, #0]
 8002f36:	429a      	cmp	r2, r3
 8002f38:	d001      	beq.n	8002f3e <HAL_RCC_ClockConfig+0x1ca>
    {
      return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e036      	b.n	8002fac <HAL_RCC_ClockConfig+0x238>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 0304 	and.w	r3, r3, #4
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d008      	beq.n	8002f5c <HAL_RCC_ClockConfig+0x1e8>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4a:	4b1b      	ldr	r3, [pc, #108]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f4c:	689b      	ldr	r3, [r3, #8]
 8002f4e:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	68db      	ldr	r3, [r3, #12]
 8002f56:	4918      	ldr	r1, [pc, #96]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 0308 	and.w	r3, r3, #8
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d009      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002f68:	4b13      	ldr	r3, [pc, #76]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f6a:	689b      	ldr	r3, [r3, #8]
 8002f6c:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	691b      	ldr	r3, [r3, #16]
 8002f74:	00db      	lsls	r3, r3, #3
 8002f76:	4910      	ldr	r1, [pc, #64]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f78:	4313      	orrs	r3, r2
 8002f7a:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8002f7c:	f000 f826 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8002f80:	4601      	mov	r1, r0
 8002f82:	4b0d      	ldr	r3, [pc, #52]	; (8002fb8 <HAL_RCC_ClockConfig+0x244>)
 8002f84:	689b      	ldr	r3, [r3, #8]
 8002f86:	091b      	lsrs	r3, r3, #4
 8002f88:	f003 030f 	and.w	r3, r3, #15
 8002f8c:	4a0c      	ldr	r2, [pc, #48]	; (8002fc0 <HAL_RCC_ClockConfig+0x24c>)
 8002f8e:	5cd3      	ldrb	r3, [r2, r3]
 8002f90:	f003 031f 	and.w	r3, r3, #31
 8002f94:	fa21 f303 	lsr.w	r3, r1, r3
 8002f98:	4a0a      	ldr	r2, [pc, #40]	; (8002fc4 <HAL_RCC_ClockConfig+0x250>)
 8002f9a:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8002f9c:	4b0a      	ldr	r3, [pc, #40]	; (8002fc8 <HAL_RCC_ClockConfig+0x254>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7fe f881 	bl	80010a8 <HAL_InitTick>
 8002fa6:	4603      	mov	r3, r0
 8002fa8:	73fb      	strb	r3, [r7, #15]

  return status;
 8002faa:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fac:	4618      	mov	r0, r3
 8002fae:	3718      	adds	r7, #24
 8002fb0:	46bd      	mov	sp, r7
 8002fb2:	bd80      	pop	{r7, pc}
 8002fb4:	40022000 	.word	0x40022000
 8002fb8:	40021000 	.word	0x40021000
 8002fbc:	04c4b400 	.word	0x04c4b400
 8002fc0:	0801749c 	.word	0x0801749c
 8002fc4:	20000000 	.word	0x20000000
 8002fc8:	20000004 	.word	0x20000004

08002fcc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fcc:	b480      	push	{r7}
 8002fce:	b089      	sub	sp, #36	; 0x24
 8002fd0:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	61fb      	str	r3, [r7, #28]
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8002fda:	4b3d      	ldr	r3, [pc, #244]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	f003 030c 	and.w	r3, r3, #12
 8002fe2:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8002fe4:	4b3a      	ldr	r3, [pc, #232]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8002fe6:	68db      	ldr	r3, [r3, #12]
 8002fe8:	f003 0303 	and.w	r3, r3, #3
 8002fec:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	2b00      	cmp	r3, #0
 8002ff2:	d005      	beq.n	8003000 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b0c      	cmp	r3, #12
 8002ff8:	d121      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b01      	cmp	r3, #1
 8002ffe:	d11e      	bne.n	800303e <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8003000:	4b33      	ldr	r3, [pc, #204]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	f003 0308 	and.w	r3, r3, #8
 8003008:	2b00      	cmp	r3, #0
 800300a:	d107      	bne.n	800301c <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 800300c:	4b30      	ldr	r3, [pc, #192]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800300e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003012:	0a1b      	lsrs	r3, r3, #8
 8003014:	f003 030f 	and.w	r3, r3, #15
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e005      	b.n	8003028 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 800301c:	4b2c      	ldr	r3, [pc, #176]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	091b      	lsrs	r3, r3, #4
 8003022:	f003 030f 	and.w	r3, r3, #15
 8003026:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003028:	4a2a      	ldr	r2, [pc, #168]	; (80030d4 <HAL_RCC_GetSysClockFreq+0x108>)
 800302a:	69fb      	ldr	r3, [r7, #28]
 800302c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003030:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003032:	693b      	ldr	r3, [r7, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d10d      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8003038:	69fb      	ldr	r3, [r7, #28]
 800303a:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 800303c:	e00a      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	2b04      	cmp	r3, #4
 8003042:	d102      	bne.n	800304a <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003044:	4b24      	ldr	r3, [pc, #144]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003046:	61bb      	str	r3, [r7, #24]
 8003048:	e004      	b.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 800304a:	693b      	ldr	r3, [r7, #16]
 800304c:	2b08      	cmp	r3, #8
 800304e:	d101      	bne.n	8003054 <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003050:	4b22      	ldr	r3, [pc, #136]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003052:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	2b0c      	cmp	r3, #12
 8003058:	d133      	bne.n	80030c2 <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800305a:	4b1d      	ldr	r3, [pc, #116]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 800305c:	68db      	ldr	r3, [r3, #12]
 800305e:	f003 0303 	and.w	r3, r3, #3
 8003062:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003064:	68bb      	ldr	r3, [r7, #8]
 8003066:	2b02      	cmp	r3, #2
 8003068:	d002      	beq.n	8003070 <HAL_RCC_GetSysClockFreq+0xa4>
 800306a:	2b03      	cmp	r3, #3
 800306c:	d003      	beq.n	8003076 <HAL_RCC_GetSysClockFreq+0xaa>
 800306e:	e005      	b.n	800307c <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8003070:	4b19      	ldr	r3, [pc, #100]	; (80030d8 <HAL_RCC_GetSysClockFreq+0x10c>)
 8003072:	617b      	str	r3, [r7, #20]
      break;
 8003074:	e005      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <HAL_RCC_GetSysClockFreq+0x110>)
 8003078:	617b      	str	r3, [r7, #20]
      break;
 800307a:	e002      	b.n	8003082 <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 800307c:	69fb      	ldr	r3, [r7, #28]
 800307e:	617b      	str	r3, [r7, #20]
      break;
 8003080:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003082:	4b13      	ldr	r3, [pc, #76]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003084:	68db      	ldr	r3, [r3, #12]
 8003086:	091b      	lsrs	r3, r3, #4
 8003088:	f003 030f 	and.w	r3, r3, #15
 800308c:	3301      	adds	r3, #1
 800308e:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003090:	4b0f      	ldr	r3, [pc, #60]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	0a1b      	lsrs	r3, r3, #8
 8003096:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800309a:	697a      	ldr	r2, [r7, #20]
 800309c:	fb02 f203 	mul.w	r2, r2, r3
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80030a6:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80030a8:	4b09      	ldr	r3, [pc, #36]	; (80030d0 <HAL_RCC_GetSysClockFreq+0x104>)
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	0e5b      	lsrs	r3, r3, #25
 80030ae:	f003 0303 	and.w	r3, r3, #3
 80030b2:	3301      	adds	r3, #1
 80030b4:	005b      	lsls	r3, r3, #1
 80030b6:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 80030b8:	697a      	ldr	r2, [r7, #20]
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	fbb2 f3f3 	udiv	r3, r2, r3
 80030c0:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 80030c2:	69bb      	ldr	r3, [r7, #24]
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	3724      	adds	r7, #36	; 0x24
 80030c8:	46bd      	mov	sp, r7
 80030ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ce:	4770      	bx	lr
 80030d0:	40021000 	.word	0x40021000
 80030d4:	080174b4 	.word	0x080174b4
 80030d8:	00f42400 	.word	0x00f42400
 80030dc:	007a1200 	.word	0x007a1200

080030e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030e0:	b480      	push	{r7}
 80030e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030e4:	4b03      	ldr	r3, [pc, #12]	; (80030f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030e6:	681b      	ldr	r3, [r3, #0]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	46bd      	mov	sp, r7
 80030ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop
 80030f4:	20000000 	.word	0x20000000

080030f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80030fc:	f7ff fff0 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 8003100:	4601      	mov	r1, r0
 8003102:	4b06      	ldr	r3, [pc, #24]	; (800311c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003104:	689b      	ldr	r3, [r3, #8]
 8003106:	0a1b      	lsrs	r3, r3, #8
 8003108:	f003 0307 	and.w	r3, r3, #7
 800310c:	4a04      	ldr	r2, [pc, #16]	; (8003120 <HAL_RCC_GetPCLK1Freq+0x28>)
 800310e:	5cd3      	ldrb	r3, [r2, r3]
 8003110:	f003 031f 	and.w	r3, r3, #31
 8003114:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003118:	4618      	mov	r0, r3
 800311a:	bd80      	pop	{r7, pc}
 800311c:	40021000 	.word	0x40021000
 8003120:	080174ac 	.word	0x080174ac

08003124 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003128:	f7ff ffda 	bl	80030e0 <HAL_RCC_GetHCLKFreq>
 800312c:	4601      	mov	r1, r0
 800312e:	4b06      	ldr	r3, [pc, #24]	; (8003148 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003130:	689b      	ldr	r3, [r3, #8]
 8003132:	0adb      	lsrs	r3, r3, #11
 8003134:	f003 0307 	and.w	r3, r3, #7
 8003138:	4a04      	ldr	r2, [pc, #16]	; (800314c <HAL_RCC_GetPCLK2Freq+0x28>)
 800313a:	5cd3      	ldrb	r3, [r2, r3]
 800313c:	f003 031f 	and.w	r3, r3, #31
 8003140:	fa21 f303 	lsr.w	r3, r1, r3
}
 8003144:	4618      	mov	r0, r3
 8003146:	bd80      	pop	{r7, pc}
 8003148:	40021000 	.word	0x40021000
 800314c:	080174ac 	.word	0x080174ac

08003150 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8003150:	b580      	push	{r7, lr}
 8003152:	b086      	sub	sp, #24
 8003154:	af00      	add	r7, sp, #0
 8003156:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003158:	2300      	movs	r3, #0
 800315a:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800315c:	4b27      	ldr	r3, [pc, #156]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800315e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003160:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003164:	2b00      	cmp	r3, #0
 8003166:	d003      	beq.n	8003170 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8003168:	f7ff f898 	bl	800229c <HAL_PWREx_GetVoltageRange>
 800316c:	6178      	str	r0, [r7, #20]
 800316e:	e014      	b.n	800319a <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8003170:	4b22      	ldr	r3, [pc, #136]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003172:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003174:	4a21      	ldr	r2, [pc, #132]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003176:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800317a:	6593      	str	r3, [r2, #88]	; 0x58
 800317c:	4b1f      	ldr	r3, [pc, #124]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 800317e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003180:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003184:	60fb      	str	r3, [r7, #12]
 8003186:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8003188:	f7ff f888 	bl	800229c <HAL_PWREx_GetVoltageRange>
 800318c:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800318e:	4b1b      	ldr	r3, [pc, #108]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003190:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003192:	4a1a      	ldr	r2, [pc, #104]	; (80031fc <RCC_SetFlashLatencyFromMSIRange+0xac>)
 8003194:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003198:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 800319a:	697b      	ldr	r3, [r7, #20]
 800319c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031a0:	d10b      	bne.n	80031ba <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2b80      	cmp	r3, #128	; 0x80
 80031a6:	d913      	bls.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2ba0      	cmp	r3, #160	; 0xa0
 80031ac:	d902      	bls.n	80031b4 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80031ae:	2302      	movs	r3, #2
 80031b0:	613b      	str	r3, [r7, #16]
 80031b2:	e00d      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031b4:	2301      	movs	r3, #1
 80031b6:	613b      	str	r3, [r7, #16]
 80031b8:	e00a      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
  }
  else
  {
#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
    if(msirange >= RCC_MSIRANGE_8)
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2b7f      	cmp	r3, #127	; 0x7f
 80031be:	d902      	bls.n	80031c6 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI >= 16Mhz */
      latency = FLASH_LATENCY_2; /* 2WS */
 80031c0:	2302      	movs	r3, #2
 80031c2:	613b      	str	r3, [r7, #16]
 80031c4:	e004      	b.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_7)
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	2b70      	cmp	r3, #112	; 0x70
 80031ca:	d101      	bne.n	80031d0 <RCC_SetFlashLatencyFromMSIRange+0x80>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80031cc:	2301      	movs	r3, #1
 80031ce:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f023 020f 	bic.w	r2, r3, #15
 80031d8:	4909      	ldr	r1, [pc, #36]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80031e0:	4b07      	ldr	r3, [pc, #28]	; (8003200 <RCC_SetFlashLatencyFromMSIRange+0xb0>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f003 030f 	and.w	r3, r3, #15
 80031e8:	693a      	ldr	r2, [r7, #16]
 80031ea:	429a      	cmp	r2, r3
 80031ec:	d001      	beq.n	80031f2 <RCC_SetFlashLatencyFromMSIRange+0xa2>
  {
    return HAL_ERROR;
 80031ee:	2301      	movs	r3, #1
 80031f0:	e000      	b.n	80031f4 <RCC_SetFlashLatencyFromMSIRange+0xa4>
  }

  return HAL_OK;
 80031f2:	2300      	movs	r3, #0
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3718      	adds	r7, #24
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40021000 	.word	0x40021000
 8003200:	40022000 	.word	0x40022000

08003204 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003204:	b480      	push	{r7}
 8003206:	b087      	sub	sp, #28
 8003208:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
  uint32_t pllvco, pllsource, pllr, pllm, sysclockfreq;  /* no init needed */

  if(__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_MSI)
 800320e:	4b2d      	ldr	r3, [pc, #180]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0303 	and.w	r3, r3, #3
 8003216:	2b01      	cmp	r3, #1
 8003218:	d118      	bne.n	800324c <RCC_GetSysClockFreqFromPLLSource+0x48>
  {
    /* Get MSI range source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 800321a:	4b2a      	ldr	r3, [pc, #168]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800321c:	681b      	ldr	r3, [r3, #0]
 800321e:	f003 0308 	and.w	r3, r3, #8
 8003222:	2b00      	cmp	r3, #0
 8003224:	d107      	bne.n	8003236 <RCC_GetSysClockFreqFromPLLSource+0x32>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8003226:	4b27      	ldr	r3, [pc, #156]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003228:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 030f 	and.w	r3, r3, #15
 8003232:	617b      	str	r3, [r7, #20]
 8003234:	e005      	b.n	8003242 <RCC_GetSysClockFreqFromPLLSource+0x3e>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8003236:	4b23      	ldr	r3, [pc, #140]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	091b      	lsrs	r3, r3, #4
 800323c:	f003 030f 	and.w	r3, r3, #15
 8003240:	617b      	str	r3, [r7, #20]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8003242:	4a21      	ldr	r2, [pc, #132]	; (80032c8 <RCC_GetSysClockFreqFromPLLSource+0xc4>)
 8003244:	697b      	ldr	r3, [r7, #20]
 8003246:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800324a:	617b      	str	r3, [r7, #20]
  }

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800324c:	4b1d      	ldr	r3, [pc, #116]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	f003 0303 	and.w	r3, r3, #3
 8003254:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2b02      	cmp	r3, #2
 800325a:	d002      	beq.n	8003262 <RCC_GetSysClockFreqFromPLLSource+0x5e>
 800325c:	2b03      	cmp	r3, #3
 800325e:	d003      	beq.n	8003268 <RCC_GetSysClockFreqFromPLLSource+0x64>
 8003260:	e005      	b.n	800326e <RCC_GetSysClockFreqFromPLLSource+0x6a>
  {
  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    pllvco = HSI_VALUE;
 8003262:	4b1a      	ldr	r3, [pc, #104]	; (80032cc <RCC_GetSysClockFreqFromPLLSource+0xc8>)
 8003264:	613b      	str	r3, [r7, #16]
    break;
 8003266:	e005      	b.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = HSE_VALUE;
 8003268:	4b19      	ldr	r3, [pc, #100]	; (80032d0 <RCC_GetSysClockFreqFromPLLSource+0xcc>)
 800326a:	613b      	str	r3, [r7, #16]
    break;
 800326c:	e002      	b.n	8003274 <RCC_GetSysClockFreqFromPLLSource+0x70>

  case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
  default:
    pllvco = msirange;
 800326e:	697b      	ldr	r3, [r7, #20]
 8003270:	613b      	str	r3, [r7, #16]
    break;
 8003272:	bf00      	nop
  }
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003274:	4b13      	ldr	r3, [pc, #76]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003276:	68db      	ldr	r3, [r3, #12]
 8003278:	091b      	lsrs	r3, r3, #4
 800327a:	f003 030f 	and.w	r3, r3, #15
 800327e:	3301      	adds	r3, #1
 8003280:	60bb      	str	r3, [r7, #8]
  pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8003282:	4b10      	ldr	r3, [pc, #64]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 8003284:	68db      	ldr	r3, [r3, #12]
 8003286:	0a1b      	lsrs	r3, r3, #8
 8003288:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800328c:	693a      	ldr	r2, [r7, #16]
 800328e:	fb02 f203 	mul.w	r2, r2, r3
 8003292:	68bb      	ldr	r3, [r7, #8]
 8003294:	fbb2 f3f3 	udiv	r3, r2, r3
 8003298:	613b      	str	r3, [r7, #16]
  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800329a:	4b0a      	ldr	r3, [pc, #40]	; (80032c4 <RCC_GetSysClockFreqFromPLLSource+0xc0>)
 800329c:	68db      	ldr	r3, [r3, #12]
 800329e:	0e5b      	lsrs	r3, r3, #25
 80032a0:	f003 0303 	and.w	r3, r3, #3
 80032a4:	3301      	adds	r3, #1
 80032a6:	005b      	lsls	r3, r3, #1
 80032a8:	607b      	str	r3, [r7, #4]
  sysclockfreq = pllvco / pllr;
 80032aa:	693a      	ldr	r2, [r7, #16]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80032b2:	603b      	str	r3, [r7, #0]

  return sysclockfreq;
 80032b4:	683b      	ldr	r3, [r7, #0]
}
 80032b6:	4618      	mov	r0, r3
 80032b8:	371c      	adds	r7, #28
 80032ba:	46bd      	mov	sp, r7
 80032bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	40021000 	.word	0x40021000
 80032c8:	080174b4 	.word	0x080174b4
 80032cc:	00f42400 	.word	0x00f42400
 80032d0:	007a1200 	.word	0x007a1200

080032d4 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80032d4:	b580      	push	{r7, lr}
 80032d6:	b086      	sub	sp, #24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80032dc:	2300      	movs	r3, #0
 80032de:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80032e0:	2300      	movs	r3, #0
 80032e2:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	681b      	ldr	r3, [r3, #0]
 80032e8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d03d      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x98>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80032f4:	2b40      	cmp	r3, #64	; 0x40
 80032f6:	d00b      	beq.n	8003310 <HAL_RCCEx_PeriphCLKConfig+0x3c>
 80032f8:	2b40      	cmp	r3, #64	; 0x40
 80032fa:	d804      	bhi.n	8003306 <HAL_RCCEx_PeriphCLKConfig+0x32>
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d00e      	beq.n	800331e <HAL_RCCEx_PeriphCLKConfig+0x4a>
 8003300:	2b20      	cmp	r3, #32
 8003302:	d015      	beq.n	8003330 <HAL_RCCEx_PeriphCLKConfig+0x5c>
 8003304:	e01d      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x6e>
 8003306:	2b60      	cmp	r3, #96	; 0x60
 8003308:	d01e      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800330a:	2b80      	cmp	r3, #128	; 0x80
 800330c:	d01c      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x74>
 800330e:	e018      	b.n	8003342 <HAL_RCCEx_PeriphCLKConfig+0x6e>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8003310:	4b86      	ldr	r3, [pc, #536]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003312:	68db      	ldr	r3, [r3, #12]
 8003314:	4a85      	ldr	r2, [pc, #532]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003316:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800331a:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 800331c:	e015      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x76>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	3304      	adds	r3, #4
 8003322:	2100      	movs	r1, #0
 8003324:	4618      	mov	r0, r3
 8003326:	f000 fb49 	bl	80039bc <RCCEx_PLLSAI1_Config>
 800332a:	4603      	mov	r3, r0
 800332c:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 800332e:	e00c      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x76>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	3320      	adds	r3, #32
 8003334:	2100      	movs	r1, #0
 8003336:	4618      	mov	r0, r3
 8003338:	f000 fc30 	bl	8003b9c <RCCEx_PLLSAI2_Config>
 800333c:	4603      	mov	r3, r0
 800333e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8003340:	e003      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x76>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8003342:	2301      	movs	r3, #1
 8003344:	74fb      	strb	r3, [r7, #19]
      break;
 8003346:	e000      	b.n	800334a <HAL_RCCEx_PeriphCLKConfig+0x76>
      break;
 8003348:	bf00      	nop
    }

    if(ret == HAL_OK)
 800334a:	7cfb      	ldrb	r3, [r7, #19]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d10b      	bne.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0x94>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003350:	4b76      	ldr	r3, [pc, #472]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003352:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003356:	f023 02e0 	bic.w	r2, r3, #224	; 0xe0
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800335e:	4973      	ldr	r1, [pc, #460]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003360:	4313      	orrs	r3, r2
 8003362:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 8003366:	e001      	b.n	800336c <HAL_RCCEx_PeriphCLKConfig+0x98>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003368:	7cfb      	ldrb	r3, [r7, #19]
 800336a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003374:	2b00      	cmp	r3, #0
 8003376:	d042      	beq.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003380:	d00f      	beq.n	80033a2 <HAL_RCCEx_PeriphCLKConfig+0xce>
 8003382:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003386:	d805      	bhi.n	8003394 <HAL_RCCEx_PeriphCLKConfig+0xc0>
 8003388:	2b00      	cmp	r3, #0
 800338a:	d011      	beq.n	80033b0 <HAL_RCCEx_PeriphCLKConfig+0xdc>
 800338c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003390:	d017      	beq.n	80033c2 <HAL_RCCEx_PeriphCLKConfig+0xee>
 8003392:	e01f      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
 8003394:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003398:	d01f      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x106>
 800339a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800339e:	d01c      	beq.n	80033da <HAL_RCCEx_PeriphCLKConfig+0x106>
 80033a0:	e018      	b.n	80033d4 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80033a2:	4b62      	ldr	r3, [pc, #392]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a4:	68db      	ldr	r3, [r3, #12]
 80033a6:	4a61      	ldr	r2, [pc, #388]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033ac:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033ae:	e015      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	3304      	adds	r3, #4
 80033b4:	2100      	movs	r1, #0
 80033b6:	4618      	mov	r0, r3
 80033b8:	f000 fb00 	bl	80039bc <RCCEx_PLLSAI1_Config>
 80033bc:	4603      	mov	r3, r0
 80033be:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033c0:	e00c      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	3320      	adds	r3, #32
 80033c6:	2100      	movs	r1, #0
 80033c8:	4618      	mov	r0, r3
 80033ca:	f000 fbe7 	bl	8003b9c <RCCEx_PLLSAI2_Config>
 80033ce:	4603      	mov	r3, r0
 80033d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80033d2:	e003      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80033d4:	2301      	movs	r3, #1
 80033d6:	74fb      	strb	r3, [r7, #19]
      break;
 80033d8:	e000      	b.n	80033dc <HAL_RCCEx_PeriphCLKConfig+0x108>
      break;
 80033da:	bf00      	nop
    }

    if(ret == HAL_OK)
 80033dc:	7cfb      	ldrb	r3, [r7, #19]
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d10b      	bne.n	80033fa <HAL_RCCEx_PeriphCLKConfig+0x126>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80033e2:	4b52      	ldr	r3, [pc, #328]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033e4:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80033e8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033f0:	494e      	ldr	r1, [pc, #312]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
 80033f8:	e001      	b.n	80033fe <HAL_RCCEx_PeriphCLKConfig+0x12a>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80033fa:	7cfb      	ldrb	r3, [r7, #19]
 80033fc:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003406:	2b00      	cmp	r3, #0
 8003408:	f000 809f 	beq.w	800354a <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800340c:	2300      	movs	r3, #0
 800340e:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003410:	4b46      	ldr	r3, [pc, #280]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003414:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003418:	2b00      	cmp	r3, #0
 800341a:	d101      	bne.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 800341c:	2301      	movs	r3, #1
 800341e:	e000      	b.n	8003422 <HAL_RCCEx_PeriphCLKConfig+0x14e>
 8003420:	2300      	movs	r3, #0
 8003422:	2b00      	cmp	r3, #0
 8003424:	d00d      	beq.n	8003442 <HAL_RCCEx_PeriphCLKConfig+0x16e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003426:	4b41      	ldr	r3, [pc, #260]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800342a:	4a40      	ldr	r2, [pc, #256]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800342c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003430:	6593      	str	r3, [r2, #88]	; 0x58
 8003432:	4b3e      	ldr	r3, [pc, #248]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8003434:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003436:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800343a:	60bb      	str	r3, [r7, #8]
 800343c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800343e:	2301      	movs	r3, #1
 8003440:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003442:	4b3b      	ldr	r3, [pc, #236]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	4a3a      	ldr	r2, [pc, #232]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8003448:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800344c:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800344e:	f7fd fe77 	bl	8001140 <HAL_GetTick>
 8003452:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8003454:	e009      	b.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003456:	f7fd fe73 	bl	8001140 <HAL_GetTick>
 800345a:	4602      	mov	r2, r0
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	1ad3      	subs	r3, r2, r3
 8003460:	2b02      	cmp	r3, #2
 8003462:	d902      	bls.n	800346a <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        ret = HAL_TIMEOUT;
 8003464:	2303      	movs	r3, #3
 8003466:	74fb      	strb	r3, [r7, #19]
        break;
 8003468:	e005      	b.n	8003476 <HAL_RCCEx_PeriphCLKConfig+0x1a2>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800346a:	4b31      	ldr	r3, [pc, #196]	; (8003530 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0ef      	beq.n	8003456 <HAL_RCCEx_PeriphCLKConfig+0x182>
      }
    }

    if(ret == HAL_OK)
 8003476:	7cfb      	ldrb	r3, [r7, #19]
 8003478:	2b00      	cmp	r3, #0
 800347a:	d15b      	bne.n	8003534 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800347c:	4b2b      	ldr	r3, [pc, #172]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800347e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003482:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003486:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003488:	697b      	ldr	r3, [r7, #20]
 800348a:	2b00      	cmp	r3, #0
 800348c:	d01f      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003494:	697a      	ldr	r2, [r7, #20]
 8003496:	429a      	cmp	r2, r3
 8003498:	d019      	beq.n	80034ce <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 800349a:	4b24      	ldr	r3, [pc, #144]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800349c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80034a4:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80034a6:	4b21      	ldr	r3, [pc, #132]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034ac:	4a1f      	ldr	r2, [pc, #124]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034ae:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80034b2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80034b6:	4b1d      	ldr	r3, [pc, #116]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034bc:	4a1b      	ldr	r2, [pc, #108]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80034c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80034c6:	4a19      	ldr	r2, [pc, #100]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034c8:	697b      	ldr	r3, [r7, #20]
 80034ca:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80034ce:	697b      	ldr	r3, [r7, #20]
 80034d0:	f003 0301 	and.w	r3, r3, #1
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d016      	beq.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x232>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80034d8:	f7fd fe32 	bl	8001140 <HAL_GetTick>
 80034dc:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034de:	e00b      	b.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80034e0:	f7fd fe2e 	bl	8001140 <HAL_GetTick>
 80034e4:	4602      	mov	r2, r0
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1ad3      	subs	r3, r2, r3
 80034ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80034ee:	4293      	cmp	r3, r2
 80034f0:	d902      	bls.n	80034f8 <HAL_RCCEx_PeriphCLKConfig+0x224>
          {
            ret = HAL_TIMEOUT;
 80034f2:	2303      	movs	r3, #3
 80034f4:	74fb      	strb	r3, [r7, #19]
            break;
 80034f6:	e006      	b.n	8003506 <HAL_RCCEx_PeriphCLKConfig+0x232>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80034f8:	4b0c      	ldr	r3, [pc, #48]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80034fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fe:	f003 0302 	and.w	r3, r3, #2
 8003502:	2b00      	cmp	r3, #0
 8003504:	d0ec      	beq.n	80034e0 <HAL_RCCEx_PeriphCLKConfig+0x20c>
          }
        }
      }

      if(ret == HAL_OK)
 8003506:	7cfb      	ldrb	r3, [r7, #19]
 8003508:	2b00      	cmp	r3, #0
 800350a:	d10c      	bne.n	8003526 <HAL_RCCEx_PeriphCLKConfig+0x252>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800350c:	4b07      	ldr	r3, [pc, #28]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800350e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003512:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800351c:	4903      	ldr	r1, [pc, #12]	; (800352c <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800351e:	4313      	orrs	r3, r2
 8003520:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003524:	e008      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003526:	7cfb      	ldrb	r3, [r7, #19]
 8003528:	74bb      	strb	r3, [r7, #18]
 800352a:	e005      	b.n	8003538 <HAL_RCCEx_PeriphCLKConfig+0x264>
 800352c:	40021000 	.word	0x40021000
 8003530:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003534:	7cfb      	ldrb	r3, [r7, #19]
 8003536:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003538:	7c7b      	ldrb	r3, [r7, #17]
 800353a:	2b01      	cmp	r3, #1
 800353c:	d105      	bne.n	800354a <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800353e:	4ba0      	ldr	r3, [pc, #640]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003540:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003542:	4a9f      	ldr	r2, [pc, #636]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003544:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003548:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	681b      	ldr	r3, [r3, #0]
 800354e:	f003 0301 	and.w	r3, r3, #1
 8003552:	2b00      	cmp	r3, #0
 8003554:	d00a      	beq.n	800356c <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003556:	4b9a      	ldr	r3, [pc, #616]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003558:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800355c:	f023 0203 	bic.w	r2, r3, #3
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003564:	4996      	ldr	r1, [pc, #600]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003566:	4313      	orrs	r3, r2
 8003568:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0302 	and.w	r3, r3, #2
 8003574:	2b00      	cmp	r3, #0
 8003576:	d00a      	beq.n	800358e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003578:	4b91      	ldr	r3, [pc, #580]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800357a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800357e:	f023 020c 	bic.w	r2, r3, #12
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	498e      	ldr	r1, [pc, #568]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003588:	4313      	orrs	r3, r2
 800358a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 0304 	and.w	r3, r3, #4
 8003596:	2b00      	cmp	r3, #0
 8003598:	d00a      	beq.n	80035b0 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800359a:	4b89      	ldr	r3, [pc, #548]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800359c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035a0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035a8:	4985      	ldr	r1, [pc, #532]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035aa:	4313      	orrs	r3, r2
 80035ac:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	f003 0308 	and.w	r3, r3, #8
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d00a      	beq.n	80035d2 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80035bc:	4b80      	ldr	r3, [pc, #512]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035c2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80035ca:	497d      	ldr	r1, [pc, #500]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035cc:	4313      	orrs	r3, r2
 80035ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0310 	and.w	r3, r3, #16
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d00a      	beq.n	80035f4 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80035de:	4b78      	ldr	r3, [pc, #480]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80035e4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80035ec:	4974      	ldr	r1, [pc, #464]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80035ee:	4313      	orrs	r3, r2
 80035f0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f003 0320 	and.w	r3, r3, #32
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d00a      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003600:	4b6f      	ldr	r3, [pc, #444]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003606:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800360e:	496c      	ldr	r1, [pc, #432]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003610:	4313      	orrs	r3, r2
 8003612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800361e:	2b00      	cmp	r3, #0
 8003620:	d00a      	beq.n	8003638 <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003622:	4b67      	ldr	r3, [pc, #412]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003624:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003628:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003630:	4963      	ldr	r1, [pc, #396]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003640:	2b00      	cmp	r3, #0
 8003642:	d00a      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003644:	4b5e      	ldr	r3, [pc, #376]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003646:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800364a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8003652:	495b      	ldr	r1, [pc, #364]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003654:	4313      	orrs	r3, r2
 8003656:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003666:	4b56      	ldr	r3, [pc, #344]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800366c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003674:	4952      	ldr	r1, [pc, #328]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00a      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003688:	4b4d      	ldr	r3, [pc, #308]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800368a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800368e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003696:	494a      	ldr	r1, [pc, #296]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003698:	4313      	orrs	r3, r2
 800369a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d00a      	beq.n	80036c0 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80036aa:	4b45      	ldr	r3, [pc, #276]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036b0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036b8:	4941      	ldr	r1, [pc, #260]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d00a      	beq.n	80036e2 <HAL_RCCEx_PeriphCLKConfig+0x40e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80036cc:	4b3c      	ldr	r3, [pc, #240]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036ce:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80036d2:	f023 0203 	bic.w	r2, r3, #3
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80036da:	4939      	ldr	r1, [pc, #228]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036dc:	4313      	orrs	r3, r2
 80036de:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	681b      	ldr	r3, [r3, #0]
 80036e6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d028      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x46c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80036ee:	4b34      	ldr	r3, [pc, #208]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80036f4:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80036fc:	4930      	ldr	r1, [pc, #192]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80036fe:	4313      	orrs	r3, r2
 8003700:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003708:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800370c:	d106      	bne.n	800371c <HAL_RCCEx_PeriphCLKConfig+0x448>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800370e:	4b2c      	ldr	r3, [pc, #176]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	4a2b      	ldr	r2, [pc, #172]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003714:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003718:	60d3      	str	r3, [r2, #12]
 800371a:	e011      	b.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x46c>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003720:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8003724:	d10c      	bne.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x46c>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	3304      	adds	r3, #4
 800372a:	2101      	movs	r1, #1
 800372c:	4618      	mov	r0, r3
 800372e:	f000 f945 	bl	80039bc <RCCEx_PLLSAI1_Config>
 8003732:	4603      	mov	r3, r0
 8003734:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8003736:	7cfb      	ldrb	r3, [r7, #19]
 8003738:	2b00      	cmp	r3, #0
 800373a:	d001      	beq.n	8003740 <HAL_RCCEx_PeriphCLKConfig+0x46c>
        {
          /* set overall return value */
          status = ret;
 800373c:	7cfb      	ldrb	r3, [r7, #19]
 800373e:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003748:	2b00      	cmp	r3, #0
 800374a:	d04d      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003750:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003754:	d108      	bne.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x494>
 8003756:	4b1a      	ldr	r3, [pc, #104]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003758:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800375c:	4a18      	ldr	r2, [pc, #96]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800375e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003762:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003766:	e012      	b.n	800378e <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8003768:	4b15      	ldr	r3, [pc, #84]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800376a:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 800376e:	4a14      	ldr	r2, [pc, #80]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003770:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003774:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
 8003778:	4b11      	ldr	r3, [pc, #68]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800377a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800377e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003786:	490e      	ldr	r1, [pc, #56]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8003788:	4313      	orrs	r3, r2
 800378a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003792:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003796:	d106      	bne.n	80037a6 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003798:	4b09      	ldr	r3, [pc, #36]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379a:	68db      	ldr	r3, [r3, #12]
 800379c:	4a08      	ldr	r2, [pc, #32]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800379e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80037a2:	60d3      	str	r3, [r2, #12]
 80037a4:	e020      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    }
#if defined(RCC_CCIPR2_SDMMCSEL)
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLP) /* PLL "P" ? */
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037aa:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80037ae:	d109      	bne.n	80037c4 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	4a02      	ldr	r2, [pc, #8]	; (80037c0 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80037b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80037ba:	60d3      	str	r3, [r2, #12]
 80037bc:	e014      	b.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
 80037be:	bf00      	nop
 80037c0:	40021000 	.word	0x40021000
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80037c8:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80037cc:	d10c      	bne.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	3304      	adds	r3, #4
 80037d2:	2101      	movs	r1, #1
 80037d4:	4618      	mov	r0, r3
 80037d6:	f000 f8f1 	bl	80039bc <RCCEx_PLLSAI1_Config>
 80037da:	4603      	mov	r3, r0
 80037dc:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80037de:	7cfb      	ldrb	r3, [r7, #19]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d001      	beq.n	80037e8 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80037e4:	7cfb      	ldrb	r3, [r7, #19]
 80037e6:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d028      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x572>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80037f4:	4b68      	ldr	r3, [pc, #416]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80037f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80037fa:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003802:	4965      	ldr	r1, [pc, #404]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003804:	4313      	orrs	r3, r2
 8003806:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800380e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003812:	d106      	bne.n	8003822 <HAL_RCCEx_PeriphCLKConfig+0x54e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003814:	4b60      	ldr	r3, [pc, #384]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003816:	68db      	ldr	r3, [r3, #12]
 8003818:	4a5f      	ldr	r2, [pc, #380]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800381a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800381e:	60d3      	str	r3, [r2, #12]
 8003820:	e011      	b.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x572>
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003826:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800382a:	d10c      	bne.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x572>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	3304      	adds	r3, #4
 8003830:	2101      	movs	r1, #1
 8003832:	4618      	mov	r0, r3
 8003834:	f000 f8c2 	bl	80039bc <RCCEx_PLLSAI1_Config>
 8003838:	4603      	mov	r3, r0
 800383a:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 800383c:	7cfb      	ldrb	r3, [r7, #19]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d001      	beq.n	8003846 <HAL_RCCEx_PeriphCLKConfig+0x572>
      {
        /* set overall return value */
        status = ret;
 8003842:	7cfb      	ldrb	r3, [r7, #19]
 8003844:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800384e:	2b00      	cmp	r3, #0
 8003850:	d01e      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003852:	4b51      	ldr	r3, [pc, #324]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003854:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003858:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003862:	494d      	ldr	r1, [pc, #308]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003864:	4313      	orrs	r3, r2
 8003866:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003870:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003874:	d10c      	bne.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	3304      	adds	r3, #4
 800387a:	2102      	movs	r1, #2
 800387c:	4618      	mov	r0, r3
 800387e:	f000 f89d 	bl	80039bc <RCCEx_PLLSAI1_Config>
 8003882:	4603      	mov	r3, r0
 8003884:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8003886:	7cfb      	ldrb	r3, [r7, #19]
 8003888:	2b00      	cmp	r3, #0
 800388a:	d001      	beq.n	8003890 <HAL_RCCEx_PeriphCLKConfig+0x5bc>
      {
        /* set overall return value */
        status = ret;
 800388c:	7cfb      	ldrb	r3, [r7, #19]
 800388e:	74bb      	strb	r3, [r7, #18]
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003898:	2b00      	cmp	r3, #0
 800389a:	d00b      	beq.n	80038b4 <HAL_RCCEx_PeriphCLKConfig+0x5e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800389c:	4b3e      	ldr	r3, [pc, #248]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800389e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038a2:	f023 0204 	bic.w	r2, r3, #4
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80038ac:	493a      	ldr	r1, [pc, #232]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038ae:	4313      	orrs	r3, r2
 80038b0:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#if defined(STM32L4P5xx) || defined(STM32L4Q5xx) || defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx)
  /*-------------------------- DFSDM1 audio clock source configuration -------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1AUDIO) == RCC_PERIPHCLK_DFSDM1AUDIO)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d00b      	beq.n	80038d8 <HAL_RCCEx_PeriphCLKConfig+0x604>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1AUDIOCLKSOURCE(PeriphClkInit->Dfsdm1AudioClockSelection));

    /* Configure the DFSDM1 interface audio clock source */
    __HAL_RCC_DFSDM1AUDIO_CONFIG(PeriphClkInit->Dfsdm1AudioClockSelection);
 80038c0:	4b35      	ldr	r3, [pc, #212]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038c2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80038c6:	f023 0218 	bic.w	r2, r3, #24
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d0:	4931      	ldr	r1, [pc, #196]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
#endif /* DFSDM1_Filter0 */

#if defined(LTDC)

  /*-------------------------- LTDC clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d035      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LTDCCLKSOURCE(PeriphClkInit->LtdcClockSelection));

    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 80038e4:	4b2c      	ldr	r3, [pc, #176]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	4a2b      	ldr	r2, [pc, #172]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 80038ea:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80038ee:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80038f0:	f7fd fc26 	bl	8001140 <HAL_GetTick>
 80038f4:	60f8      	str	r0, [r7, #12]

    /* Wait till PLLSAI2 is ready */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 80038f6:	e009      	b.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x638>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80038f8:	f7fd fc22 	bl	8001140 <HAL_GetTick>
 80038fc:	4602      	mov	r2, r0
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	1ad3      	subs	r3, r2, r3
 8003902:	2b02      	cmp	r3, #2
 8003904:	d902      	bls.n	800390c <HAL_RCCEx_PeriphCLKConfig+0x638>
      {
        ret = HAL_TIMEOUT;
 8003906:	2303      	movs	r3, #3
 8003908:	74fb      	strb	r3, [r7, #19]
        break;
 800390a:	e005      	b.n	8003918 <HAL_RCCEx_PeriphCLKConfig+0x644>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800390c:	4b22      	ldr	r3, [pc, #136]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003914:	2b00      	cmp	r3, #0
 8003916:	d1ef      	bne.n	80038f8 <HAL_RCCEx_PeriphCLKConfig+0x624>
      }
    }

    if(ret == HAL_OK)
 8003918:	7cfb      	ldrb	r3, [r7, #19]
 800391a:	2b00      	cmp	r3, #0
 800391c:	d113      	bne.n	8003946 <HAL_RCCEx_PeriphCLKConfig+0x672>
    {
      /* Configure the LTDC clock source */
      __HAL_RCC_LTDC_CONFIG(PeriphClkInit->LtdcClockSelection);
 800391e:	4b1e      	ldr	r3, [pc, #120]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003920:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003924:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800392e:	491a      	ldr	r1, [pc, #104]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	3320      	adds	r3, #32
 800393a:	2102      	movs	r1, #2
 800393c:	4618      	mov	r0, r3
 800393e:	f000 f92d 	bl	8003b9c <RCCEx_PLLSAI2_Config>
 8003942:	4603      	mov	r3, r0
 8003944:	74fb      	strb	r3, [r7, #19]
    }

    if(ret != HAL_OK)
 8003946:	7cfb      	ldrb	r3, [r7, #19]
 8003948:	2b00      	cmp	r3, #0
 800394a:	d001      	beq.n	8003950 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* set overall return value */
      status = ret;
 800394c:	7cfb      	ldrb	r3, [r7, #19]
 800394e:	74bb      	strb	r3, [r7, #18]
#endif /* DSI */

#if defined(OCTOSPI1) || defined(OCTOSPI2)

  /*-------------------------- OctoSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_OSPI) == RCC_PERIPHCLK_OSPI)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003958:	2b00      	cmp	r3, #0
 800395a:	d017      	beq.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_OSPICLKSOURCE(PeriphClkInit->OspiClockSelection));

    /* Configure the OctoSPI clock source */
    __HAL_RCC_OSPI_CONFIG(PeriphClkInit->OspiClockSelection);
 800395c:	4b0e      	ldr	r3, [pc, #56]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800395e:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8003962:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800396c:	490a      	ldr	r1, [pc, #40]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 800396e:	4313      	orrs	r3, r2
 8003970:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->OspiClockSelection == RCC_OSPICLKSOURCE_PLL)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800397a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800397e:	d105      	bne.n	800398c <HAL_RCCEx_PeriphCLKConfig+0x6b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8003980:	4b05      	ldr	r3, [pc, #20]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4a04      	ldr	r2, [pc, #16]	; (8003998 <HAL_RCCEx_PeriphCLKConfig+0x6c4>)
 8003986:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800398a:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 800398c:	7cbb      	ldrb	r3, [r7, #18]
}
 800398e:	4618      	mov	r0, r3
 8003990:	3718      	adds	r7, #24
 8003992:	46bd      	mov	sp, r7
 8003994:	bd80      	pop	{r7, pc}
 8003996:	bf00      	nop
 8003998:	40021000 	.word	0x40021000

0800399c <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 800399c:	b480      	push	{r7}
 800399e:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 80039a0:	4b05      	ldr	r3, [pc, #20]	; (80039b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	4a04      	ldr	r2, [pc, #16]	; (80039b8 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 80039a6:	f043 0304 	orr.w	r3, r3, #4
 80039aa:	6013      	str	r3, [r2, #0]
}
 80039ac:	bf00      	nop
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40021000 	.word	0x40021000

080039bc <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80039c6:	2300      	movs	r3, #0
 80039c8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80039ca:	4b70      	ldr	r3, [pc, #448]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80039cc:	68db      	ldr	r3, [r3, #12]
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d00e      	beq.n	80039f4 <RCCEx_PLLSAI1_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80039d6:	4b6d      	ldr	r3, [pc, #436]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 80039d8:	68db      	ldr	r3, [r3, #12]
 80039da:	f003 0203 	and.w	r2, r3, #3
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	429a      	cmp	r2, r3
 80039e4:	d103      	bne.n	80039ee <RCCEx_PLLSAI1_Config+0x32>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
       ||
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d13f      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
#endif
      )
    {
      status = HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	73fb      	strb	r3, [r7, #15]
 80039f2:	e03c      	b.n	8003a6e <RCCEx_PLLSAI1_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	2b02      	cmp	r3, #2
 80039fa:	d00c      	beq.n	8003a16 <RCCEx_PLLSAI1_Config+0x5a>
 80039fc:	2b03      	cmp	r3, #3
 80039fe:	d013      	beq.n	8003a28 <RCCEx_PLLSAI1_Config+0x6c>
 8003a00:	2b01      	cmp	r3, #1
 8003a02:	d120      	bne.n	8003a46 <RCCEx_PLLSAI1_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003a04:	4b61      	ldr	r3, [pc, #388]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	f003 0302 	and.w	r3, r3, #2
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d11d      	bne.n	8003a4c <RCCEx_PLLSAI1_Config+0x90>
      {
        status = HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a14:	e01a      	b.n	8003a4c <RCCEx_PLLSAI1_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003a16:	4b5d      	ldr	r3, [pc, #372]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d116      	bne.n	8003a50 <RCCEx_PLLSAI1_Config+0x94>
      {
        status = HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003a26:	e013      	b.n	8003a50 <RCCEx_PLLSAI1_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003a28:	4b58      	ldr	r3, [pc, #352]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d10f      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003a34:	4b55      	ldr	r3, [pc, #340]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d109      	bne.n	8003a54 <RCCEx_PLLSAI1_Config+0x98>
        {
          status = HAL_ERROR;
 8003a40:	2301      	movs	r3, #1
 8003a42:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003a44:	e006      	b.n	8003a54 <RCCEx_PLLSAI1_Config+0x98>
    default:
      status = HAL_ERROR;
 8003a46:	2301      	movs	r3, #1
 8003a48:	73fb      	strb	r3, [r7, #15]
      break;
 8003a4a:	e004      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a4c:	bf00      	nop
 8003a4e:	e002      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a50:	bf00      	nop
 8003a52:	e000      	b.n	8003a56 <RCCEx_PLLSAI1_Config+0x9a>
      break;
 8003a54:	bf00      	nop
    }

    if(status == HAL_OK)
 8003a56:	7bfb      	ldrb	r3, [r7, #15]
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d108      	bne.n	8003a6e <RCCEx_PLLSAI1_Config+0xb2>
    {
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
 8003a5c:	4b4b      	ldr	r3, [pc, #300]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a5e:	68db      	ldr	r3, [r3, #12]
 8003a60:	f023 0203 	bic.w	r2, r3, #3
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	4948      	ldr	r1, [pc, #288]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a6a:	4313      	orrs	r3, r2
 8003a6c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003a6e:	7bfb      	ldrb	r3, [r7, #15]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	f040 8086 	bne.w	8003b82 <RCCEx_PLLSAI1_Config+0x1c6>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8003a76:	4b45      	ldr	r3, [pc, #276]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	4a44      	ldr	r2, [pc, #272]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003a7c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a80:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a82:	f7fd fb5d 	bl	8001140 <HAL_GetTick>
 8003a86:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a88:	e009      	b.n	8003a9e <RCCEx_PLLSAI1_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003a8a:	f7fd fb59 	bl	8001140 <HAL_GetTick>
 8003a8e:	4602      	mov	r2, r0
 8003a90:	68bb      	ldr	r3, [r7, #8]
 8003a92:	1ad3      	subs	r3, r2, r3
 8003a94:	2b02      	cmp	r3, #2
 8003a96:	d902      	bls.n	8003a9e <RCCEx_PLLSAI1_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003a98:	2303      	movs	r3, #3
 8003a9a:	73fb      	strb	r3, [r7, #15]
        break;
 8003a9c:	e005      	b.n	8003aaa <RCCEx_PLLSAI1_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8003a9e:	4b3b      	ldr	r3, [pc, #236]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d1ef      	bne.n	8003a8a <RCCEx_PLLSAI1_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003aaa:	7bfb      	ldrb	r3, [r7, #15]
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	d168      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003ab0:	683b      	ldr	r3, [r7, #0]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d113      	bne.n	8003ade <RCCEx_PLLSAI1_Config+0x122>
        assert_param(IS_RCC_PLLSAI1P_VALUE(PllSai1->PLLSAI1P));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI1 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ab6:	4b35      	ldr	r3, [pc, #212]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ab8:	691a      	ldr	r2, [r3, #16]
 8003aba:	4b35      	ldr	r3, [pc, #212]	; (8003b90 <RCCEx_PLLSAI1_Config+0x1d4>)
 8003abc:	4013      	ands	r3, r2
 8003abe:	687a      	ldr	r2, [r7, #4]
 8003ac0:	6892      	ldr	r2, [r2, #8]
 8003ac2:	0211      	lsls	r1, r2, #8
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68d2      	ldr	r2, [r2, #12]
 8003ac8:	06d2      	lsls	r2, r2, #27
 8003aca:	4311      	orrs	r1, r2
 8003acc:	687a      	ldr	r2, [r7, #4]
 8003ace:	6852      	ldr	r2, [r2, #4]
 8003ad0:	3a01      	subs	r2, #1
 8003ad2:	0112      	lsls	r2, r2, #4
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	492d      	ldr	r1, [pc, #180]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	610b      	str	r3, [r1, #16]
 8003adc:	e02d      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0x17e>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 8003ade:	683b      	ldr	r3, [r7, #0]
 8003ae0:	2b01      	cmp	r3, #1
 8003ae2:	d115      	bne.n	8003b10 <RCCEx_PLLSAI1_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI1Q_VALUE(PllSai1->PLLSAI1Q));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003ae4:	4b29      	ldr	r3, [pc, #164]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003ae6:	691a      	ldr	r2, [r3, #16]
 8003ae8:	4b2a      	ldr	r3, [pc, #168]	; (8003b94 <RCCEx_PLLSAI1_Config+0x1d8>)
 8003aea:	4013      	ands	r3, r2
 8003aec:	687a      	ldr	r2, [r7, #4]
 8003aee:	6892      	ldr	r2, [r2, #8]
 8003af0:	0211      	lsls	r1, r2, #8
 8003af2:	687a      	ldr	r2, [r7, #4]
 8003af4:	6912      	ldr	r2, [r2, #16]
 8003af6:	0852      	lsrs	r2, r2, #1
 8003af8:	3a01      	subs	r2, #1
 8003afa:	0552      	lsls	r2, r2, #21
 8003afc:	4311      	orrs	r1, r2
 8003afe:	687a      	ldr	r2, [r7, #4]
 8003b00:	6852      	ldr	r2, [r2, #4]
 8003b02:	3a01      	subs	r2, #1
 8003b04:	0112      	lsls	r2, r2, #4
 8003b06:	430a      	orrs	r2, r1
 8003b08:	4920      	ldr	r1, [pc, #128]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b0a:	4313      	orrs	r3, r2
 8003b0c:	610b      	str	r3, [r1, #16]
 8003b0e:	e014      	b.n	8003b3a <RCCEx_PLLSAI1_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI1R_VALUE(PllSai1->PLLSAI1R));
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI1 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8003b10:	4b1e      	ldr	r3, [pc, #120]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b12:	691a      	ldr	r2, [r3, #16]
 8003b14:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <RCCEx_PLLSAI1_Config+0x1dc>)
 8003b16:	4013      	ands	r3, r2
 8003b18:	687a      	ldr	r2, [r7, #4]
 8003b1a:	6892      	ldr	r2, [r2, #8]
 8003b1c:	0211      	lsls	r1, r2, #8
 8003b1e:	687a      	ldr	r2, [r7, #4]
 8003b20:	6952      	ldr	r2, [r2, #20]
 8003b22:	0852      	lsrs	r2, r2, #1
 8003b24:	3a01      	subs	r2, #1
 8003b26:	0652      	lsls	r2, r2, #25
 8003b28:	4311      	orrs	r1, r2
 8003b2a:	687a      	ldr	r2, [r7, #4]
 8003b2c:	6852      	ldr	r2, [r2, #4]
 8003b2e:	3a01      	subs	r2, #1
 8003b30:	0112      	lsls	r2, r2, #4
 8003b32:	430a      	orrs	r2, r1
 8003b34:	4915      	ldr	r1, [pc, #84]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 8003b3a:	4b14      	ldr	r3, [pc, #80]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	4a13      	ldr	r2, [pc, #76]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003b44:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b46:	f7fd fafb 	bl	8001140 <HAL_GetTick>
 8003b4a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b4c:	e009      	b.n	8003b62 <RCCEx_PLLSAI1_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8003b4e:	f7fd faf7 	bl	8001140 <HAL_GetTick>
 8003b52:	4602      	mov	r2, r0
 8003b54:	68bb      	ldr	r3, [r7, #8]
 8003b56:	1ad3      	subs	r3, r2, r3
 8003b58:	2b02      	cmp	r3, #2
 8003b5a:	d902      	bls.n	8003b62 <RCCEx_PLLSAI1_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003b5c:	2303      	movs	r3, #3
 8003b5e:	73fb      	strb	r3, [r7, #15]
          break;
 8003b60:	e005      	b.n	8003b6e <RCCEx_PLLSAI1_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8003b62:	4b0a      	ldr	r3, [pc, #40]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d0ef      	beq.n	8003b4e <RCCEx_PLLSAI1_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003b6e:	7bfb      	ldrb	r3, [r7, #15]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d106      	bne.n	8003b82 <RCCEx_PLLSAI1_Config+0x1c6>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8003b74:	4b05      	ldr	r3, [pc, #20]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b76:	691a      	ldr	r2, [r3, #16]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	699b      	ldr	r3, [r3, #24]
 8003b7c:	4903      	ldr	r1, [pc, #12]	; (8003b8c <RCCEx_PLLSAI1_Config+0x1d0>)
 8003b7e:	4313      	orrs	r3, r2
 8003b80:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8003b82:	7bfb      	ldrb	r3, [r7, #15]
}
 8003b84:	4618      	mov	r0, r3
 8003b86:	3710      	adds	r7, #16
 8003b88:	46bd      	mov	sp, r7
 8003b8a:	bd80      	pop	{r7, pc}
 8003b8c:	40021000 	.word	0x40021000
 8003b90:	07ff800f 	.word	0x07ff800f
 8003b94:	ff9f800f 	.word	0xff9f800f
 8003b98:	f9ff800f 	.word	0xf9ff800f

08003b9c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8003b9c:	b580      	push	{r7, lr}
 8003b9e:	b084      	sub	sp, #16
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
 8003ba4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8003baa:	4b70      	ldr	r3, [pc, #448]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bac:	68db      	ldr	r3, [r3, #12]
 8003bae:	f003 0303 	and.w	r3, r3, #3
 8003bb2:	2b00      	cmp	r3, #0
 8003bb4:	d00e      	beq.n	8003bd4 <RCCEx_PLLSAI2_Config+0x38>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8003bb6:	4b6d      	ldr	r3, [pc, #436]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bb8:	68db      	ldr	r3, [r3, #12]
 8003bba:	f003 0203 	and.w	r2, r3, #3
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	429a      	cmp	r2, r3
 8003bc4:	d103      	bne.n	8003bce <RCCEx_PLLSAI2_Config+0x32>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
       ||
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d13f      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0xb2>
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
#endif
      )
    {
      status = HAL_ERROR;
 8003bce:	2301      	movs	r3, #1
 8003bd0:	73fb      	strb	r3, [r7, #15]
 8003bd2:	e03c      	b.n	8003c4e <RCCEx_PLLSAI2_Config+0xb2>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	2b02      	cmp	r3, #2
 8003bda:	d00c      	beq.n	8003bf6 <RCCEx_PLLSAI2_Config+0x5a>
 8003bdc:	2b03      	cmp	r3, #3
 8003bde:	d013      	beq.n	8003c08 <RCCEx_PLLSAI2_Config+0x6c>
 8003be0:	2b01      	cmp	r3, #1
 8003be2:	d120      	bne.n	8003c26 <RCCEx_PLLSAI2_Config+0x8a>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8003be4:	4b61      	ldr	r3, [pc, #388]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f003 0302 	and.w	r3, r3, #2
 8003bec:	2b00      	cmp	r3, #0
 8003bee:	d11d      	bne.n	8003c2c <RCCEx_PLLSAI2_Config+0x90>
      {
        status = HAL_ERROR;
 8003bf0:	2301      	movs	r3, #1
 8003bf2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003bf4:	e01a      	b.n	8003c2c <RCCEx_PLLSAI2_Config+0x90>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8003bf6:	4b5d      	ldr	r3, [pc, #372]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d116      	bne.n	8003c30 <RCCEx_PLLSAI2_Config+0x94>
      {
        status = HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003c06:	e013      	b.n	8003c30 <RCCEx_PLLSAI2_Config+0x94>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8003c08:	4b58      	ldr	r3, [pc, #352]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d10f      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x98>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8003c14:	4b55      	ldr	r3, [pc, #340]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d109      	bne.n	8003c34 <RCCEx_PLLSAI2_Config+0x98>
        {
          status = HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8003c24:	e006      	b.n	8003c34 <RCCEx_PLLSAI2_Config+0x98>
    default:
      status = HAL_ERROR;
 8003c26:	2301      	movs	r3, #1
 8003c28:	73fb      	strb	r3, [r7, #15]
      break;
 8003c2a:	e004      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c2c:	bf00      	nop
 8003c2e:	e002      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c30:	bf00      	nop
 8003c32:	e000      	b.n	8003c36 <RCCEx_PLLSAI2_Config+0x9a>
      break;
 8003c34:	bf00      	nop
    }

    if(status == HAL_OK)
 8003c36:	7bfb      	ldrb	r3, [r7, #15]
 8003c38:	2b00      	cmp	r3, #0
 8003c3a:	d108      	bne.n	8003c4e <RCCEx_PLLSAI2_Config+0xb2>
    {
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
 8003c3c:	4b4b      	ldr	r3, [pc, #300]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f023 0203 	bic.w	r2, r3, #3
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4948      	ldr	r1, [pc, #288]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	60cb      	str	r3, [r1, #12]
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
#endif
    }
  }

  if(status == HAL_OK)
 8003c4e:	7bfb      	ldrb	r3, [r7, #15]
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	f040 8086 	bne.w	8003d62 <RCCEx_PLLSAI2_Config+0x1c6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8003c56:	4b45      	ldr	r3, [pc, #276]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	4a44      	ldr	r2, [pc, #272]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c62:	f7fd fa6d 	bl	8001140 <HAL_GetTick>
 8003c66:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c68:	e009      	b.n	8003c7e <RCCEx_PLLSAI2_Config+0xe2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003c6a:	f7fd fa69 	bl	8001140 <HAL_GetTick>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	68bb      	ldr	r3, [r7, #8]
 8003c72:	1ad3      	subs	r3, r2, r3
 8003c74:	2b02      	cmp	r3, #2
 8003c76:	d902      	bls.n	8003c7e <RCCEx_PLLSAI2_Config+0xe2>
      {
        status = HAL_TIMEOUT;
 8003c78:	2303      	movs	r3, #3
 8003c7a:	73fb      	strb	r3, [r7, #15]
        break;
 8003c7c:	e005      	b.n	8003c8a <RCCEx_PLLSAI2_Config+0xee>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8003c7e:	4b3b      	ldr	r3, [pc, #236]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d1ef      	bne.n	8003c6a <RCCEx_PLLSAI2_Config+0xce>
      }
    }

    if(status == HAL_OK)
 8003c8a:	7bfb      	ldrb	r3, [r7, #15]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d168      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0x1c6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8003c90:	683b      	ldr	r3, [r7, #0]
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d113      	bne.n	8003cbe <RCCEx_PLLSAI2_Config+0x122>
        assert_param(IS_RCC_PLLSAI2P_VALUE(PllSai2->PLLSAI2P));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)

        /* Configure the PLLSAI2 Division factor M, P and Multiplication factor N*/
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003c96:	4b35      	ldr	r3, [pc, #212]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003c98:	695a      	ldr	r2, [r3, #20]
 8003c9a:	4b35      	ldr	r3, [pc, #212]	; (8003d70 <RCCEx_PLLSAI2_Config+0x1d4>)
 8003c9c:	4013      	ands	r3, r2
 8003c9e:	687a      	ldr	r2, [r7, #4]
 8003ca0:	6892      	ldr	r2, [r2, #8]
 8003ca2:	0211      	lsls	r1, r2, #8
 8003ca4:	687a      	ldr	r2, [r7, #4]
 8003ca6:	68d2      	ldr	r2, [r2, #12]
 8003ca8:	06d2      	lsls	r2, r2, #27
 8003caa:	4311      	orrs	r1, r2
 8003cac:	687a      	ldr	r2, [r7, #4]
 8003cae:	6852      	ldr	r2, [r2, #4]
 8003cb0:	3a01      	subs	r2, #1
 8003cb2:	0112      	lsls	r2, r2, #4
 8003cb4:	430a      	orrs	r2, r1
 8003cb6:	492d      	ldr	r1, [pc, #180]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cb8:	4313      	orrs	r3, r2
 8003cba:	614b      	str	r3, [r1, #20]
 8003cbc:	e02d      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0x17e>
#endif /* RCC_PLLSAI2P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }
#if defined(RCC_PLLSAI2Q_DIV_SUPPORT)
      else if(Divider == DIVIDER_Q_UPDATE)
 8003cbe:	683b      	ldr	r3, [r7, #0]
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d115      	bne.n	8003cf0 <RCCEx_PLLSAI2_Config+0x154>
      {
        assert_param(IS_RCC_PLLSAI2Q_VALUE(PllSai2->PLLSAI2Q));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cc4:	4b29      	ldr	r3, [pc, #164]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cc6:	695a      	ldr	r2, [r3, #20]
 8003cc8:	4b2a      	ldr	r3, [pc, #168]	; (8003d74 <RCCEx_PLLSAI2_Config+0x1d8>)
 8003cca:	4013      	ands	r3, r2
 8003ccc:	687a      	ldr	r2, [r7, #4]
 8003cce:	6892      	ldr	r2, [r2, #8]
 8003cd0:	0211      	lsls	r1, r2, #8
 8003cd2:	687a      	ldr	r2, [r7, #4]
 8003cd4:	6912      	ldr	r2, [r2, #16]
 8003cd6:	0852      	lsrs	r2, r2, #1
 8003cd8:	3a01      	subs	r2, #1
 8003cda:	0552      	lsls	r2, r2, #21
 8003cdc:	4311      	orrs	r1, r2
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	6852      	ldr	r2, [r2, #4]
 8003ce2:	3a01      	subs	r2, #1
 8003ce4:	0112      	lsls	r2, r2, #4
 8003ce6:	430a      	orrs	r2, r1
 8003ce8:	4920      	ldr	r1, [pc, #128]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cea:	4313      	orrs	r3, r2
 8003cec:	614b      	str	r3, [r1, #20]
 8003cee:	e014      	b.n	8003d1a <RCCEx_PLLSAI2_Config+0x17e>
      else
      {
        assert_param(IS_RCC_PLLSAI2R_VALUE(PllSai2->PLLSAI2R));
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
        /* Configure the PLLSAI2 Division factor M, R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8003cf0:	4b1e      	ldr	r3, [pc, #120]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003cf2:	695a      	ldr	r2, [r3, #20]
 8003cf4:	4b20      	ldr	r3, [pc, #128]	; (8003d78 <RCCEx_PLLSAI2_Config+0x1dc>)
 8003cf6:	4013      	ands	r3, r2
 8003cf8:	687a      	ldr	r2, [r7, #4]
 8003cfa:	6892      	ldr	r2, [r2, #8]
 8003cfc:	0211      	lsls	r1, r2, #8
 8003cfe:	687a      	ldr	r2, [r7, #4]
 8003d00:	6952      	ldr	r2, [r2, #20]
 8003d02:	0852      	lsrs	r2, r2, #1
 8003d04:	3a01      	subs	r2, #1
 8003d06:	0652      	lsls	r2, r2, #25
 8003d08:	4311      	orrs	r1, r2
 8003d0a:	687a      	ldr	r2, [r7, #4]
 8003d0c:	6852      	ldr	r2, [r2, #4]
 8003d0e:	3a01      	subs	r2, #1
 8003d10:	0112      	lsls	r2, r2, #4
 8003d12:	430a      	orrs	r2, r1
 8003d14:	4915      	ldr	r1, [pc, #84]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 8003d1a:	4b14      	ldr	r3, [pc, #80]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	4a13      	ldr	r2, [pc, #76]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d24:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d26:	f7fd fa0b 	bl	8001140 <HAL_GetTick>
 8003d2a:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d2c:	e009      	b.n	8003d42 <RCCEx_PLLSAI2_Config+0x1a6>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8003d2e:	f7fd fa07 	bl	8001140 <HAL_GetTick>
 8003d32:	4602      	mov	r2, r0
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	1ad3      	subs	r3, r2, r3
 8003d38:	2b02      	cmp	r3, #2
 8003d3a:	d902      	bls.n	8003d42 <RCCEx_PLLSAI2_Config+0x1a6>
        {
          status = HAL_TIMEOUT;
 8003d3c:	2303      	movs	r3, #3
 8003d3e:	73fb      	strb	r3, [r7, #15]
          break;
 8003d40:	e005      	b.n	8003d4e <RCCEx_PLLSAI2_Config+0x1b2>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8003d42:	4b0a      	ldr	r3, [pc, #40]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d0ef      	beq.n	8003d2e <RCCEx_PLLSAI2_Config+0x192>
        }
      }

      if(status == HAL_OK)
 8003d4e:	7bfb      	ldrb	r3, [r7, #15]
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d106      	bne.n	8003d62 <RCCEx_PLLSAI2_Config+0x1c6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8003d54:	4b05      	ldr	r3, [pc, #20]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d56:	695a      	ldr	r2, [r3, #20]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	699b      	ldr	r3, [r3, #24]
 8003d5c:	4903      	ldr	r1, [pc, #12]	; (8003d6c <RCCEx_PLLSAI2_Config+0x1d0>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8003d62:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	3710      	adds	r7, #16
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	bd80      	pop	{r7, pc}
 8003d6c:	40021000 	.word	0x40021000
 8003d70:	07ff800f 	.word	0x07ff800f
 8003d74:	ff9f800f 	.word	0xff9f800f
 8003d78:	f9ff800f 	.word	0xf9ff800f

08003d7c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003d7c:	b580      	push	{r7, lr}
 8003d7e:	b082      	sub	sp, #8
 8003d80:	af00      	add	r7, sp, #0
 8003d82:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d101      	bne.n	8003d8e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003d8a:	2301      	movs	r3, #1
 8003d8c:	e042      	b.n	8003e14 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d106      	bne.n	8003da6 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2200      	movs	r2, #0
 8003d9c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003da0:	6878      	ldr	r0, [r7, #4]
 8003da2:	f7fd f829 	bl	8000df8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	2224      	movs	r2, #36	; 0x24
 8003daa:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  __HAL_UART_DISABLE(huart);
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	681a      	ldr	r2, [r3, #0]
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	f022 0201 	bic.w	r2, r2, #1
 8003dbc:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f82e 	bl	8003e20 <UART_SetConfig>
 8003dc4:	4603      	mov	r3, r0
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e022      	b.n	8003e14 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d002      	beq.n	8003ddc <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f001 fa10 	bl	80051fc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	685a      	ldr	r2, [r3, #4]
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003dea:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	689a      	ldr	r2, [r3, #8]
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003dfa:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	f042 0201 	orr.w	r2, r2, #1
 8003e0a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003e0c:	6878      	ldr	r0, [r7, #4]
 8003e0e:	f001 fa97 	bl	8005340 <UART_CheckIdleState>
 8003e12:	4603      	mov	r3, r0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3708      	adds	r7, #8
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}
 8003e1c:	0000      	movs	r0, r0
	...

08003e20 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e20:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8003e24:	b08a      	sub	sp, #40	; 0x28
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8003e2a:	2300      	movs	r3, #0
 8003e2c:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8003e2e:	2300      	movs	r3, #0
 8003e30:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8003e32:	2300      	movs	r3, #0
 8003e34:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	689a      	ldr	r2, [r3, #8]
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	691b      	ldr	r3, [r3, #16]
 8003e3e:	431a      	orrs	r2, r3
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	695b      	ldr	r3, [r3, #20]
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	69db      	ldr	r3, [r3, #28]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8003e52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e54:	4313      	orrs	r3, r2
 8003e56:	627b      	str	r3, [r7, #36]	; 0x24
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	681a      	ldr	r2, [r3, #0]
 8003e5e:	4baa      	ldr	r3, [pc, #680]	; (8004108 <UART_SetConfig+0x2e8>)
 8003e60:	4013      	ands	r3, r2
 8003e62:	687a      	ldr	r2, [r7, #4]
 8003e64:	6812      	ldr	r2, [r2, #0]
 8003e66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003e68:	430b      	orrs	r3, r1
 8003e6a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	685b      	ldr	r3, [r3, #4]
 8003e72:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	68da      	ldr	r2, [r3, #12]
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	430a      	orrs	r2, r1
 8003e80:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	699b      	ldr	r3, [r3, #24]
 8003e86:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a9f      	ldr	r2, [pc, #636]	; (800410c <UART_SetConfig+0x2ec>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d004      	beq.n	8003e9c <UART_SetConfig+0x7c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a1b      	ldr	r3, [r3, #32]
 8003e96:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8003ea6:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 8003eaa:	687a      	ldr	r2, [r7, #4]
 8003eac:	6812      	ldr	r2, [r2, #0]
 8003eae:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003eb0:	430b      	orrs	r3, r1
 8003eb2:	6093      	str	r3, [r2, #8]

#if defined(USART_PRESC_PRESCALER)
  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eba:	f023 010f 	bic.w	r1, r3, #15
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	430a      	orrs	r2, r1
 8003ec8:	62da      	str	r2, [r3, #44]	; 0x2c
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	4a90      	ldr	r2, [pc, #576]	; (8004110 <UART_SetConfig+0x2f0>)
 8003ed0:	4293      	cmp	r3, r2
 8003ed2:	d126      	bne.n	8003f22 <UART_SetConfig+0x102>
 8003ed4:	4b8f      	ldr	r3, [pc, #572]	; (8004114 <UART_SetConfig+0x2f4>)
 8003ed6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	2b03      	cmp	r3, #3
 8003ee0:	d81a      	bhi.n	8003f18 <UART_SetConfig+0xf8>
 8003ee2:	a201      	add	r2, pc, #4	; (adr r2, 8003ee8 <UART_SetConfig+0xc8>)
 8003ee4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee8:	08003ef9 	.word	0x08003ef9
 8003eec:	08003f09 	.word	0x08003f09
 8003ef0:	08003f01 	.word	0x08003f01
 8003ef4:	08003f11 	.word	0x08003f11
 8003ef8:	2301      	movs	r3, #1
 8003efa:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003efe:	e116      	b.n	800412e <UART_SetConfig+0x30e>
 8003f00:	2302      	movs	r3, #2
 8003f02:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f06:	e112      	b.n	800412e <UART_SetConfig+0x30e>
 8003f08:	2304      	movs	r3, #4
 8003f0a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f0e:	e10e      	b.n	800412e <UART_SetConfig+0x30e>
 8003f10:	2308      	movs	r3, #8
 8003f12:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f16:	e10a      	b.n	800412e <UART_SetConfig+0x30e>
 8003f18:	2310      	movs	r3, #16
 8003f1a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f1e:	bf00      	nop
 8003f20:	e105      	b.n	800412e <UART_SetConfig+0x30e>
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	4a7c      	ldr	r2, [pc, #496]	; (8004118 <UART_SetConfig+0x2f8>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d138      	bne.n	8003f9e <UART_SetConfig+0x17e>
 8003f2c:	4b79      	ldr	r3, [pc, #484]	; (8004114 <UART_SetConfig+0x2f4>)
 8003f2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f32:	f003 030c 	and.w	r3, r3, #12
 8003f36:	2b0c      	cmp	r3, #12
 8003f38:	d82c      	bhi.n	8003f94 <UART_SetConfig+0x174>
 8003f3a:	a201      	add	r2, pc, #4	; (adr r2, 8003f40 <UART_SetConfig+0x120>)
 8003f3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003f40:	08003f75 	.word	0x08003f75
 8003f44:	08003f95 	.word	0x08003f95
 8003f48:	08003f95 	.word	0x08003f95
 8003f4c:	08003f95 	.word	0x08003f95
 8003f50:	08003f85 	.word	0x08003f85
 8003f54:	08003f95 	.word	0x08003f95
 8003f58:	08003f95 	.word	0x08003f95
 8003f5c:	08003f95 	.word	0x08003f95
 8003f60:	08003f7d 	.word	0x08003f7d
 8003f64:	08003f95 	.word	0x08003f95
 8003f68:	08003f95 	.word	0x08003f95
 8003f6c:	08003f95 	.word	0x08003f95
 8003f70:	08003f8d 	.word	0x08003f8d
 8003f74:	2300      	movs	r3, #0
 8003f76:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f7a:	e0d8      	b.n	800412e <UART_SetConfig+0x30e>
 8003f7c:	2302      	movs	r3, #2
 8003f7e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f82:	e0d4      	b.n	800412e <UART_SetConfig+0x30e>
 8003f84:	2304      	movs	r3, #4
 8003f86:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f8a:	e0d0      	b.n	800412e <UART_SetConfig+0x30e>
 8003f8c:	2308      	movs	r3, #8
 8003f8e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f92:	e0cc      	b.n	800412e <UART_SetConfig+0x30e>
 8003f94:	2310      	movs	r3, #16
 8003f96:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003f9a:	bf00      	nop
 8003f9c:	e0c7      	b.n	800412e <UART_SetConfig+0x30e>
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	4a5e      	ldr	r2, [pc, #376]	; (800411c <UART_SetConfig+0x2fc>)
 8003fa4:	4293      	cmp	r3, r2
 8003fa6:	d125      	bne.n	8003ff4 <UART_SetConfig+0x1d4>
 8003fa8:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <UART_SetConfig+0x2f4>)
 8003faa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fae:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003fb2:	2b10      	cmp	r3, #16
 8003fb4:	d011      	beq.n	8003fda <UART_SetConfig+0x1ba>
 8003fb6:	2b10      	cmp	r3, #16
 8003fb8:	d802      	bhi.n	8003fc0 <UART_SetConfig+0x1a0>
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d005      	beq.n	8003fca <UART_SetConfig+0x1aa>
 8003fbe:	e014      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fc0:	2b20      	cmp	r3, #32
 8003fc2:	d006      	beq.n	8003fd2 <UART_SetConfig+0x1b2>
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d00c      	beq.n	8003fe2 <UART_SetConfig+0x1c2>
 8003fc8:	e00f      	b.n	8003fea <UART_SetConfig+0x1ca>
 8003fca:	2300      	movs	r3, #0
 8003fcc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd0:	e0ad      	b.n	800412e <UART_SetConfig+0x30e>
 8003fd2:	2302      	movs	r3, #2
 8003fd4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fd8:	e0a9      	b.n	800412e <UART_SetConfig+0x30e>
 8003fda:	2304      	movs	r3, #4
 8003fdc:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe0:	e0a5      	b.n	800412e <UART_SetConfig+0x30e>
 8003fe2:	2308      	movs	r3, #8
 8003fe4:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003fe8:	e0a1      	b.n	800412e <UART_SetConfig+0x30e>
 8003fea:	2310      	movs	r3, #16
 8003fec:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8003ff0:	bf00      	nop
 8003ff2:	e09c      	b.n	800412e <UART_SetConfig+0x30e>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	4a49      	ldr	r2, [pc, #292]	; (8004120 <UART_SetConfig+0x300>)
 8003ffa:	4293      	cmp	r3, r2
 8003ffc:	d125      	bne.n	800404a <UART_SetConfig+0x22a>
 8003ffe:	4b45      	ldr	r3, [pc, #276]	; (8004114 <UART_SetConfig+0x2f4>)
 8004000:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004004:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004008:	2b40      	cmp	r3, #64	; 0x40
 800400a:	d011      	beq.n	8004030 <UART_SetConfig+0x210>
 800400c:	2b40      	cmp	r3, #64	; 0x40
 800400e:	d802      	bhi.n	8004016 <UART_SetConfig+0x1f6>
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <UART_SetConfig+0x200>
 8004014:	e014      	b.n	8004040 <UART_SetConfig+0x220>
 8004016:	2b80      	cmp	r3, #128	; 0x80
 8004018:	d006      	beq.n	8004028 <UART_SetConfig+0x208>
 800401a:	2bc0      	cmp	r3, #192	; 0xc0
 800401c:	d00c      	beq.n	8004038 <UART_SetConfig+0x218>
 800401e:	e00f      	b.n	8004040 <UART_SetConfig+0x220>
 8004020:	2300      	movs	r3, #0
 8004022:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004026:	e082      	b.n	800412e <UART_SetConfig+0x30e>
 8004028:	2302      	movs	r3, #2
 800402a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800402e:	e07e      	b.n	800412e <UART_SetConfig+0x30e>
 8004030:	2304      	movs	r3, #4
 8004032:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004036:	e07a      	b.n	800412e <UART_SetConfig+0x30e>
 8004038:	2308      	movs	r3, #8
 800403a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800403e:	e076      	b.n	800412e <UART_SetConfig+0x30e>
 8004040:	2310      	movs	r3, #16
 8004042:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004046:	bf00      	nop
 8004048:	e071      	b.n	800412e <UART_SetConfig+0x30e>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	4a35      	ldr	r2, [pc, #212]	; (8004124 <UART_SetConfig+0x304>)
 8004050:	4293      	cmp	r3, r2
 8004052:	d129      	bne.n	80040a8 <UART_SetConfig+0x288>
 8004054:	4b2f      	ldr	r3, [pc, #188]	; (8004114 <UART_SetConfig+0x2f4>)
 8004056:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800405a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800405e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004062:	d014      	beq.n	800408e <UART_SetConfig+0x26e>
 8004064:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004068:	d802      	bhi.n	8004070 <UART_SetConfig+0x250>
 800406a:	2b00      	cmp	r3, #0
 800406c:	d007      	beq.n	800407e <UART_SetConfig+0x25e>
 800406e:	e016      	b.n	800409e <UART_SetConfig+0x27e>
 8004070:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004074:	d007      	beq.n	8004086 <UART_SetConfig+0x266>
 8004076:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800407a:	d00c      	beq.n	8004096 <UART_SetConfig+0x276>
 800407c:	e00f      	b.n	800409e <UART_SetConfig+0x27e>
 800407e:	2300      	movs	r3, #0
 8004080:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004084:	e053      	b.n	800412e <UART_SetConfig+0x30e>
 8004086:	2302      	movs	r3, #2
 8004088:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800408c:	e04f      	b.n	800412e <UART_SetConfig+0x30e>
 800408e:	2304      	movs	r3, #4
 8004090:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004094:	e04b      	b.n	800412e <UART_SetConfig+0x30e>
 8004096:	2308      	movs	r3, #8
 8004098:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800409c:	e047      	b.n	800412e <UART_SetConfig+0x30e>
 800409e:	2310      	movs	r3, #16
 80040a0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040a4:	bf00      	nop
 80040a6:	e042      	b.n	800412e <UART_SetConfig+0x30e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	4a17      	ldr	r2, [pc, #92]	; (800410c <UART_SetConfig+0x2ec>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d13a      	bne.n	8004128 <UART_SetConfig+0x308>
 80040b2:	4b18      	ldr	r3, [pc, #96]	; (8004114 <UART_SetConfig+0x2f4>)
 80040b4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040b8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80040bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c0:	d014      	beq.n	80040ec <UART_SetConfig+0x2cc>
 80040c2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80040c6:	d802      	bhi.n	80040ce <UART_SetConfig+0x2ae>
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d007      	beq.n	80040dc <UART_SetConfig+0x2bc>
 80040cc:	e016      	b.n	80040fc <UART_SetConfig+0x2dc>
 80040ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040d2:	d007      	beq.n	80040e4 <UART_SetConfig+0x2c4>
 80040d4:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80040d8:	d00c      	beq.n	80040f4 <UART_SetConfig+0x2d4>
 80040da:	e00f      	b.n	80040fc <UART_SetConfig+0x2dc>
 80040dc:	2300      	movs	r3, #0
 80040de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040e2:	e024      	b.n	800412e <UART_SetConfig+0x30e>
 80040e4:	2302      	movs	r3, #2
 80040e6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040ea:	e020      	b.n	800412e <UART_SetConfig+0x30e>
 80040ec:	2304      	movs	r3, #4
 80040ee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040f2:	e01c      	b.n	800412e <UART_SetConfig+0x30e>
 80040f4:	2308      	movs	r3, #8
 80040f6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 80040fa:	e018      	b.n	800412e <UART_SetConfig+0x30e>
 80040fc:	2310      	movs	r3, #16
 80040fe:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8004102:	bf00      	nop
 8004104:	e013      	b.n	800412e <UART_SetConfig+0x30e>
 8004106:	bf00      	nop
 8004108:	cfff69f3 	.word	0xcfff69f3
 800410c:	40008000 	.word	0x40008000
 8004110:	40013800 	.word	0x40013800
 8004114:	40021000 	.word	0x40021000
 8004118:	40004400 	.word	0x40004400
 800411c:	40004800 	.word	0x40004800
 8004120:	40004c00 	.word	0x40004c00
 8004124:	40005000 	.word	0x40005000
 8004128:	2310      	movs	r3, #16
 800412a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	4a86      	ldr	r2, [pc, #536]	; (800434c <UART_SetConfig+0x52c>)
 8004134:	4293      	cmp	r3, r2
 8004136:	f040 8422 	bne.w	800497e <UART_SetConfig+0xb5e>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800413a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800413e:	2b08      	cmp	r3, #8
 8004140:	f200 8173 	bhi.w	800442a <UART_SetConfig+0x60a>
 8004144:	a201      	add	r2, pc, #4	; (adr r2, 800414c <UART_SetConfig+0x32c>)
 8004146:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800414a:	bf00      	nop
 800414c:	08004171 	.word	0x08004171
 8004150:	0800442b 	.word	0x0800442b
 8004154:	08004213 	.word	0x08004213
 8004158:	0800442b 	.word	0x0800442b
 800415c:	080042ab 	.word	0x080042ab
 8004160:	0800442b 	.word	0x0800442b
 8004164:	0800442b 	.word	0x0800442b
 8004168:	0800442b 	.word	0x0800442b
 800416c:	0800437d 	.word	0x0800437d
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004170:	f7fe ffc2 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8004174:	4602      	mov	r2, r0
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800417a:	2b00      	cmp	r3, #0
 800417c:	d044      	beq.n	8004208 <UART_SetConfig+0x3e8>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004182:	2b01      	cmp	r3, #1
 8004184:	d03e      	beq.n	8004204 <UART_SetConfig+0x3e4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800418a:	2b02      	cmp	r3, #2
 800418c:	d038      	beq.n	8004200 <UART_SetConfig+0x3e0>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004192:	2b03      	cmp	r3, #3
 8004194:	d032      	beq.n	80041fc <UART_SetConfig+0x3dc>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419a:	2b04      	cmp	r3, #4
 800419c:	d02c      	beq.n	80041f8 <UART_SetConfig+0x3d8>
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a2:	2b05      	cmp	r3, #5
 80041a4:	d026      	beq.n	80041f4 <UART_SetConfig+0x3d4>
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041aa:	2b06      	cmp	r3, #6
 80041ac:	d020      	beq.n	80041f0 <UART_SetConfig+0x3d0>
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041b2:	2b07      	cmp	r3, #7
 80041b4:	d01a      	beq.n	80041ec <UART_SetConfig+0x3cc>
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ba:	2b08      	cmp	r3, #8
 80041bc:	d014      	beq.n	80041e8 <UART_SetConfig+0x3c8>
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041c2:	2b09      	cmp	r3, #9
 80041c4:	d00e      	beq.n	80041e4 <UART_SetConfig+0x3c4>
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041ca:	2b0a      	cmp	r3, #10
 80041cc:	d008      	beq.n	80041e0 <UART_SetConfig+0x3c0>
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041d2:	2b0b      	cmp	r3, #11
 80041d4:	d102      	bne.n	80041dc <UART_SetConfig+0x3bc>
 80041d6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80041da:	e016      	b.n	800420a <UART_SetConfig+0x3ea>
 80041dc:	2301      	movs	r3, #1
 80041de:	e014      	b.n	800420a <UART_SetConfig+0x3ea>
 80041e0:	2380      	movs	r3, #128	; 0x80
 80041e2:	e012      	b.n	800420a <UART_SetConfig+0x3ea>
 80041e4:	2340      	movs	r3, #64	; 0x40
 80041e6:	e010      	b.n	800420a <UART_SetConfig+0x3ea>
 80041e8:	2320      	movs	r3, #32
 80041ea:	e00e      	b.n	800420a <UART_SetConfig+0x3ea>
 80041ec:	2310      	movs	r3, #16
 80041ee:	e00c      	b.n	800420a <UART_SetConfig+0x3ea>
 80041f0:	230c      	movs	r3, #12
 80041f2:	e00a      	b.n	800420a <UART_SetConfig+0x3ea>
 80041f4:	230a      	movs	r3, #10
 80041f6:	e008      	b.n	800420a <UART_SetConfig+0x3ea>
 80041f8:	2308      	movs	r3, #8
 80041fa:	e006      	b.n	800420a <UART_SetConfig+0x3ea>
 80041fc:	2306      	movs	r3, #6
 80041fe:	e004      	b.n	800420a <UART_SetConfig+0x3ea>
 8004200:	2304      	movs	r3, #4
 8004202:	e002      	b.n	800420a <UART_SetConfig+0x3ea>
 8004204:	2302      	movs	r3, #2
 8004206:	e000      	b.n	800420a <UART_SetConfig+0x3ea>
 8004208:	2301      	movs	r3, #1
 800420a:	fbb2 f3f3 	udiv	r3, r2, r3
 800420e:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
#endif /* USART_PRESC_PRESCALER */
        break;
 8004210:	e10e      	b.n	8004430 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004216:	2b00      	cmp	r3, #0
 8004218:	d044      	beq.n	80042a4 <UART_SetConfig+0x484>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421e:	2b01      	cmp	r3, #1
 8004220:	d03e      	beq.n	80042a0 <UART_SetConfig+0x480>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004226:	2b02      	cmp	r3, #2
 8004228:	d038      	beq.n	800429c <UART_SetConfig+0x47c>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800422e:	2b03      	cmp	r3, #3
 8004230:	d032      	beq.n	8004298 <UART_SetConfig+0x478>
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004236:	2b04      	cmp	r3, #4
 8004238:	d02c      	beq.n	8004294 <UART_SetConfig+0x474>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800423e:	2b05      	cmp	r3, #5
 8004240:	d026      	beq.n	8004290 <UART_SetConfig+0x470>
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004246:	2b06      	cmp	r3, #6
 8004248:	d020      	beq.n	800428c <UART_SetConfig+0x46c>
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800424e:	2b07      	cmp	r3, #7
 8004250:	d01a      	beq.n	8004288 <UART_SetConfig+0x468>
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004256:	2b08      	cmp	r3, #8
 8004258:	d014      	beq.n	8004284 <UART_SetConfig+0x464>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800425e:	2b09      	cmp	r3, #9
 8004260:	d00e      	beq.n	8004280 <UART_SetConfig+0x460>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004266:	2b0a      	cmp	r3, #10
 8004268:	d008      	beq.n	800427c <UART_SetConfig+0x45c>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800426e:	2b0b      	cmp	r3, #11
 8004270:	d102      	bne.n	8004278 <UART_SetConfig+0x458>
 8004272:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004276:	e016      	b.n	80042a6 <UART_SetConfig+0x486>
 8004278:	4b35      	ldr	r3, [pc, #212]	; (8004350 <UART_SetConfig+0x530>)
 800427a:	e014      	b.n	80042a6 <UART_SetConfig+0x486>
 800427c:	4b35      	ldr	r3, [pc, #212]	; (8004354 <UART_SetConfig+0x534>)
 800427e:	e012      	b.n	80042a6 <UART_SetConfig+0x486>
 8004280:	4b35      	ldr	r3, [pc, #212]	; (8004358 <UART_SetConfig+0x538>)
 8004282:	e010      	b.n	80042a6 <UART_SetConfig+0x486>
 8004284:	4b35      	ldr	r3, [pc, #212]	; (800435c <UART_SetConfig+0x53c>)
 8004286:	e00e      	b.n	80042a6 <UART_SetConfig+0x486>
 8004288:	4b35      	ldr	r3, [pc, #212]	; (8004360 <UART_SetConfig+0x540>)
 800428a:	e00c      	b.n	80042a6 <UART_SetConfig+0x486>
 800428c:	4b35      	ldr	r3, [pc, #212]	; (8004364 <UART_SetConfig+0x544>)
 800428e:	e00a      	b.n	80042a6 <UART_SetConfig+0x486>
 8004290:	4b35      	ldr	r3, [pc, #212]	; (8004368 <UART_SetConfig+0x548>)
 8004292:	e008      	b.n	80042a6 <UART_SetConfig+0x486>
 8004294:	4b35      	ldr	r3, [pc, #212]	; (800436c <UART_SetConfig+0x54c>)
 8004296:	e006      	b.n	80042a6 <UART_SetConfig+0x486>
 8004298:	4b35      	ldr	r3, [pc, #212]	; (8004370 <UART_SetConfig+0x550>)
 800429a:	e004      	b.n	80042a6 <UART_SetConfig+0x486>
 800429c:	4b35      	ldr	r3, [pc, #212]	; (8004374 <UART_SetConfig+0x554>)
 800429e:	e002      	b.n	80042a6 <UART_SetConfig+0x486>
 80042a0:	4b35      	ldr	r3, [pc, #212]	; (8004378 <UART_SetConfig+0x558>)
 80042a2:	e000      	b.n	80042a6 <UART_SetConfig+0x486>
 80042a4:	4b2a      	ldr	r3, [pc, #168]	; (8004350 <UART_SetConfig+0x530>)
 80042a6:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 80042a8:	e0c2      	b.n	8004430 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 80042aa:	f7fe fe8f 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80042ae:	4602      	mov	r2, r0
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042b4:	2b00      	cmp	r3, #0
 80042b6:	d044      	beq.n	8004342 <UART_SetConfig+0x522>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d03e      	beq.n	800433e <UART_SetConfig+0x51e>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042c4:	2b02      	cmp	r3, #2
 80042c6:	d038      	beq.n	800433a <UART_SetConfig+0x51a>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042cc:	2b03      	cmp	r3, #3
 80042ce:	d032      	beq.n	8004336 <UART_SetConfig+0x516>
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042d4:	2b04      	cmp	r3, #4
 80042d6:	d02c      	beq.n	8004332 <UART_SetConfig+0x512>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042dc:	2b05      	cmp	r3, #5
 80042de:	d026      	beq.n	800432e <UART_SetConfig+0x50e>
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042e4:	2b06      	cmp	r3, #6
 80042e6:	d020      	beq.n	800432a <UART_SetConfig+0x50a>
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ec:	2b07      	cmp	r3, #7
 80042ee:	d01a      	beq.n	8004326 <UART_SetConfig+0x506>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f4:	2b08      	cmp	r3, #8
 80042f6:	d014      	beq.n	8004322 <UART_SetConfig+0x502>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fc:	2b09      	cmp	r3, #9
 80042fe:	d00e      	beq.n	800431e <UART_SetConfig+0x4fe>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004304:	2b0a      	cmp	r3, #10
 8004306:	d008      	beq.n	800431a <UART_SetConfig+0x4fa>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800430c:	2b0b      	cmp	r3, #11
 800430e:	d102      	bne.n	8004316 <UART_SetConfig+0x4f6>
 8004310:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004314:	e016      	b.n	8004344 <UART_SetConfig+0x524>
 8004316:	2301      	movs	r3, #1
 8004318:	e014      	b.n	8004344 <UART_SetConfig+0x524>
 800431a:	2380      	movs	r3, #128	; 0x80
 800431c:	e012      	b.n	8004344 <UART_SetConfig+0x524>
 800431e:	2340      	movs	r3, #64	; 0x40
 8004320:	e010      	b.n	8004344 <UART_SetConfig+0x524>
 8004322:	2320      	movs	r3, #32
 8004324:	e00e      	b.n	8004344 <UART_SetConfig+0x524>
 8004326:	2310      	movs	r3, #16
 8004328:	e00c      	b.n	8004344 <UART_SetConfig+0x524>
 800432a:	230c      	movs	r3, #12
 800432c:	e00a      	b.n	8004344 <UART_SetConfig+0x524>
 800432e:	230a      	movs	r3, #10
 8004330:	e008      	b.n	8004344 <UART_SetConfig+0x524>
 8004332:	2308      	movs	r3, #8
 8004334:	e006      	b.n	8004344 <UART_SetConfig+0x524>
 8004336:	2306      	movs	r3, #6
 8004338:	e004      	b.n	8004344 <UART_SetConfig+0x524>
 800433a:	2304      	movs	r3, #4
 800433c:	e002      	b.n	8004344 <UART_SetConfig+0x524>
 800433e:	2302      	movs	r3, #2
 8004340:	e000      	b.n	8004344 <UART_SetConfig+0x524>
 8004342:	2301      	movs	r3, #1
 8004344:	fbb2 f3f3 	udiv	r3, r2, r3
 8004348:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
#endif /* USART_PRESC_PRESCALER */
        break;
 800434a:	e071      	b.n	8004430 <UART_SetConfig+0x610>
 800434c:	40008000 	.word	0x40008000
 8004350:	00f42400 	.word	0x00f42400
 8004354:	0001e848 	.word	0x0001e848
 8004358:	0003d090 	.word	0x0003d090
 800435c:	0007a120 	.word	0x0007a120
 8004360:	000f4240 	.word	0x000f4240
 8004364:	00145855 	.word	0x00145855
 8004368:	00186a00 	.word	0x00186a00
 800436c:	001e8480 	.word	0x001e8480
 8004370:	0028b0aa 	.word	0x0028b0aa
 8004374:	003d0900 	.word	0x003d0900
 8004378:	007a1200 	.word	0x007a1200
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004380:	2b00      	cmp	r3, #0
 8004382:	d04e      	beq.n	8004422 <UART_SetConfig+0x602>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004388:	2b01      	cmp	r3, #1
 800438a:	d047      	beq.n	800441c <UART_SetConfig+0x5fc>
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004390:	2b02      	cmp	r3, #2
 8004392:	d040      	beq.n	8004416 <UART_SetConfig+0x5f6>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004398:	2b03      	cmp	r3, #3
 800439a:	d039      	beq.n	8004410 <UART_SetConfig+0x5f0>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a0:	2b04      	cmp	r3, #4
 80043a2:	d032      	beq.n	800440a <UART_SetConfig+0x5ea>
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043a8:	2b05      	cmp	r3, #5
 80043aa:	d02b      	beq.n	8004404 <UART_SetConfig+0x5e4>
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b0:	2b06      	cmp	r3, #6
 80043b2:	d024      	beq.n	80043fe <UART_SetConfig+0x5de>
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b8:	2b07      	cmp	r3, #7
 80043ba:	d01d      	beq.n	80043f8 <UART_SetConfig+0x5d8>
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c0:	2b08      	cmp	r3, #8
 80043c2:	d016      	beq.n	80043f2 <UART_SetConfig+0x5d2>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043c8:	2b09      	cmp	r3, #9
 80043ca:	d00f      	beq.n	80043ec <UART_SetConfig+0x5cc>
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d0:	2b0a      	cmp	r3, #10
 80043d2:	d008      	beq.n	80043e6 <UART_SetConfig+0x5c6>
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043d8:	2b0b      	cmp	r3, #11
 80043da:	d101      	bne.n	80043e0 <UART_SetConfig+0x5c0>
 80043dc:	2380      	movs	r3, #128	; 0x80
 80043de:	e022      	b.n	8004426 <UART_SetConfig+0x606>
 80043e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043e4:	e01f      	b.n	8004426 <UART_SetConfig+0x606>
 80043e6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80043ea:	e01c      	b.n	8004426 <UART_SetConfig+0x606>
 80043ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80043f0:	e019      	b.n	8004426 <UART_SetConfig+0x606>
 80043f2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80043f6:	e016      	b.n	8004426 <UART_SetConfig+0x606>
 80043f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80043fc:	e013      	b.n	8004426 <UART_SetConfig+0x606>
 80043fe:	f640 23aa 	movw	r3, #2730	; 0xaaa
 8004402:	e010      	b.n	8004426 <UART_SetConfig+0x606>
 8004404:	f640 43cc 	movw	r3, #3276	; 0xccc
 8004408:	e00d      	b.n	8004426 <UART_SetConfig+0x606>
 800440a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800440e:	e00a      	b.n	8004426 <UART_SetConfig+0x606>
 8004410:	f241 5355 	movw	r3, #5461	; 0x1555
 8004414:	e007      	b.n	8004426 <UART_SetConfig+0x606>
 8004416:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800441a:	e004      	b.n	8004426 <UART_SetConfig+0x606>
 800441c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004420:	e001      	b.n	8004426 <UART_SetConfig+0x606>
 8004422:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004426:	617b      	str	r3, [r7, #20]
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
#endif /* USART_PRESC_PRESCALER */
        break;
 8004428:	e002      	b.n	8004430 <UART_SetConfig+0x610>
      default:
        ret = HAL_ERROR;
 800442a:	2301      	movs	r3, #1
 800442c:	76fb      	strb	r3, [r7, #27]
        break;
 800442e:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	2b00      	cmp	r3, #0
 8004434:	f000 86b7 	beq.w	80051a6 <UART_SetConfig+0x1386>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	685a      	ldr	r2, [r3, #4]
 800443c:	4613      	mov	r3, r2
 800443e:	005b      	lsls	r3, r3, #1
 8004440:	4413      	add	r3, r2
 8004442:	697a      	ldr	r2, [r7, #20]
 8004444:	429a      	cmp	r2, r3
 8004446:	d305      	bcc.n	8004454 <UART_SetConfig+0x634>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	685b      	ldr	r3, [r3, #4]
 800444c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800444e:	697a      	ldr	r2, [r7, #20]
 8004450:	429a      	cmp	r2, r3
 8004452:	d903      	bls.n	800445c <UART_SetConfig+0x63c>
      {
        ret = HAL_ERROR;
 8004454:	2301      	movs	r3, #1
 8004456:	76fb      	strb	r3, [r7, #27]
 8004458:	f000 bea5 	b.w	80051a6 <UART_SetConfig+0x1386>
      }
      else
      {
        switch (clocksource)
 800445c:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004460:	2b08      	cmp	r3, #8
 8004462:	f200 8277 	bhi.w	8004954 <UART_SetConfig+0xb34>
 8004466:	a201      	add	r2, pc, #4	; (adr r2, 800446c <UART_SetConfig+0x64c>)
 8004468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446c:	08004491 	.word	0x08004491
 8004470:	08004955 	.word	0x08004955
 8004474:	080045cf 	.word	0x080045cf
 8004478:	08004955 	.word	0x08004955
 800447c:	080046c5 	.word	0x080046c5
 8004480:	08004955 	.word	0x08004955
 8004484:	08004955 	.word	0x08004955
 8004488:	08004955 	.word	0x08004955
 800448c:	08004803 	.word	0x08004803
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 8004490:	f7fe fe32 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8004494:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004496:	693b      	ldr	r3, [r7, #16]
 8004498:	4618      	mov	r0, r3
 800449a:	f04f 0100 	mov.w	r1, #0
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d067      	beq.n	8004576 <UART_SetConfig+0x756>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d05e      	beq.n	800456c <UART_SetConfig+0x74c>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d055      	beq.n	8004562 <UART_SetConfig+0x742>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ba:	2b03      	cmp	r3, #3
 80044bc:	d04c      	beq.n	8004558 <UART_SetConfig+0x738>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044c2:	2b04      	cmp	r3, #4
 80044c4:	d043      	beq.n	800454e <UART_SetConfig+0x72e>
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d03a      	beq.n	8004544 <UART_SetConfig+0x724>
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044d2:	2b06      	cmp	r3, #6
 80044d4:	d031      	beq.n	800453a <UART_SetConfig+0x71a>
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044da:	2b07      	cmp	r3, #7
 80044dc:	d028      	beq.n	8004530 <UART_SetConfig+0x710>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e2:	2b08      	cmp	r3, #8
 80044e4:	d01f      	beq.n	8004526 <UART_SetConfig+0x706>
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044ea:	2b09      	cmp	r3, #9
 80044ec:	d016      	beq.n	800451c <UART_SetConfig+0x6fc>
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044f2:	2b0a      	cmp	r3, #10
 80044f4:	d00d      	beq.n	8004512 <UART_SetConfig+0x6f2>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044fa:	2b0b      	cmp	r3, #11
 80044fc:	d104      	bne.n	8004508 <UART_SetConfig+0x6e8>
 80044fe:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004502:	f04f 0400 	mov.w	r4, #0
 8004506:	e03a      	b.n	800457e <UART_SetConfig+0x75e>
 8004508:	f04f 0301 	mov.w	r3, #1
 800450c:	f04f 0400 	mov.w	r4, #0
 8004510:	e035      	b.n	800457e <UART_SetConfig+0x75e>
 8004512:	f04f 0380 	mov.w	r3, #128	; 0x80
 8004516:	f04f 0400 	mov.w	r4, #0
 800451a:	e030      	b.n	800457e <UART_SetConfig+0x75e>
 800451c:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004520:	f04f 0400 	mov.w	r4, #0
 8004524:	e02b      	b.n	800457e <UART_SetConfig+0x75e>
 8004526:	f04f 0320 	mov.w	r3, #32
 800452a:	f04f 0400 	mov.w	r4, #0
 800452e:	e026      	b.n	800457e <UART_SetConfig+0x75e>
 8004530:	f04f 0310 	mov.w	r3, #16
 8004534:	f04f 0400 	mov.w	r4, #0
 8004538:	e021      	b.n	800457e <UART_SetConfig+0x75e>
 800453a:	f04f 030c 	mov.w	r3, #12
 800453e:	f04f 0400 	mov.w	r4, #0
 8004542:	e01c      	b.n	800457e <UART_SetConfig+0x75e>
 8004544:	f04f 030a 	mov.w	r3, #10
 8004548:	f04f 0400 	mov.w	r4, #0
 800454c:	e017      	b.n	800457e <UART_SetConfig+0x75e>
 800454e:	f04f 0308 	mov.w	r3, #8
 8004552:	f04f 0400 	mov.w	r4, #0
 8004556:	e012      	b.n	800457e <UART_SetConfig+0x75e>
 8004558:	f04f 0306 	mov.w	r3, #6
 800455c:	f04f 0400 	mov.w	r4, #0
 8004560:	e00d      	b.n	800457e <UART_SetConfig+0x75e>
 8004562:	f04f 0304 	mov.w	r3, #4
 8004566:	f04f 0400 	mov.w	r4, #0
 800456a:	e008      	b.n	800457e <UART_SetConfig+0x75e>
 800456c:	f04f 0302 	mov.w	r3, #2
 8004570:	f04f 0400 	mov.w	r4, #0
 8004574:	e003      	b.n	800457e <UART_SetConfig+0x75e>
 8004576:	f04f 0301 	mov.w	r3, #1
 800457a:	f04f 0400 	mov.w	r4, #0
 800457e:	461a      	mov	r2, r3
 8004580:	4623      	mov	r3, r4
 8004582:	f7fb fe3d 	bl	8000200 <__aeabi_uldivmod>
 8004586:	4603      	mov	r3, r0
 8004588:	460c      	mov	r4, r1
 800458a:	4619      	mov	r1, r3
 800458c:	4622      	mov	r2, r4
 800458e:	f04f 0300 	mov.w	r3, #0
 8004592:	f04f 0400 	mov.w	r4, #0
 8004596:	0214      	lsls	r4, r2, #8
 8004598:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800459c:	020b      	lsls	r3, r1, #8
 800459e:	687a      	ldr	r2, [r7, #4]
 80045a0:	6852      	ldr	r2, [r2, #4]
 80045a2:	0852      	lsrs	r2, r2, #1
 80045a4:	4611      	mov	r1, r2
 80045a6:	f04f 0200 	mov.w	r2, #0
 80045aa:	eb13 0b01 	adds.w	fp, r3, r1
 80045ae:	eb44 0c02 	adc.w	ip, r4, r2
 80045b2:	4658      	mov	r0, fp
 80045b4:	4661      	mov	r1, ip
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	685b      	ldr	r3, [r3, #4]
 80045ba:	f04f 0400 	mov.w	r4, #0
 80045be:	461a      	mov	r2, r3
 80045c0:	4623      	mov	r3, r4
 80045c2:	f7fb fe1d 	bl	8000200 <__aeabi_uldivmod>
 80045c6:	4603      	mov	r3, r0
 80045c8:	460c      	mov	r4, r1
 80045ca:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80045cc:	e1c5      	b.n	800495a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d05b      	beq.n	800468e <UART_SetConfig+0x86e>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045da:	2b01      	cmp	r3, #1
 80045dc:	d053      	beq.n	8004686 <UART_SetConfig+0x866>
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045e2:	2b02      	cmp	r3, #2
 80045e4:	d04b      	beq.n	800467e <UART_SetConfig+0x85e>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045ea:	2b03      	cmp	r3, #3
 80045ec:	d043      	beq.n	8004676 <UART_SetConfig+0x856>
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f2:	2b04      	cmp	r3, #4
 80045f4:	d03b      	beq.n	800466e <UART_SetConfig+0x84e>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fa:	2b05      	cmp	r3, #5
 80045fc:	d033      	beq.n	8004666 <UART_SetConfig+0x846>
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004602:	2b06      	cmp	r3, #6
 8004604:	d02b      	beq.n	800465e <UART_SetConfig+0x83e>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800460a:	2b07      	cmp	r3, #7
 800460c:	d023      	beq.n	8004656 <UART_SetConfig+0x836>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004612:	2b08      	cmp	r3, #8
 8004614:	d01b      	beq.n	800464e <UART_SetConfig+0x82e>
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800461a:	2b09      	cmp	r3, #9
 800461c:	d013      	beq.n	8004646 <UART_SetConfig+0x826>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004622:	2b0a      	cmp	r3, #10
 8004624:	d00b      	beq.n	800463e <UART_SetConfig+0x81e>
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800462a:	2b0b      	cmp	r3, #11
 800462c:	d103      	bne.n	8004636 <UART_SetConfig+0x816>
 800462e:	4bae      	ldr	r3, [pc, #696]	; (80048e8 <UART_SetConfig+0xac8>)
 8004630:	f04f 0400 	mov.w	r4, #0
 8004634:	e02e      	b.n	8004694 <UART_SetConfig+0x874>
 8004636:	4bad      	ldr	r3, [pc, #692]	; (80048ec <UART_SetConfig+0xacc>)
 8004638:	f04f 0400 	mov.w	r4, #0
 800463c:	e02a      	b.n	8004694 <UART_SetConfig+0x874>
 800463e:	4bac      	ldr	r3, [pc, #688]	; (80048f0 <UART_SetConfig+0xad0>)
 8004640:	f04f 0400 	mov.w	r4, #0
 8004644:	e026      	b.n	8004694 <UART_SetConfig+0x874>
 8004646:	4bab      	ldr	r3, [pc, #684]	; (80048f4 <UART_SetConfig+0xad4>)
 8004648:	f04f 0400 	mov.w	r4, #0
 800464c:	e022      	b.n	8004694 <UART_SetConfig+0x874>
 800464e:	4baa      	ldr	r3, [pc, #680]	; (80048f8 <UART_SetConfig+0xad8>)
 8004650:	f04f 0400 	mov.w	r4, #0
 8004654:	e01e      	b.n	8004694 <UART_SetConfig+0x874>
 8004656:	4ba9      	ldr	r3, [pc, #676]	; (80048fc <UART_SetConfig+0xadc>)
 8004658:	f04f 0400 	mov.w	r4, #0
 800465c:	e01a      	b.n	8004694 <UART_SetConfig+0x874>
 800465e:	a49e      	add	r4, pc, #632	; (adr r4, 80048d8 <UART_SetConfig+0xab8>)
 8004660:	e9d4 3400 	ldrd	r3, r4, [r4]
 8004664:	e016      	b.n	8004694 <UART_SetConfig+0x874>
 8004666:	4ba6      	ldr	r3, [pc, #664]	; (8004900 <UART_SetConfig+0xae0>)
 8004668:	f04f 0400 	mov.w	r4, #0
 800466c:	e012      	b.n	8004694 <UART_SetConfig+0x874>
 800466e:	4ba5      	ldr	r3, [pc, #660]	; (8004904 <UART_SetConfig+0xae4>)
 8004670:	f04f 0400 	mov.w	r4, #0
 8004674:	e00e      	b.n	8004694 <UART_SetConfig+0x874>
 8004676:	a49a      	add	r4, pc, #616	; (adr r4, 80048e0 <UART_SetConfig+0xac0>)
 8004678:	e9d4 3400 	ldrd	r3, r4, [r4]
 800467c:	e00a      	b.n	8004694 <UART_SetConfig+0x874>
 800467e:	4ba2      	ldr	r3, [pc, #648]	; (8004908 <UART_SetConfig+0xae8>)
 8004680:	f04f 0400 	mov.w	r4, #0
 8004684:	e006      	b.n	8004694 <UART_SetConfig+0x874>
 8004686:	4ba1      	ldr	r3, [pc, #644]	; (800490c <UART_SetConfig+0xaec>)
 8004688:	f04f 0400 	mov.w	r4, #0
 800468c:	e002      	b.n	8004694 <UART_SetConfig+0x874>
 800468e:	4b97      	ldr	r3, [pc, #604]	; (80048ec <UART_SetConfig+0xacc>)
 8004690:	f04f 0400 	mov.w	r4, #0
 8004694:	687a      	ldr	r2, [r7, #4]
 8004696:	6852      	ldr	r2, [r2, #4]
 8004698:	0852      	lsrs	r2, r2, #1
 800469a:	4611      	mov	r1, r2
 800469c:	f04f 0200 	mov.w	r2, #0
 80046a0:	eb13 0b01 	adds.w	fp, r3, r1
 80046a4:	eb44 0c02 	adc.w	ip, r4, r2
 80046a8:	4658      	mov	r0, fp
 80046aa:	4661      	mov	r1, ip
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	685b      	ldr	r3, [r3, #4]
 80046b0:	f04f 0400 	mov.w	r4, #0
 80046b4:	461a      	mov	r2, r3
 80046b6:	4623      	mov	r3, r4
 80046b8:	f7fb fda2 	bl	8000200 <__aeabi_uldivmod>
 80046bc:	4603      	mov	r3, r0
 80046be:	460c      	mov	r4, r1
 80046c0:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 80046c2:	e14a      	b.n	800495a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 80046c4:	f7fe fc82 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 80046c8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80046ca:	693b      	ldr	r3, [r7, #16]
 80046cc:	4618      	mov	r0, r3
 80046ce:	f04f 0100 	mov.w	r1, #0
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d067      	beq.n	80047aa <UART_SetConfig+0x98a>
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046de:	2b01      	cmp	r3, #1
 80046e0:	d05e      	beq.n	80047a0 <UART_SetConfig+0x980>
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e6:	2b02      	cmp	r3, #2
 80046e8:	d055      	beq.n	8004796 <UART_SetConfig+0x976>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b03      	cmp	r3, #3
 80046f0:	d04c      	beq.n	800478c <UART_SetConfig+0x96c>
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046f6:	2b04      	cmp	r3, #4
 80046f8:	d043      	beq.n	8004782 <UART_SetConfig+0x962>
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046fe:	2b05      	cmp	r3, #5
 8004700:	d03a      	beq.n	8004778 <UART_SetConfig+0x958>
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004706:	2b06      	cmp	r3, #6
 8004708:	d031      	beq.n	800476e <UART_SetConfig+0x94e>
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800470e:	2b07      	cmp	r3, #7
 8004710:	d028      	beq.n	8004764 <UART_SetConfig+0x944>
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	2b08      	cmp	r3, #8
 8004718:	d01f      	beq.n	800475a <UART_SetConfig+0x93a>
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800471e:	2b09      	cmp	r3, #9
 8004720:	d016      	beq.n	8004750 <UART_SetConfig+0x930>
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004726:	2b0a      	cmp	r3, #10
 8004728:	d00d      	beq.n	8004746 <UART_SetConfig+0x926>
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800472e:	2b0b      	cmp	r3, #11
 8004730:	d104      	bne.n	800473c <UART_SetConfig+0x91c>
 8004732:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004736:	f04f 0400 	mov.w	r4, #0
 800473a:	e03a      	b.n	80047b2 <UART_SetConfig+0x992>
 800473c:	f04f 0301 	mov.w	r3, #1
 8004740:	f04f 0400 	mov.w	r4, #0
 8004744:	e035      	b.n	80047b2 <UART_SetConfig+0x992>
 8004746:	f04f 0380 	mov.w	r3, #128	; 0x80
 800474a:	f04f 0400 	mov.w	r4, #0
 800474e:	e030      	b.n	80047b2 <UART_SetConfig+0x992>
 8004750:	f04f 0340 	mov.w	r3, #64	; 0x40
 8004754:	f04f 0400 	mov.w	r4, #0
 8004758:	e02b      	b.n	80047b2 <UART_SetConfig+0x992>
 800475a:	f04f 0320 	mov.w	r3, #32
 800475e:	f04f 0400 	mov.w	r4, #0
 8004762:	e026      	b.n	80047b2 <UART_SetConfig+0x992>
 8004764:	f04f 0310 	mov.w	r3, #16
 8004768:	f04f 0400 	mov.w	r4, #0
 800476c:	e021      	b.n	80047b2 <UART_SetConfig+0x992>
 800476e:	f04f 030c 	mov.w	r3, #12
 8004772:	f04f 0400 	mov.w	r4, #0
 8004776:	e01c      	b.n	80047b2 <UART_SetConfig+0x992>
 8004778:	f04f 030a 	mov.w	r3, #10
 800477c:	f04f 0400 	mov.w	r4, #0
 8004780:	e017      	b.n	80047b2 <UART_SetConfig+0x992>
 8004782:	f04f 0308 	mov.w	r3, #8
 8004786:	f04f 0400 	mov.w	r4, #0
 800478a:	e012      	b.n	80047b2 <UART_SetConfig+0x992>
 800478c:	f04f 0306 	mov.w	r3, #6
 8004790:	f04f 0400 	mov.w	r4, #0
 8004794:	e00d      	b.n	80047b2 <UART_SetConfig+0x992>
 8004796:	f04f 0304 	mov.w	r3, #4
 800479a:	f04f 0400 	mov.w	r4, #0
 800479e:	e008      	b.n	80047b2 <UART_SetConfig+0x992>
 80047a0:	f04f 0302 	mov.w	r3, #2
 80047a4:	f04f 0400 	mov.w	r4, #0
 80047a8:	e003      	b.n	80047b2 <UART_SetConfig+0x992>
 80047aa:	f04f 0301 	mov.w	r3, #1
 80047ae:	f04f 0400 	mov.w	r4, #0
 80047b2:	461a      	mov	r2, r3
 80047b4:	4623      	mov	r3, r4
 80047b6:	f7fb fd23 	bl	8000200 <__aeabi_uldivmod>
 80047ba:	4603      	mov	r3, r0
 80047bc:	460c      	mov	r4, r1
 80047be:	4619      	mov	r1, r3
 80047c0:	4622      	mov	r2, r4
 80047c2:	f04f 0300 	mov.w	r3, #0
 80047c6:	f04f 0400 	mov.w	r4, #0
 80047ca:	0214      	lsls	r4, r2, #8
 80047cc:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 80047d0:	020b      	lsls	r3, r1, #8
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6852      	ldr	r2, [r2, #4]
 80047d6:	0852      	lsrs	r2, r2, #1
 80047d8:	4611      	mov	r1, r2
 80047da:	f04f 0200 	mov.w	r2, #0
 80047de:	eb13 0b01 	adds.w	fp, r3, r1
 80047e2:	eb44 0c02 	adc.w	ip, r4, r2
 80047e6:	4658      	mov	r0, fp
 80047e8:	4661      	mov	r1, ip
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	f04f 0400 	mov.w	r4, #0
 80047f2:	461a      	mov	r2, r3
 80047f4:	4623      	mov	r3, r4
 80047f6:	f7fb fd03 	bl	8000200 <__aeabi_uldivmod>
 80047fa:	4603      	mov	r3, r0
 80047fc:	460c      	mov	r4, r1
 80047fe:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004800:	e0ab      	b.n	800495a <UART_SetConfig+0xb3a>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 8088 	beq.w	800491c <UART_SetConfig+0xafc>
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004810:	2b01      	cmp	r3, #1
 8004812:	d05b      	beq.n	80048cc <UART_SetConfig+0xaac>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004818:	2b02      	cmp	r3, #2
 800481a:	d052      	beq.n	80048c2 <UART_SetConfig+0xaa2>
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004820:	2b03      	cmp	r3, #3
 8004822:	d04a      	beq.n	80048ba <UART_SetConfig+0xa9a>
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004828:	2b04      	cmp	r3, #4
 800482a:	d041      	beq.n	80048b0 <UART_SetConfig+0xa90>
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004830:	2b05      	cmp	r3, #5
 8004832:	d039      	beq.n	80048a8 <UART_SetConfig+0xa88>
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	2b06      	cmp	r3, #6
 800483a:	d031      	beq.n	80048a0 <UART_SetConfig+0xa80>
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004840:	2b07      	cmp	r3, #7
 8004842:	d028      	beq.n	8004896 <UART_SetConfig+0xa76>
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004848:	2b08      	cmp	r3, #8
 800484a:	d01f      	beq.n	800488c <UART_SetConfig+0xa6c>
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004850:	2b09      	cmp	r3, #9
 8004852:	d016      	beq.n	8004882 <UART_SetConfig+0xa62>
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	2b0a      	cmp	r3, #10
 800485a:	d00d      	beq.n	8004878 <UART_SetConfig+0xa58>
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004860:	2b0b      	cmp	r3, #11
 8004862:	d104      	bne.n	800486e <UART_SetConfig+0xa4e>
 8004864:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004868:	f04f 0400 	mov.w	r4, #0
 800486c:	e05a      	b.n	8004924 <UART_SetConfig+0xb04>
 800486e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004872:	f04f 0400 	mov.w	r4, #0
 8004876:	e055      	b.n	8004924 <UART_SetConfig+0xb04>
 8004878:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800487c:	f04f 0400 	mov.w	r4, #0
 8004880:	e050      	b.n	8004924 <UART_SetConfig+0xb04>
 8004882:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004886:	f04f 0400 	mov.w	r4, #0
 800488a:	e04b      	b.n	8004924 <UART_SetConfig+0xb04>
 800488c:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8004890:	f04f 0400 	mov.w	r4, #0
 8004894:	e046      	b.n	8004924 <UART_SetConfig+0xb04>
 8004896:	f44f 2300 	mov.w	r3, #524288	; 0x80000
 800489a:	f04f 0400 	mov.w	r4, #0
 800489e:	e041      	b.n	8004924 <UART_SetConfig+0xb04>
 80048a0:	4b1b      	ldr	r3, [pc, #108]	; (8004910 <UART_SetConfig+0xaf0>)
 80048a2:	f04f 0400 	mov.w	r4, #0
 80048a6:	e03d      	b.n	8004924 <UART_SetConfig+0xb04>
 80048a8:	4b1a      	ldr	r3, [pc, #104]	; (8004914 <UART_SetConfig+0xaf4>)
 80048aa:	f04f 0400 	mov.w	r4, #0
 80048ae:	e039      	b.n	8004924 <UART_SetConfig+0xb04>
 80048b0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80048b4:	f04f 0400 	mov.w	r4, #0
 80048b8:	e034      	b.n	8004924 <UART_SetConfig+0xb04>
 80048ba:	4b17      	ldr	r3, [pc, #92]	; (8004918 <UART_SetConfig+0xaf8>)
 80048bc:	f04f 0400 	mov.w	r4, #0
 80048c0:	e030      	b.n	8004924 <UART_SetConfig+0xb04>
 80048c2:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80048c6:	f04f 0400 	mov.w	r4, #0
 80048ca:	e02b      	b.n	8004924 <UART_SetConfig+0xb04>
 80048cc:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80048d0:	f04f 0400 	mov.w	r4, #0
 80048d4:	e026      	b.n	8004924 <UART_SetConfig+0xb04>
 80048d6:	bf00      	nop
 80048d8:	14585500 	.word	0x14585500
 80048dc:	00000000 	.word	0x00000000
 80048e0:	28b0aa00 	.word	0x28b0aa00
 80048e4:	00000000 	.word	0x00000000
 80048e8:	00f42400 	.word	0x00f42400
 80048ec:	f4240000 	.word	0xf4240000
 80048f0:	01e84800 	.word	0x01e84800
 80048f4:	03d09000 	.word	0x03d09000
 80048f8:	07a12000 	.word	0x07a12000
 80048fc:	0f424000 	.word	0x0f424000
 8004900:	186a0000 	.word	0x186a0000
 8004904:	1e848000 	.word	0x1e848000
 8004908:	3d090000 	.word	0x3d090000
 800490c:	7a120000 	.word	0x7a120000
 8004910:	000aaa00 	.word	0x000aaa00
 8004914:	000ccc00 	.word	0x000ccc00
 8004918:	00155500 	.word	0x00155500
 800491c:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8004920:	f04f 0400 	mov.w	r4, #0
 8004924:	687a      	ldr	r2, [r7, #4]
 8004926:	6852      	ldr	r2, [r2, #4]
 8004928:	0852      	lsrs	r2, r2, #1
 800492a:	4611      	mov	r1, r2
 800492c:	f04f 0200 	mov.w	r2, #0
 8004930:	eb13 0b01 	adds.w	fp, r3, r1
 8004934:	eb44 0c02 	adc.w	ip, r4, r2
 8004938:	4658      	mov	r0, fp
 800493a:	4661      	mov	r1, ip
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	685b      	ldr	r3, [r3, #4]
 8004940:	f04f 0400 	mov.w	r4, #0
 8004944:	461a      	mov	r2, r3
 8004946:	4623      	mov	r3, r4
 8004948:	f7fb fc5a 	bl	8000200 <__aeabi_uldivmod>
 800494c:	4603      	mov	r3, r0
 800494e:	460c      	mov	r4, r1
 8004950:	61fb      	str	r3, [r7, #28]
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
            break;
 8004952:	e002      	b.n	800495a <UART_SetConfig+0xb3a>
          default:
            ret = HAL_ERROR;
 8004954:	2301      	movs	r3, #1
 8004956:	76fb      	strb	r3, [r7, #27]
            break;
 8004958:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800495a:	69fb      	ldr	r3, [r7, #28]
 800495c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004960:	d309      	bcc.n	8004976 <UART_SetConfig+0xb56>
 8004962:	69fb      	ldr	r3, [r7, #28]
 8004964:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004968:	d205      	bcs.n	8004976 <UART_SetConfig+0xb56>
        {
          huart->Instance->BRR = usartdiv;
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	69fa      	ldr	r2, [r7, #28]
 8004970:	60da      	str	r2, [r3, #12]
 8004972:	f000 bc18 	b.w	80051a6 <UART_SetConfig+0x1386>
        }
        else
        {
          ret = HAL_ERROR;
 8004976:	2301      	movs	r3, #1
 8004978:	76fb      	strb	r3, [r7, #27]
 800497a:	f000 bc14 	b.w	80051a6 <UART_SetConfig+0x1386>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	69db      	ldr	r3, [r3, #28]
 8004982:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004986:	f040 8204 	bne.w	8004d92 <UART_SetConfig+0xf72>
  {
    switch (clocksource)
 800498a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800498e:	2b08      	cmp	r3, #8
 8004990:	f200 81df 	bhi.w	8004d52 <UART_SetConfig+0xf32>
 8004994:	a201      	add	r2, pc, #4	; (adr r2, 800499c <UART_SetConfig+0xb7c>)
 8004996:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800499a:	bf00      	nop
 800499c:	080049c1 	.word	0x080049c1
 80049a0:	08004a79 	.word	0x08004a79
 80049a4:	08004b31 	.word	0x08004b31
 80049a8:	08004d53 	.word	0x08004d53
 80049ac:	08004bd9 	.word	0x08004bd9
 80049b0:	08004d53 	.word	0x08004d53
 80049b4:	08004d53 	.word	0x08004d53
 80049b8:	08004d53 	.word	0x08004d53
 80049bc:	08004c91 	.word	0x08004c91
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80049c0:	f7fe fb9a 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 80049c4:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d044      	beq.n	8004a58 <UART_SetConfig+0xc38>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049d2:	2b01      	cmp	r3, #1
 80049d4:	d03e      	beq.n	8004a54 <UART_SetConfig+0xc34>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049da:	2b02      	cmp	r3, #2
 80049dc:	d038      	beq.n	8004a50 <UART_SetConfig+0xc30>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	2b03      	cmp	r3, #3
 80049e4:	d032      	beq.n	8004a4c <UART_SetConfig+0xc2c>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049ea:	2b04      	cmp	r3, #4
 80049ec:	d02c      	beq.n	8004a48 <UART_SetConfig+0xc28>
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049f2:	2b05      	cmp	r3, #5
 80049f4:	d026      	beq.n	8004a44 <UART_SetConfig+0xc24>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049fa:	2b06      	cmp	r3, #6
 80049fc:	d020      	beq.n	8004a40 <UART_SetConfig+0xc20>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a02:	2b07      	cmp	r3, #7
 8004a04:	d01a      	beq.n	8004a3c <UART_SetConfig+0xc1c>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a0a:	2b08      	cmp	r3, #8
 8004a0c:	d014      	beq.n	8004a38 <UART_SetConfig+0xc18>
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a12:	2b09      	cmp	r3, #9
 8004a14:	d00e      	beq.n	8004a34 <UART_SetConfig+0xc14>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a1a:	2b0a      	cmp	r3, #10
 8004a1c:	d008      	beq.n	8004a30 <UART_SetConfig+0xc10>
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	2b0b      	cmp	r3, #11
 8004a24:	d102      	bne.n	8004a2c <UART_SetConfig+0xc0c>
 8004a26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004a2a:	e016      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a2c:	2301      	movs	r3, #1
 8004a2e:	e014      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a30:	2380      	movs	r3, #128	; 0x80
 8004a32:	e012      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a34:	2340      	movs	r3, #64	; 0x40
 8004a36:	e010      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a38:	2320      	movs	r3, #32
 8004a3a:	e00e      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a3c:	2310      	movs	r3, #16
 8004a3e:	e00c      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a40:	230c      	movs	r3, #12
 8004a42:	e00a      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a44:	230a      	movs	r3, #10
 8004a46:	e008      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a48:	2308      	movs	r3, #8
 8004a4a:	e006      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a4c:	2306      	movs	r3, #6
 8004a4e:	e004      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a50:	2304      	movs	r3, #4
 8004a52:	e002      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a54:	2302      	movs	r3, #2
 8004a56:	e000      	b.n	8004a5a <UART_SetConfig+0xc3a>
 8004a58:	2301      	movs	r3, #1
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a60:	005a      	lsls	r2, r3, #1
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	085b      	lsrs	r3, r3, #1
 8004a68:	441a      	add	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a72:	b29b      	uxth	r3, r3
 8004a74:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004a76:	e16f      	b.n	8004d58 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004a78:	f7fe fb54 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8004a7c:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d044      	beq.n	8004b10 <UART_SetConfig+0xcf0>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8a:	2b01      	cmp	r3, #1
 8004a8c:	d03e      	beq.n	8004b0c <UART_SetConfig+0xcec>
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a92:	2b02      	cmp	r3, #2
 8004a94:	d038      	beq.n	8004b08 <UART_SetConfig+0xce8>
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a9a:	2b03      	cmp	r3, #3
 8004a9c:	d032      	beq.n	8004b04 <UART_SetConfig+0xce4>
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa2:	2b04      	cmp	r3, #4
 8004aa4:	d02c      	beq.n	8004b00 <UART_SetConfig+0xce0>
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aaa:	2b05      	cmp	r3, #5
 8004aac:	d026      	beq.n	8004afc <UART_SetConfig+0xcdc>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab2:	2b06      	cmp	r3, #6
 8004ab4:	d020      	beq.n	8004af8 <UART_SetConfig+0xcd8>
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aba:	2b07      	cmp	r3, #7
 8004abc:	d01a      	beq.n	8004af4 <UART_SetConfig+0xcd4>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ac2:	2b08      	cmp	r3, #8
 8004ac4:	d014      	beq.n	8004af0 <UART_SetConfig+0xcd0>
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aca:	2b09      	cmp	r3, #9
 8004acc:	d00e      	beq.n	8004aec <UART_SetConfig+0xccc>
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ad2:	2b0a      	cmp	r3, #10
 8004ad4:	d008      	beq.n	8004ae8 <UART_SetConfig+0xcc8>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ada:	2b0b      	cmp	r3, #11
 8004adc:	d102      	bne.n	8004ae4 <UART_SetConfig+0xcc4>
 8004ade:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004ae2:	e016      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004ae4:	2301      	movs	r3, #1
 8004ae6:	e014      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004ae8:	2380      	movs	r3, #128	; 0x80
 8004aea:	e012      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004aec:	2340      	movs	r3, #64	; 0x40
 8004aee:	e010      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004af0:	2320      	movs	r3, #32
 8004af2:	e00e      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004af4:	2310      	movs	r3, #16
 8004af6:	e00c      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004af8:	230c      	movs	r3, #12
 8004afa:	e00a      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004afc:	230a      	movs	r3, #10
 8004afe:	e008      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004b00:	2308      	movs	r3, #8
 8004b02:	e006      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004b04:	2306      	movs	r3, #6
 8004b06:	e004      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004b08:	2304      	movs	r3, #4
 8004b0a:	e002      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e000      	b.n	8004b12 <UART_SetConfig+0xcf2>
 8004b10:	2301      	movs	r3, #1
 8004b12:	693a      	ldr	r2, [r7, #16]
 8004b14:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b18:	005a      	lsls	r2, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	685b      	ldr	r3, [r3, #4]
 8004b1e:	085b      	lsrs	r3, r3, #1
 8004b20:	441a      	add	r2, r3
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b2a:	b29b      	uxth	r3, r3
 8004b2c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004b2e:	e113      	b.n	8004d58 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d043      	beq.n	8004bc0 <UART_SetConfig+0xda0>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3c:	2b01      	cmp	r3, #1
 8004b3e:	d03d      	beq.n	8004bbc <UART_SetConfig+0xd9c>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b44:	2b02      	cmp	r3, #2
 8004b46:	d037      	beq.n	8004bb8 <UART_SetConfig+0xd98>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b4c:	2b03      	cmp	r3, #3
 8004b4e:	d031      	beq.n	8004bb4 <UART_SetConfig+0xd94>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	2b04      	cmp	r3, #4
 8004b56:	d02b      	beq.n	8004bb0 <UART_SetConfig+0xd90>
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	2b05      	cmp	r3, #5
 8004b5e:	d025      	beq.n	8004bac <UART_SetConfig+0xd8c>
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b64:	2b06      	cmp	r3, #6
 8004b66:	d01f      	beq.n	8004ba8 <UART_SetConfig+0xd88>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b6c:	2b07      	cmp	r3, #7
 8004b6e:	d019      	beq.n	8004ba4 <UART_SetConfig+0xd84>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b74:	2b08      	cmp	r3, #8
 8004b76:	d013      	beq.n	8004ba0 <UART_SetConfig+0xd80>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b7c:	2b09      	cmp	r3, #9
 8004b7e:	d00d      	beq.n	8004b9c <UART_SetConfig+0xd7c>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b84:	2b0a      	cmp	r3, #10
 8004b86:	d007      	beq.n	8004b98 <UART_SetConfig+0xd78>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b8c:	2b0b      	cmp	r3, #11
 8004b8e:	d101      	bne.n	8004b94 <UART_SetConfig+0xd74>
 8004b90:	4b8d      	ldr	r3, [pc, #564]	; (8004dc8 <UART_SetConfig+0xfa8>)
 8004b92:	e016      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004b94:	4b8d      	ldr	r3, [pc, #564]	; (8004dcc <UART_SetConfig+0xfac>)
 8004b96:	e014      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004b98:	4b8d      	ldr	r3, [pc, #564]	; (8004dd0 <UART_SetConfig+0xfb0>)
 8004b9a:	e012      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004b9c:	4b8d      	ldr	r3, [pc, #564]	; (8004dd4 <UART_SetConfig+0xfb4>)
 8004b9e:	e010      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004ba0:	4b8d      	ldr	r3, [pc, #564]	; (8004dd8 <UART_SetConfig+0xfb8>)
 8004ba2:	e00e      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004ba4:	4b8d      	ldr	r3, [pc, #564]	; (8004ddc <UART_SetConfig+0xfbc>)
 8004ba6:	e00c      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004ba8:	4b8d      	ldr	r3, [pc, #564]	; (8004de0 <UART_SetConfig+0xfc0>)
 8004baa:	e00a      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bac:	4b8d      	ldr	r3, [pc, #564]	; (8004de4 <UART_SetConfig+0xfc4>)
 8004bae:	e008      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bb0:	4b8d      	ldr	r3, [pc, #564]	; (8004de8 <UART_SetConfig+0xfc8>)
 8004bb2:	e006      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bb4:	4b8d      	ldr	r3, [pc, #564]	; (8004dec <UART_SetConfig+0xfcc>)
 8004bb6:	e004      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bb8:	4b8d      	ldr	r3, [pc, #564]	; (8004df0 <UART_SetConfig+0xfd0>)
 8004bba:	e002      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bbc:	4b8d      	ldr	r3, [pc, #564]	; (8004df4 <UART_SetConfig+0xfd4>)
 8004bbe:	e000      	b.n	8004bc2 <UART_SetConfig+0xda2>
 8004bc0:	4b82      	ldr	r3, [pc, #520]	; (8004dcc <UART_SetConfig+0xfac>)
 8004bc2:	687a      	ldr	r2, [r7, #4]
 8004bc4:	6852      	ldr	r2, [r2, #4]
 8004bc6:	0852      	lsrs	r2, r2, #1
 8004bc8:	441a      	add	r2, r3
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	685b      	ldr	r3, [r3, #4]
 8004bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bd2:	b29b      	uxth	r3, r3
 8004bd4:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004bd6:	e0bf      	b.n	8004d58 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004bd8:	f7fe f9f8 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8004bdc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d044      	beq.n	8004c70 <UART_SetConfig+0xe50>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b01      	cmp	r3, #1
 8004bec:	d03e      	beq.n	8004c6c <UART_SetConfig+0xe4c>
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d038      	beq.n	8004c68 <UART_SetConfig+0xe48>
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bfa:	2b03      	cmp	r3, #3
 8004bfc:	d032      	beq.n	8004c64 <UART_SetConfig+0xe44>
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c02:	2b04      	cmp	r3, #4
 8004c04:	d02c      	beq.n	8004c60 <UART_SetConfig+0xe40>
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0a:	2b05      	cmp	r3, #5
 8004c0c:	d026      	beq.n	8004c5c <UART_SetConfig+0xe3c>
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c12:	2b06      	cmp	r3, #6
 8004c14:	d020      	beq.n	8004c58 <UART_SetConfig+0xe38>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	2b07      	cmp	r3, #7
 8004c1c:	d01a      	beq.n	8004c54 <UART_SetConfig+0xe34>
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	2b08      	cmp	r3, #8
 8004c24:	d014      	beq.n	8004c50 <UART_SetConfig+0xe30>
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c2a:	2b09      	cmp	r3, #9
 8004c2c:	d00e      	beq.n	8004c4c <UART_SetConfig+0xe2c>
 8004c2e:	687b      	ldr	r3, [r7, #4]
 8004c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c32:	2b0a      	cmp	r3, #10
 8004c34:	d008      	beq.n	8004c48 <UART_SetConfig+0xe28>
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c3a:	2b0b      	cmp	r3, #11
 8004c3c:	d102      	bne.n	8004c44 <UART_SetConfig+0xe24>
 8004c3e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004c42:	e016      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c44:	2301      	movs	r3, #1
 8004c46:	e014      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c48:	2380      	movs	r3, #128	; 0x80
 8004c4a:	e012      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c4c:	2340      	movs	r3, #64	; 0x40
 8004c4e:	e010      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c50:	2320      	movs	r3, #32
 8004c52:	e00e      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c54:	2310      	movs	r3, #16
 8004c56:	e00c      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c58:	230c      	movs	r3, #12
 8004c5a:	e00a      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c5c:	230a      	movs	r3, #10
 8004c5e:	e008      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c60:	2308      	movs	r3, #8
 8004c62:	e006      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c64:	2306      	movs	r3, #6
 8004c66:	e004      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c68:	2304      	movs	r3, #4
 8004c6a:	e002      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c6c:	2302      	movs	r3, #2
 8004c6e:	e000      	b.n	8004c72 <UART_SetConfig+0xe52>
 8004c70:	2301      	movs	r3, #1
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c78:	005a      	lsls	r2, r3, #1
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	085b      	lsrs	r3, r3, #1
 8004c80:	441a      	add	r2, r3
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c8a:	b29b      	uxth	r3, r3
 8004c8c:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004c8e:	e063      	b.n	8004d58 <UART_SetConfig+0xf38>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d04f      	beq.n	8004d38 <UART_SetConfig+0xf18>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c9c:	2b01      	cmp	r3, #1
 8004c9e:	d048      	beq.n	8004d32 <UART_SetConfig+0xf12>
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ca4:	2b02      	cmp	r3, #2
 8004ca6:	d041      	beq.n	8004d2c <UART_SetConfig+0xf0c>
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cac:	2b03      	cmp	r3, #3
 8004cae:	d03a      	beq.n	8004d26 <UART_SetConfig+0xf06>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb4:	2b04      	cmp	r3, #4
 8004cb6:	d033      	beq.n	8004d20 <UART_SetConfig+0xf00>
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cbc:	2b05      	cmp	r3, #5
 8004cbe:	d02c      	beq.n	8004d1a <UART_SetConfig+0xefa>
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc4:	2b06      	cmp	r3, #6
 8004cc6:	d025      	beq.n	8004d14 <UART_SetConfig+0xef4>
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ccc:	2b07      	cmp	r3, #7
 8004cce:	d01e      	beq.n	8004d0e <UART_SetConfig+0xeee>
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd4:	2b08      	cmp	r3, #8
 8004cd6:	d017      	beq.n	8004d08 <UART_SetConfig+0xee8>
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cdc:	2b09      	cmp	r3, #9
 8004cde:	d010      	beq.n	8004d02 <UART_SetConfig+0xee2>
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ce4:	2b0a      	cmp	r3, #10
 8004ce6:	d009      	beq.n	8004cfc <UART_SetConfig+0xedc>
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cec:	2b0b      	cmp	r3, #11
 8004cee:	d102      	bne.n	8004cf6 <UART_SetConfig+0xed6>
 8004cf0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004cf4:	e022      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004cf6:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004cfa:	e01f      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004cfc:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d00:	e01c      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8004d06:	e019      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d08:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8004d0c:	e016      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d0e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8004d12:	e013      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d14:	f241 5354 	movw	r3, #5460	; 0x1554
 8004d18:	e010      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d1a:	f641 1398 	movw	r3, #6552	; 0x1998
 8004d1e:	e00d      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d20:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004d24:	e00a      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d26:	f642 23aa 	movw	r3, #10922	; 0x2aaa
 8004d2a:	e007      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d2c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004d30:	e004      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d32:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004d36:	e001      	b.n	8004d3c <UART_SetConfig+0xf1c>
 8004d38:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8004d3c:	687a      	ldr	r2, [r7, #4]
 8004d3e:	6852      	ldr	r2, [r2, #4]
 8004d40:	0852      	lsrs	r2, r2, #1
 8004d42:	441a      	add	r2, r3
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	685b      	ldr	r3, [r3, #4]
 8004d48:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d4c:	b29b      	uxth	r3, r3
 8004d4e:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004d50:	e002      	b.n	8004d58 <UART_SetConfig+0xf38>
      default:
        ret = HAL_ERROR;
 8004d52:	2301      	movs	r3, #1
 8004d54:	76fb      	strb	r3, [r7, #27]
        break;
 8004d56:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	69fb      	ldr	r3, [r7, #28]
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d916      	bls.n	8004d8c <UART_SetConfig+0xf6c>
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d64:	d212      	bcs.n	8004d8c <UART_SetConfig+0xf6c>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d66:	69fb      	ldr	r3, [r7, #28]
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f023 030f 	bic.w	r3, r3, #15
 8004d6e:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d70:	69fb      	ldr	r3, [r7, #28]
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	89fb      	ldrh	r3, [r7, #14]
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	89fa      	ldrh	r2, [r7, #14]
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e20c      	b.n	80051a6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	76fb      	strb	r3, [r7, #27]
 8004d90:	e209      	b.n	80051a6 <UART_SetConfig+0x1386>
    }
  }
  else
  {
    switch (clocksource)
 8004d92:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004d96:	2b08      	cmp	r3, #8
 8004d98:	f200 81f4 	bhi.w	8005184 <UART_SetConfig+0x1364>
 8004d9c:	a201      	add	r2, pc, #4	; (adr r2, 8004da4 <UART_SetConfig+0xf84>)
 8004d9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004da2:	bf00      	nop
 8004da4:	08004df9 	.word	0x08004df9
 8004da8:	08004eaf 	.word	0x08004eaf
 8004dac:	08004f65 	.word	0x08004f65
 8004db0:	08005185 	.word	0x08005185
 8004db4:	0800500f 	.word	0x0800500f
 8004db8:	08005185 	.word	0x08005185
 8004dbc:	08005185 	.word	0x08005185
 8004dc0:	08005185 	.word	0x08005185
 8004dc4:	080050c5 	.word	0x080050c5
 8004dc8:	0001e848 	.word	0x0001e848
 8004dcc:	01e84800 	.word	0x01e84800
 8004dd0:	0003d090 	.word	0x0003d090
 8004dd4:	0007a120 	.word	0x0007a120
 8004dd8:	000f4240 	.word	0x000f4240
 8004ddc:	001e8480 	.word	0x001e8480
 8004de0:	0028b0aa 	.word	0x0028b0aa
 8004de4:	0030d400 	.word	0x0030d400
 8004de8:	003d0900 	.word	0x003d0900
 8004dec:	00516154 	.word	0x00516154
 8004df0:	007a1200 	.word	0x007a1200
 8004df4:	00f42400 	.word	0x00f42400
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004df8:	f7fe f97e 	bl	80030f8 <HAL_RCC_GetPCLK1Freq>
 8004dfc:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d044      	beq.n	8004e90 <UART_SetConfig+0x1070>
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e0a:	2b01      	cmp	r3, #1
 8004e0c:	d03e      	beq.n	8004e8c <UART_SetConfig+0x106c>
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e12:	2b02      	cmp	r3, #2
 8004e14:	d038      	beq.n	8004e88 <UART_SetConfig+0x1068>
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e1a:	2b03      	cmp	r3, #3
 8004e1c:	d032      	beq.n	8004e84 <UART_SetConfig+0x1064>
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e22:	2b04      	cmp	r3, #4
 8004e24:	d02c      	beq.n	8004e80 <UART_SetConfig+0x1060>
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e2a:	2b05      	cmp	r3, #5
 8004e2c:	d026      	beq.n	8004e7c <UART_SetConfig+0x105c>
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e32:	2b06      	cmp	r3, #6
 8004e34:	d020      	beq.n	8004e78 <UART_SetConfig+0x1058>
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	2b07      	cmp	r3, #7
 8004e3c:	d01a      	beq.n	8004e74 <UART_SetConfig+0x1054>
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	2b08      	cmp	r3, #8
 8004e44:	d014      	beq.n	8004e70 <UART_SetConfig+0x1050>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e4a:	2b09      	cmp	r3, #9
 8004e4c:	d00e      	beq.n	8004e6c <UART_SetConfig+0x104c>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e52:	2b0a      	cmp	r3, #10
 8004e54:	d008      	beq.n	8004e68 <UART_SetConfig+0x1048>
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e5a:	2b0b      	cmp	r3, #11
 8004e5c:	d102      	bne.n	8004e64 <UART_SetConfig+0x1044>
 8004e5e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004e62:	e016      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e64:	2301      	movs	r3, #1
 8004e66:	e014      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e68:	2380      	movs	r3, #128	; 0x80
 8004e6a:	e012      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e6c:	2340      	movs	r3, #64	; 0x40
 8004e6e:	e010      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e70:	2320      	movs	r3, #32
 8004e72:	e00e      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e74:	2310      	movs	r3, #16
 8004e76:	e00c      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e78:	230c      	movs	r3, #12
 8004e7a:	e00a      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e7c:	230a      	movs	r3, #10
 8004e7e:	e008      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e80:	2308      	movs	r3, #8
 8004e82:	e006      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e84:	2306      	movs	r3, #6
 8004e86:	e004      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e88:	2304      	movs	r3, #4
 8004e8a:	e002      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e8c:	2302      	movs	r3, #2
 8004e8e:	e000      	b.n	8004e92 <UART_SetConfig+0x1072>
 8004e90:	2301      	movs	r3, #1
 8004e92:	693a      	ldr	r2, [r7, #16]
 8004e94:	fbb2 f2f3 	udiv	r2, r2, r3
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	685b      	ldr	r3, [r3, #4]
 8004e9c:	085b      	lsrs	r3, r3, #1
 8004e9e:	441a      	add	r2, r3
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ea8:	b29b      	uxth	r3, r3
 8004eaa:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004eac:	e16d      	b.n	800518a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004eae:	f7fe f939 	bl	8003124 <HAL_RCC_GetPCLK2Freq>
 8004eb2:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d044      	beq.n	8004f46 <UART_SetConfig+0x1126>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec0:	2b01      	cmp	r3, #1
 8004ec2:	d03e      	beq.n	8004f42 <UART_SetConfig+0x1122>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ec8:	2b02      	cmp	r3, #2
 8004eca:	d038      	beq.n	8004f3e <UART_SetConfig+0x111e>
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed0:	2b03      	cmp	r3, #3
 8004ed2:	d032      	beq.n	8004f3a <UART_SetConfig+0x111a>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ed8:	2b04      	cmp	r3, #4
 8004eda:	d02c      	beq.n	8004f36 <UART_SetConfig+0x1116>
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee0:	2b05      	cmp	r3, #5
 8004ee2:	d026      	beq.n	8004f32 <UART_SetConfig+0x1112>
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ee8:	2b06      	cmp	r3, #6
 8004eea:	d020      	beq.n	8004f2e <UART_SetConfig+0x110e>
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef0:	2b07      	cmp	r3, #7
 8004ef2:	d01a      	beq.n	8004f2a <UART_SetConfig+0x110a>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ef8:	2b08      	cmp	r3, #8
 8004efa:	d014      	beq.n	8004f26 <UART_SetConfig+0x1106>
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f00:	2b09      	cmp	r3, #9
 8004f02:	d00e      	beq.n	8004f22 <UART_SetConfig+0x1102>
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f08:	2b0a      	cmp	r3, #10
 8004f0a:	d008      	beq.n	8004f1e <UART_SetConfig+0x10fe>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f10:	2b0b      	cmp	r3, #11
 8004f12:	d102      	bne.n	8004f1a <UART_SetConfig+0x10fa>
 8004f14:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004f18:	e016      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f1a:	2301      	movs	r3, #1
 8004f1c:	e014      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f1e:	2380      	movs	r3, #128	; 0x80
 8004f20:	e012      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f22:	2340      	movs	r3, #64	; 0x40
 8004f24:	e010      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f26:	2320      	movs	r3, #32
 8004f28:	e00e      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f2a:	2310      	movs	r3, #16
 8004f2c:	e00c      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f2e:	230c      	movs	r3, #12
 8004f30:	e00a      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f32:	230a      	movs	r3, #10
 8004f34:	e008      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f36:	2308      	movs	r3, #8
 8004f38:	e006      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f3a:	2306      	movs	r3, #6
 8004f3c:	e004      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f3e:	2304      	movs	r3, #4
 8004f40:	e002      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f42:	2302      	movs	r3, #2
 8004f44:	e000      	b.n	8004f48 <UART_SetConfig+0x1128>
 8004f46:	2301      	movs	r3, #1
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	fbb2 f2f3 	udiv	r2, r2, r3
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	685b      	ldr	r3, [r3, #4]
 8004f52:	085b      	lsrs	r3, r3, #1
 8004f54:	441a      	add	r2, r3
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	685b      	ldr	r3, [r3, #4]
 8004f5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f5e:	b29b      	uxth	r3, r3
 8004f60:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8004f62:	e112      	b.n	800518a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d044      	beq.n	8004ff6 <UART_SetConfig+0x11d6>
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f70:	2b01      	cmp	r3, #1
 8004f72:	d03e      	beq.n	8004ff2 <UART_SetConfig+0x11d2>
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f78:	2b02      	cmp	r3, #2
 8004f7a:	d038      	beq.n	8004fee <UART_SetConfig+0x11ce>
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	d032      	beq.n	8004fea <UART_SetConfig+0x11ca>
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f88:	2b04      	cmp	r3, #4
 8004f8a:	d02c      	beq.n	8004fe6 <UART_SetConfig+0x11c6>
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f90:	2b05      	cmp	r3, #5
 8004f92:	d026      	beq.n	8004fe2 <UART_SetConfig+0x11c2>
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f98:	2b06      	cmp	r3, #6
 8004f9a:	d020      	beq.n	8004fde <UART_SetConfig+0x11be>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa0:	2b07      	cmp	r3, #7
 8004fa2:	d01a      	beq.n	8004fda <UART_SetConfig+0x11ba>
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fa8:	2b08      	cmp	r3, #8
 8004faa:	d014      	beq.n	8004fd6 <UART_SetConfig+0x11b6>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb0:	2b09      	cmp	r3, #9
 8004fb2:	d00e      	beq.n	8004fd2 <UART_SetConfig+0x11b2>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fb8:	2b0a      	cmp	r3, #10
 8004fba:	d008      	beq.n	8004fce <UART_SetConfig+0x11ae>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004fc0:	2b0b      	cmp	r3, #11
 8004fc2:	d102      	bne.n	8004fca <UART_SetConfig+0x11aa>
 8004fc4:	f24f 4324 	movw	r3, #62500	; 0xf424
 8004fc8:	e016      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fca:	4b81      	ldr	r3, [pc, #516]	; (80051d0 <UART_SetConfig+0x13b0>)
 8004fcc:	e014      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fce:	4b81      	ldr	r3, [pc, #516]	; (80051d4 <UART_SetConfig+0x13b4>)
 8004fd0:	e012      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fd2:	4b81      	ldr	r3, [pc, #516]	; (80051d8 <UART_SetConfig+0x13b8>)
 8004fd4:	e010      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fd6:	4b81      	ldr	r3, [pc, #516]	; (80051dc <UART_SetConfig+0x13bc>)
 8004fd8:	e00e      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fda:	4b81      	ldr	r3, [pc, #516]	; (80051e0 <UART_SetConfig+0x13c0>)
 8004fdc:	e00c      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fde:	4b81      	ldr	r3, [pc, #516]	; (80051e4 <UART_SetConfig+0x13c4>)
 8004fe0:	e00a      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fe2:	4b81      	ldr	r3, [pc, #516]	; (80051e8 <UART_SetConfig+0x13c8>)
 8004fe4:	e008      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fe6:	4b81      	ldr	r3, [pc, #516]	; (80051ec <UART_SetConfig+0x13cc>)
 8004fe8:	e006      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fea:	4b81      	ldr	r3, [pc, #516]	; (80051f0 <UART_SetConfig+0x13d0>)
 8004fec:	e004      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004fee:	4b81      	ldr	r3, [pc, #516]	; (80051f4 <UART_SetConfig+0x13d4>)
 8004ff0:	e002      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004ff2:	4b81      	ldr	r3, [pc, #516]	; (80051f8 <UART_SetConfig+0x13d8>)
 8004ff4:	e000      	b.n	8004ff8 <UART_SetConfig+0x11d8>
 8004ff6:	4b76      	ldr	r3, [pc, #472]	; (80051d0 <UART_SetConfig+0x13b0>)
 8004ff8:	687a      	ldr	r2, [r7, #4]
 8004ffa:	6852      	ldr	r2, [r2, #4]
 8004ffc:	0852      	lsrs	r2, r2, #1
 8004ffe:	441a      	add	r2, r3
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	685b      	ldr	r3, [r3, #4]
 8005004:	fbb2 f3f3 	udiv	r3, r2, r3
 8005008:	b29b      	uxth	r3, r3
 800500a:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 800500c:	e0bd      	b.n	800518a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800500e:	f7fd ffdd 	bl	8002fcc <HAL_RCC_GetSysClockFreq>
 8005012:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005018:	2b00      	cmp	r3, #0
 800501a:	d044      	beq.n	80050a6 <UART_SetConfig+0x1286>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005020:	2b01      	cmp	r3, #1
 8005022:	d03e      	beq.n	80050a2 <UART_SetConfig+0x1282>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005028:	2b02      	cmp	r3, #2
 800502a:	d038      	beq.n	800509e <UART_SetConfig+0x127e>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005030:	2b03      	cmp	r3, #3
 8005032:	d032      	beq.n	800509a <UART_SetConfig+0x127a>
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005038:	2b04      	cmp	r3, #4
 800503a:	d02c      	beq.n	8005096 <UART_SetConfig+0x1276>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005040:	2b05      	cmp	r3, #5
 8005042:	d026      	beq.n	8005092 <UART_SetConfig+0x1272>
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005048:	2b06      	cmp	r3, #6
 800504a:	d020      	beq.n	800508e <UART_SetConfig+0x126e>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005050:	2b07      	cmp	r3, #7
 8005052:	d01a      	beq.n	800508a <UART_SetConfig+0x126a>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005058:	2b08      	cmp	r3, #8
 800505a:	d014      	beq.n	8005086 <UART_SetConfig+0x1266>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005060:	2b09      	cmp	r3, #9
 8005062:	d00e      	beq.n	8005082 <UART_SetConfig+0x1262>
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005068:	2b0a      	cmp	r3, #10
 800506a:	d008      	beq.n	800507e <UART_SetConfig+0x125e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005070:	2b0b      	cmp	r3, #11
 8005072:	d102      	bne.n	800507a <UART_SetConfig+0x125a>
 8005074:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005078:	e016      	b.n	80050a8 <UART_SetConfig+0x1288>
 800507a:	2301      	movs	r3, #1
 800507c:	e014      	b.n	80050a8 <UART_SetConfig+0x1288>
 800507e:	2380      	movs	r3, #128	; 0x80
 8005080:	e012      	b.n	80050a8 <UART_SetConfig+0x1288>
 8005082:	2340      	movs	r3, #64	; 0x40
 8005084:	e010      	b.n	80050a8 <UART_SetConfig+0x1288>
 8005086:	2320      	movs	r3, #32
 8005088:	e00e      	b.n	80050a8 <UART_SetConfig+0x1288>
 800508a:	2310      	movs	r3, #16
 800508c:	e00c      	b.n	80050a8 <UART_SetConfig+0x1288>
 800508e:	230c      	movs	r3, #12
 8005090:	e00a      	b.n	80050a8 <UART_SetConfig+0x1288>
 8005092:	230a      	movs	r3, #10
 8005094:	e008      	b.n	80050a8 <UART_SetConfig+0x1288>
 8005096:	2308      	movs	r3, #8
 8005098:	e006      	b.n	80050a8 <UART_SetConfig+0x1288>
 800509a:	2306      	movs	r3, #6
 800509c:	e004      	b.n	80050a8 <UART_SetConfig+0x1288>
 800509e:	2304      	movs	r3, #4
 80050a0:	e002      	b.n	80050a8 <UART_SetConfig+0x1288>
 80050a2:	2302      	movs	r3, #2
 80050a4:	e000      	b.n	80050a8 <UART_SetConfig+0x1288>
 80050a6:	2301      	movs	r3, #1
 80050a8:	693a      	ldr	r2, [r7, #16]
 80050aa:	fbb2 f2f3 	udiv	r2, r2, r3
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	085b      	lsrs	r3, r3, #1
 80050b4:	441a      	add	r2, r3
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	685b      	ldr	r3, [r3, #4]
 80050ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80050be:	b29b      	uxth	r3, r3
 80050c0:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 80050c2:	e062      	b.n	800518a <UART_SetConfig+0x136a>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d04e      	beq.n	800516a <UART_SetConfig+0x134a>
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d0:	2b01      	cmp	r3, #1
 80050d2:	d047      	beq.n	8005164 <UART_SetConfig+0x1344>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050d8:	2b02      	cmp	r3, #2
 80050da:	d040      	beq.n	800515e <UART_SetConfig+0x133e>
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e0:	2b03      	cmp	r3, #3
 80050e2:	d039      	beq.n	8005158 <UART_SetConfig+0x1338>
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050e8:	2b04      	cmp	r3, #4
 80050ea:	d032      	beq.n	8005152 <UART_SetConfig+0x1332>
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f0:	2b05      	cmp	r3, #5
 80050f2:	d02b      	beq.n	800514c <UART_SetConfig+0x132c>
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050f8:	2b06      	cmp	r3, #6
 80050fa:	d024      	beq.n	8005146 <UART_SetConfig+0x1326>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005100:	2b07      	cmp	r3, #7
 8005102:	d01d      	beq.n	8005140 <UART_SetConfig+0x1320>
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005108:	2b08      	cmp	r3, #8
 800510a:	d016      	beq.n	800513a <UART_SetConfig+0x131a>
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005110:	2b09      	cmp	r3, #9
 8005112:	d00f      	beq.n	8005134 <UART_SetConfig+0x1314>
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005118:	2b0a      	cmp	r3, #10
 800511a:	d008      	beq.n	800512e <UART_SetConfig+0x130e>
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005120:	2b0b      	cmp	r3, #11
 8005122:	d101      	bne.n	8005128 <UART_SetConfig+0x1308>
 8005124:	2380      	movs	r3, #128	; 0x80
 8005126:	e022      	b.n	800516e <UART_SetConfig+0x134e>
 8005128:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800512c:	e01f      	b.n	800516e <UART_SetConfig+0x134e>
 800512e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005132:	e01c      	b.n	800516e <UART_SetConfig+0x134e>
 8005134:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005138:	e019      	b.n	800516e <UART_SetConfig+0x134e>
 800513a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800513e:	e016      	b.n	800516e <UART_SetConfig+0x134e>
 8005140:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005144:	e013      	b.n	800516e <UART_SetConfig+0x134e>
 8005146:	f640 23aa 	movw	r3, #2730	; 0xaaa
 800514a:	e010      	b.n	800516e <UART_SetConfig+0x134e>
 800514c:	f640 43cc 	movw	r3, #3276	; 0xccc
 8005150:	e00d      	b.n	800516e <UART_SetConfig+0x134e>
 8005152:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005156:	e00a      	b.n	800516e <UART_SetConfig+0x134e>
 8005158:	f241 5355 	movw	r3, #5461	; 0x1555
 800515c:	e007      	b.n	800516e <UART_SetConfig+0x134e>
 800515e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005162:	e004      	b.n	800516e <UART_SetConfig+0x134e>
 8005164:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005168:	e001      	b.n	800516e <UART_SetConfig+0x134e>
 800516a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800516e:	687a      	ldr	r2, [r7, #4]
 8005170:	6852      	ldr	r2, [r2, #4]
 8005172:	0852      	lsrs	r2, r2, #1
 8005174:	441a      	add	r2, r3
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	685b      	ldr	r3, [r3, #4]
 800517a:	fbb2 f3f3 	udiv	r3, r2, r3
 800517e:	b29b      	uxth	r3, r3
 8005180:	61fb      	str	r3, [r7, #28]
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
#endif /* USART_PRESC_PRESCALER */
        break;
 8005182:	e002      	b.n	800518a <UART_SetConfig+0x136a>
      default:
        ret = HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	76fb      	strb	r3, [r7, #27]
        break;
 8005188:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	2b0f      	cmp	r3, #15
 800518e:	d908      	bls.n	80051a2 <UART_SetConfig+0x1382>
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005196:	d204      	bcs.n	80051a2 <UART_SetConfig+0x1382>
    {
      huart->Instance->BRR = usartdiv;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	69fa      	ldr	r2, [r7, #28]
 800519e:	60da      	str	r2, [r3, #12]
 80051a0:	e001      	b.n	80051a6 <UART_SetConfig+0x1386>
    }
    else
    {
      ret = HAL_ERROR;
 80051a2:	2301      	movs	r3, #1
 80051a4:	76fb      	strb	r3, [r7, #27]
    }
  }

#if defined(USART_CR1_FIFOEN)
  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2201      	movs	r2, #1
 80051aa:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2201      	movs	r2, #1
 80051b2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->TxISR = NULL;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	671a      	str	r2, [r3, #112]	; 0x70

  return ret;
 80051c2:	7efb      	ldrb	r3, [r7, #27]
}
 80051c4:	4618      	mov	r0, r3
 80051c6:	3728      	adds	r7, #40	; 0x28
 80051c8:	46bd      	mov	sp, r7
 80051ca:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}
 80051ce:	bf00      	nop
 80051d0:	00f42400 	.word	0x00f42400
 80051d4:	0001e848 	.word	0x0001e848
 80051d8:	0003d090 	.word	0x0003d090
 80051dc:	0007a120 	.word	0x0007a120
 80051e0:	000f4240 	.word	0x000f4240
 80051e4:	00145855 	.word	0x00145855
 80051e8:	00186a00 	.word	0x00186a00
 80051ec:	001e8480 	.word	0x001e8480
 80051f0:	0028b0aa 	.word	0x0028b0aa
 80051f4:	003d0900 	.word	0x003d0900
 80051f8:	007a1200 	.word	0x007a1200

080051fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80051fc:	b480      	push	{r7}
 80051fe:	b083      	sub	sp, #12
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005208:	f003 0301 	and.w	r3, r3, #1
 800520c:	2b00      	cmp	r3, #0
 800520e:	d00a      	beq.n	8005226 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	685b      	ldr	r3, [r3, #4]
 8005216:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	430a      	orrs	r2, r1
 8005224:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800522a:	f003 0302 	and.w	r3, r3, #2
 800522e:	2b00      	cmp	r3, #0
 8005230:	d00a      	beq.n	8005248 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	430a      	orrs	r2, r1
 8005246:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800524c:	f003 0304 	and.w	r3, r3, #4
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00a      	beq.n	800526a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	681b      	ldr	r3, [r3, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	430a      	orrs	r2, r1
 8005268:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800526a:	687b      	ldr	r3, [r7, #4]
 800526c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800526e:	f003 0308 	and.w	r3, r3, #8
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00a      	beq.n	800528c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	685b      	ldr	r3, [r3, #4]
 800527c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	430a      	orrs	r2, r1
 800528a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005290:	f003 0310 	and.w	r3, r3, #16
 8005294:	2b00      	cmp	r3, #0
 8005296:	d00a      	beq.n	80052ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	689b      	ldr	r3, [r3, #8]
 800529e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	430a      	orrs	r2, r1
 80052ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052b2:	f003 0320 	and.w	r3, r3, #32
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d00a      	beq.n	80052d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80052ba:	687b      	ldr	r3, [r7, #4]
 80052bc:	681b      	ldr	r3, [r3, #0]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	430a      	orrs	r2, r1
 80052ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d01a      	beq.n	8005312 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	685b      	ldr	r3, [r3, #4]
 80052e2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	430a      	orrs	r2, r1
 80052f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052f6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80052fa:	d10a      	bne.n	8005312 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	685b      	ldr	r3, [r3, #4]
 8005302:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	430a      	orrs	r2, r1
 8005310:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005316:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800531a:	2b00      	cmp	r3, #0
 800531c:	d00a      	beq.n	8005334 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	685b      	ldr	r3, [r3, #4]
 8005324:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	430a      	orrs	r2, r1
 8005332:	605a      	str	r2, [r3, #4]
  }
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005340:	b580      	push	{r7, lr}
 8005342:	b086      	sub	sp, #24
 8005344:	af02      	add	r7, sp, #8
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 8005350:	f7fb fef6 	bl	8001140 <HAL_GetTick>
 8005354:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	f003 0308 	and.w	r3, r3, #8
 8005360:	2b08      	cmp	r3, #8
 8005362:	d10e      	bne.n	8005382 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005364:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005368:	9300      	str	r3, [sp, #0]
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	2200      	movs	r2, #0
 800536e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005372:	6878      	ldr	r0, [r7, #4]
 8005374:	f000 f82c 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d001      	beq.n	8005382 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800537e:	2303      	movs	r3, #3
 8005380:	e022      	b.n	80053c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f003 0304 	and.w	r3, r3, #4
 800538c:	2b04      	cmp	r3, #4
 800538e:	d10e      	bne.n	80053ae <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005390:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8005394:	9300      	str	r3, [sp, #0]
 8005396:	68fb      	ldr	r3, [r7, #12]
 8005398:	2200      	movs	r2, #0
 800539a:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800539e:	6878      	ldr	r0, [r7, #4]
 80053a0:	f000 f816 	bl	80053d0 <UART_WaitOnFlagUntilTimeout>
 80053a4:	4603      	mov	r3, r0
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d001      	beq.n	80053ae <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80053aa:	2303      	movs	r3, #3
 80053ac:	e00c      	b.n	80053c8 <UART_CheckIdleState+0x88>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2220      	movs	r2, #32
 80053b2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_READY;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2220      	movs	r2, #32
 80053ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UNLOCK(huart);
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2200      	movs	r2, #0
 80053c2:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80053c6:	2300      	movs	r3, #0
}
 80053c8:	4618      	mov	r0, r3
 80053ca:	3710      	adds	r7, #16
 80053cc:	46bd      	mov	sp, r7
 80053ce:	bd80      	pop	{r7, pc}

080053d0 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80053d0:	b580      	push	{r7, lr}
 80053d2:	b084      	sub	sp, #16
 80053d4:	af00      	add	r7, sp, #0
 80053d6:	60f8      	str	r0, [r7, #12]
 80053d8:	60b9      	str	r1, [r7, #8]
 80053da:	603b      	str	r3, [r7, #0]
 80053dc:	4613      	mov	r3, r2
 80053de:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80053e0:	e062      	b.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd8>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80053e2:	69bb      	ldr	r3, [r7, #24]
 80053e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80053e8:	d05e      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd8>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80053ea:	f7fb fea9 	bl	8001140 <HAL_GetTick>
 80053ee:	4602      	mov	r2, r0
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	1ad3      	subs	r3, r2, r3
 80053f4:	69ba      	ldr	r2, [r7, #24]
 80053f6:	429a      	cmp	r2, r3
 80053f8:	d302      	bcc.n	8005400 <UART_WaitOnFlagUntilTimeout+0x30>
 80053fa:	69bb      	ldr	r3, [r7, #24]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d11d      	bne.n	800543c <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	681a      	ldr	r2, [r3, #0]
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800540e:	601a      	str	r2, [r3, #0]
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	681b      	ldr	r3, [r3, #0]
 8005414:	689a      	ldr	r2, [r3, #8]
 8005416:	68fb      	ldr	r3, [r7, #12]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	f022 0201 	bic.w	r2, r2, #1
 800541e:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	2220      	movs	r2, #32
 8005424:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->RxState = HAL_UART_STATE_READY;
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2220      	movs	r2, #32
 800542c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        __HAL_UNLOCK(huart);
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	2200      	movs	r2, #0
 8005434:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

        return HAL_TIMEOUT;
 8005438:	2303      	movs	r3, #3
 800543a:	e045      	b.n	80054c8 <UART_WaitOnFlagUntilTimeout+0xf8>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	681b      	ldr	r3, [r3, #0]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	f003 0304 	and.w	r3, r3, #4
 8005446:	2b00      	cmp	r3, #0
 8005448:	d02e      	beq.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd8>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69db      	ldr	r3, [r3, #28]
 8005450:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005454:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005458:	d126      	bne.n	80054a8 <UART_WaitOnFlagUntilTimeout+0xd8>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005462:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	681a      	ldr	r2, [r3, #0]
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8005472:	601a      	str	r2, [r3, #0]
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	689a      	ldr	r2, [r3, #8]
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f022 0201 	bic.w	r2, r2, #1
 8005482:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	2220      	movs	r2, #32
 8005488:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->RxState = HAL_UART_STATE_READY;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	2220      	movs	r2, #32
 8005490:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	2220      	movs	r2, #32
 8005498:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800549c:	68fb      	ldr	r3, [r7, #12]
 800549e:	2200      	movs	r2, #0
 80054a0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
          
          return HAL_TIMEOUT;
 80054a4:	2303      	movs	r3, #3
 80054a6:	e00f      	b.n	80054c8 <UART_WaitOnFlagUntilTimeout+0xf8>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	69da      	ldr	r2, [r3, #28]
 80054ae:	68bb      	ldr	r3, [r7, #8]
 80054b0:	4013      	ands	r3, r2
 80054b2:	68ba      	ldr	r2, [r7, #8]
 80054b4:	429a      	cmp	r2, r3
 80054b6:	bf0c      	ite	eq
 80054b8:	2301      	moveq	r3, #1
 80054ba:	2300      	movne	r3, #0
 80054bc:	b2db      	uxtb	r3, r3
 80054be:	461a      	mov	r2, r3
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d08d      	beq.n	80053e2 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80054c6:	2300      	movs	r3, #0
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}

080054d0 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 80054d0:	b480      	push	{r7}
 80054d2:	b085      	sub	sp, #20
 80054d4:	af00      	add	r7, sp, #0
 80054d6:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80054de:	2b01      	cmp	r3, #1
 80054e0:	d101      	bne.n	80054e6 <HAL_UARTEx_DisableFifoMode+0x16>
 80054e2:	2302      	movs	r3, #2
 80054e4:	e027      	b.n	8005536 <HAL_UARTEx_DisableFifoMode+0x66>
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	2201      	movs	r2, #1
 80054ea:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2224      	movs	r2, #36	; 0x24
 80054f2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	681a      	ldr	r2, [r3, #0]
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f022 0201 	bic.w	r2, r2, #1
 800550c:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8005514:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	2200      	movs	r2, #0
 800551a:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	68fa      	ldr	r2, [r7, #12]
 8005522:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	2220      	movs	r2, #32
 8005528:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	2200      	movs	r2, #0
 8005530:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005534:	2300      	movs	r3, #0
}
 8005536:	4618      	mov	r0, r3
 8005538:	3714      	adds	r7, #20
 800553a:	46bd      	mov	sp, r7
 800553c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005540:	4770      	bx	lr

08005542 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005542:	b580      	push	{r7, lr}
 8005544:	b084      	sub	sp, #16
 8005546:	af00      	add	r7, sp, #0
 8005548:	6078      	str	r0, [r7, #4]
 800554a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 8005552:	2b01      	cmp	r3, #1
 8005554:	d101      	bne.n	800555a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005556:	2302      	movs	r3, #2
 8005558:	e02d      	b.n	80055b6 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	2201      	movs	r2, #1
 800555e:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	2224      	movs	r2, #36	; 0x24
 8005566:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	681b      	ldr	r3, [r3, #0]
 8005576:	681a      	ldr	r2, [r3, #0]
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	f022 0201 	bic.w	r2, r2, #1
 8005580:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	683a      	ldr	r2, [r7, #0]
 8005592:	430a      	orrs	r2, r1
 8005594:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f850 	bl	800563c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	68fa      	ldr	r2, [r7, #12]
 80055a2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2220      	movs	r2, #32
 80055a8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	2200      	movs	r2, #0
 80055b0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 80055b4:	2300      	movs	r3, #0
}
 80055b6:	4618      	mov	r0, r3
 80055b8:	3710      	adds	r7, #16
 80055ba:	46bd      	mov	sp, r7
 80055bc:	bd80      	pop	{r7, pc}

080055be <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b084      	sub	sp, #16
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	f893 307c 	ldrb.w	r3, [r3, #124]	; 0x7c
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d101      	bne.n	80055d6 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 80055d2:	2302      	movs	r3, #2
 80055d4:	e02d      	b.n	8005632 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	2201      	movs	r2, #1
 80055da:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  huart->gState = HAL_UART_STATE_BUSY;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2224      	movs	r2, #36	; 0x24
 80055e2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	681b      	ldr	r3, [r3, #0]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	681b      	ldr	r3, [r3, #0]
 80055f2:	681a      	ldr	r2, [r3, #0]
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	f022 0201 	bic.w	r2, r2, #1
 80055fc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	689b      	ldr	r3, [r3, #8]
 8005604:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	683a      	ldr	r2, [r7, #0]
 800560e:	430a      	orrs	r2, r1
 8005610:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005612:	6878      	ldr	r0, [r7, #4]
 8005614:	f000 f812 	bl	800563c <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	681b      	ldr	r3, [r3, #0]
 800561c:	68fa      	ldr	r2, [r7, #12]
 800561e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005630:	2300      	movs	r3, #0
}
 8005632:	4618      	mov	r0, r3
 8005634:	3710      	adds	r7, #16
 8005636:	46bd      	mov	sp, r7
 8005638:	bd80      	pop	{r7, pc}
	...

0800563c <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 800563c:	b480      	push	{r7}
 800563e:	b089      	sub	sp, #36	; 0x24
 8005640:	af00      	add	r7, sp, #0
 8005642:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_depth;
  uint8_t tx_fifo_depth;
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
 8005644:	4a2f      	ldr	r2, [pc, #188]	; (8005704 <UARTEx_SetNbDataToProcess+0xc8>)
 8005646:	f107 0314 	add.w	r3, r7, #20
 800564a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800564e:	e883 0003 	stmia.w	r3, {r0, r1}
  uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};
 8005652:	4a2d      	ldr	r2, [pc, #180]	; (8005708 <UARTEx_SetNbDataToProcess+0xcc>)
 8005654:	f107 030c 	add.w	r3, r7, #12
 8005658:	e892 0003 	ldmia.w	r2, {r0, r1}
 800565c:	e883 0003 	stmia.w	r3, {r0, r1}

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8005664:	2b00      	cmp	r3, #0
 8005666:	d108      	bne.n	800567a <UARTEx_SetNbDataToProcess+0x3e>
  {
    huart->NbTxDataToProcess = 1U;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	2201      	movs	r2, #1
 800566c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005678:	e03d      	b.n	80056f6 <UARTEx_SetNbDataToProcess+0xba>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800567a:	2308      	movs	r3, #8
 800567c:	77fb      	strb	r3, [r7, #31]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800567e:	2308      	movs	r3, #8
 8005680:	77bb      	strb	r3, [r7, #30]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	689b      	ldr	r3, [r3, #8]
 8005688:	0e5b      	lsrs	r3, r3, #25
 800568a:	b2db      	uxtb	r3, r3
 800568c:	f003 0307 	and.w	r3, r3, #7
 8005690:	777b      	strb	r3, [r7, #29]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	0f5b      	lsrs	r3, r3, #29
 800569a:	b2db      	uxtb	r3, r3
 800569c:	f003 0307 	and.w	r3, r3, #7
 80056a0:	773b      	strb	r3, [r7, #28]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) / (uint16_t)denominator[tx_fifo_threshold];
 80056a2:	7fbb      	ldrb	r3, [r7, #30]
 80056a4:	7f3a      	ldrb	r2, [r7, #28]
 80056a6:	f107 0120 	add.w	r1, r7, #32
 80056aa:	440a      	add	r2, r1
 80056ac:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056b0:	fb02 f303 	mul.w	r3, r2, r3
 80056b4:	7f3a      	ldrb	r2, [r7, #28]
 80056b6:	f107 0120 	add.w	r1, r7, #32
 80056ba:	440a      	add	r2, r1
 80056bc:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056c0:	fb93 f3f2 	sdiv	r3, r3, r2
 80056c4:	b29a      	uxth	r2, r3
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) / (uint16_t)denominator[rx_fifo_threshold];
 80056cc:	7ffb      	ldrb	r3, [r7, #31]
 80056ce:	7f7a      	ldrb	r2, [r7, #29]
 80056d0:	f107 0120 	add.w	r1, r7, #32
 80056d4:	440a      	add	r2, r1
 80056d6:	f812 2c0c 	ldrb.w	r2, [r2, #-12]
 80056da:	fb02 f303 	mul.w	r3, r2, r3
 80056de:	7f7a      	ldrb	r2, [r7, #29]
 80056e0:	f107 0120 	add.w	r1, r7, #32
 80056e4:	440a      	add	r2, r1
 80056e6:	f812 2c14 	ldrb.w	r2, [r2, #-20]
 80056ea:	fb93 f3f2 	sdiv	r3, r3, r2
 80056ee:	b29a      	uxth	r2, r3
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 80056f6:	bf00      	nop
 80056f8:	3724      	adds	r7, #36	; 0x24
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	08005c8c 	.word	0x08005c8c
 8005708:	08005c94 	.word	0x08005c94

0800570c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800570c:	b084      	sub	sp, #16
 800570e:	b580      	push	{r7, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
 8005716:	f107 001c 	add.w	r0, r7, #28
 800571a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800571e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005720:	2b01      	cmp	r3, #1
 8005722:	d122      	bne.n	800576a <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005728:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	68db      	ldr	r3, [r3, #12]
 8005734:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8005738:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800573c:	687a      	ldr	r2, [r7, #4]
 800573e:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 800574c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800574e:	2b01      	cmp	r3, #1
 8005750:	d105      	bne.n	800575e <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	68db      	ldr	r3, [r3, #12]
 8005756:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 800575e:	6878      	ldr	r0, [r7, #4]
 8005760:	f000 fa28 	bl	8005bb4 <USB_CoreReset>
 8005764:	4603      	mov	r3, r0
 8005766:	73fb      	strb	r3, [r7, #15]
 8005768:	e01a      	b.n	80057a0 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	68db      	ldr	r3, [r3, #12]
 800576e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select and set Host mode */
    ret = USB_CoreReset(USBx);
 8005776:	6878      	ldr	r0, [r7, #4]
 8005778:	f000 fa1c 	bl	8005bb4 <USB_CoreReset>
 800577c:	4603      	mov	r3, r0
 800577e:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8005780:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005782:	2b00      	cmp	r3, #0
 8005784:	d106      	bne.n	8005794 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800578a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	639a      	str	r2, [r3, #56]	; 0x38
 8005792:	e005      	b.n	80057a0 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005798:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  return ret;
 80057a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80057a2:	4618      	mov	r0, r3
 80057a4:	3710      	adds	r7, #16
 80057a6:	46bd      	mov	sp, r7
 80057a8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80057ac:	b004      	add	sp, #16
 80057ae:	4770      	bx	lr

080057b0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
*/
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b083      	sub	sp, #12
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	689b      	ldr	r3, [r3, #8]
 80057bc:	f023 0201 	bic.w	r2, r3, #1
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80057c4:	2300      	movs	r3, #0
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	370c      	adds	r7, #12
 80057ca:	46bd      	mov	sp, r7
 80057cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d0:	4770      	bx	lr

080057d2 <USB_SetCurrentMode>:
  *            @arg USB_HOST_MODE: Host mode
  *            @arg USB_DRD_MODE: Dual Role Device mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 80057d2:	b580      	push	{r7, lr}
 80057d4:	b082      	sub	sp, #8
 80057d6:	af00      	add	r7, sp, #0
 80057d8:	6078      	str	r0, [r7, #4]
 80057da:	460b      	mov	r3, r1
 80057dc:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	68db      	ldr	r3, [r3, #12]
 80057e2:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80057ea:	78fb      	ldrb	r3, [r7, #3]
 80057ec:	2b01      	cmp	r3, #1
 80057ee:	d106      	bne.n	80057fe <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	68db      	ldr	r3, [r3, #12]
 80057f4:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	60da      	str	r2, [r3, #12]
 80057fc:	e00b      	b.n	8005816 <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80057fe:	78fb      	ldrb	r3, [r7, #3]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d106      	bne.n	8005812 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	68db      	ldr	r3, [r3, #12]
 8005808:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	60da      	str	r2, [r3, #12]
 8005810:	e001      	b.n	8005816 <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8005812:	2301      	movs	r3, #1
 8005814:	e003      	b.n	800581e <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8005816:	2032      	movs	r0, #50	; 0x32
 8005818:	f7fb fc9e 	bl	8001158 <HAL_Delay>

  return HAL_OK;
 800581c:	2300      	movs	r3, #0
}
 800581e:	4618      	mov	r0, r3
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8005828:	b084      	sub	sp, #16
 800582a:	b580      	push	{r7, lr}
 800582c:	b086      	sub	sp, #24
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
 8005832:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8005836:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800583a:	2300      	movs	r3, #0
 800583c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8005842:	2300      	movs	r3, #0
 8005844:	613b      	str	r3, [r7, #16]
 8005846:	e009      	b.n	800585c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8005848:	687a      	ldr	r2, [r7, #4]
 800584a:	693b      	ldr	r3, [r7, #16]
 800584c:	3340      	adds	r3, #64	; 0x40
 800584e:	009b      	lsls	r3, r3, #2
 8005850:	4413      	add	r3, r2
 8005852:	2200      	movs	r2, #0
 8005854:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8005856:	693b      	ldr	r3, [r7, #16]
 8005858:	3301      	adds	r3, #1
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	693b      	ldr	r3, [r7, #16]
 800585e:	2b0e      	cmp	r3, #14
 8005860:	d9f2      	bls.n	8005848 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8005862:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d11c      	bne.n	80058a2 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800586e:	685b      	ldr	r3, [r3, #4]
 8005870:	68fa      	ldr	r2, [r7, #12]
 8005872:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005876:	f043 0302 	orr.w	r3, r3, #2
 800587a:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005880:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	601a      	str	r2, [r3, #0]
 80058a0:	e005      	b.n	80058ae <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80058a6:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80058b4:	461a      	mov	r2, r3
 80058b6:	2300      	movs	r3, #0
 80058b8:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c0:	4619      	mov	r1, r3
 80058c2:	68fb      	ldr	r3, [r7, #12]
 80058c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058c8:	461a      	mov	r2, r3
 80058ca:	680b      	ldr	r3, [r1, #0]
 80058cc:	6013      	str	r3, [r2, #0]

  /* Set Core speed to Full speed mode */
  (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80058ce:	2103      	movs	r1, #3
 80058d0:	6878      	ldr	r0, [r7, #4]
 80058d2:	f000 f93d 	bl	8005b50 <USB_SetDevSpeed>

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80058d6:	2110      	movs	r1, #16
 80058d8:	6878      	ldr	r0, [r7, #4]
 80058da:	f000 f8f1 	bl	8005ac0 <USB_FlushTxFifo>
 80058de:	4603      	mov	r3, r0
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d001      	beq.n	80058e8 <USB_DevInit+0xc0>
  {
    ret = HAL_ERROR;
 80058e4:	2301      	movs	r3, #1
 80058e6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80058e8:	6878      	ldr	r0, [r7, #4]
 80058ea:	f000 f90f 	bl	8005b0c <USB_FlushRxFifo>
 80058ee:	4603      	mov	r3, r0
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d001      	beq.n	80058f8 <USB_DevInit+0xd0>
  {
    ret = HAL_ERROR;
 80058f4:	2301      	movs	r3, #1
 80058f6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058fe:	461a      	mov	r2, r3
 8005900:	2300      	movs	r3, #0
 8005902:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590a:	461a      	mov	r2, r3
 800590c:	2300      	movs	r3, #0
 800590e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005916:	461a      	mov	r2, r3
 8005918:	2300      	movs	r3, #0
 800591a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800591c:	2300      	movs	r3, #0
 800591e:	613b      	str	r3, [r7, #16]
 8005920:	e043      	b.n	80059aa <USB_DevInit+0x182>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005922:	693b      	ldr	r3, [r7, #16]
 8005924:	015a      	lsls	r2, r3, #5
 8005926:	68fb      	ldr	r3, [r7, #12]
 8005928:	4413      	add	r3, r2
 800592a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005934:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005938:	d118      	bne.n	800596c <USB_DevInit+0x144>
    {
      if (i == 0U)
 800593a:	693b      	ldr	r3, [r7, #16]
 800593c:	2b00      	cmp	r3, #0
 800593e:	d10a      	bne.n	8005956 <USB_DevInit+0x12e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8005940:	693b      	ldr	r3, [r7, #16]
 8005942:	015a      	lsls	r2, r3, #5
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	4413      	add	r3, r2
 8005948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800594c:	461a      	mov	r2, r3
 800594e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8005952:	6013      	str	r3, [r2, #0]
 8005954:	e013      	b.n	800597e <USB_DevInit+0x156>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8005956:	693b      	ldr	r3, [r7, #16]
 8005958:	015a      	lsls	r2, r3, #5
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	4413      	add	r3, r2
 800595e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005962:	461a      	mov	r2, r3
 8005964:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8005968:	6013      	str	r3, [r2, #0]
 800596a:	e008      	b.n	800597e <USB_DevInit+0x156>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800596c:	693b      	ldr	r3, [r7, #16]
 800596e:	015a      	lsls	r2, r3, #5
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	4413      	add	r3, r2
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	461a      	mov	r2, r3
 800597a:	2300      	movs	r3, #0
 800597c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800597e:	693b      	ldr	r3, [r7, #16]
 8005980:	015a      	lsls	r2, r3, #5
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	4413      	add	r3, r2
 8005986:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800598a:	461a      	mov	r2, r3
 800598c:	2300      	movs	r3, #0
 800598e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8005990:	693b      	ldr	r3, [r7, #16]
 8005992:	015a      	lsls	r2, r3, #5
 8005994:	68fb      	ldr	r3, [r7, #12]
 8005996:	4413      	add	r3, r2
 8005998:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800599c:	461a      	mov	r2, r3
 800599e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80059a2:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059a4:	693b      	ldr	r3, [r7, #16]
 80059a6:	3301      	adds	r3, #1
 80059a8:	613b      	str	r3, [r7, #16]
 80059aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ac:	693a      	ldr	r2, [r7, #16]
 80059ae:	429a      	cmp	r2, r3
 80059b0:	d3b7      	bcc.n	8005922 <USB_DevInit+0xfa>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80059b2:	2300      	movs	r3, #0
 80059b4:	613b      	str	r3, [r7, #16]
 80059b6:	e043      	b.n	8005a40 <USB_DevInit+0x218>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059b8:	693b      	ldr	r3, [r7, #16]
 80059ba:	015a      	lsls	r2, r3, #5
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	4413      	add	r3, r2
 80059c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ce:	d118      	bne.n	8005a02 <USB_DevInit+0x1da>
    {
      if (i == 0U)
 80059d0:	693b      	ldr	r3, [r7, #16]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10a      	bne.n	80059ec <USB_DevInit+0x1c4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80059d6:	693b      	ldr	r3, [r7, #16]
 80059d8:	015a      	lsls	r2, r3, #5
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	4413      	add	r3, r2
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	461a      	mov	r2, r3
 80059e4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80059e8:	6013      	str	r3, [r2, #0]
 80059ea:	e013      	b.n	8005a14 <USB_DevInit+0x1ec>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80059ec:	693b      	ldr	r3, [r7, #16]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	461a      	mov	r2, r3
 80059fa:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80059fe:	6013      	str	r3, [r2, #0]
 8005a00:	e008      	b.n	8005a14 <USB_DevInit+0x1ec>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8005a02:	693b      	ldr	r3, [r7, #16]
 8005a04:	015a      	lsls	r2, r3, #5
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	4413      	add	r3, r2
 8005a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0e:	461a      	mov	r2, r3
 8005a10:	2300      	movs	r3, #0
 8005a12:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8005a14:	693b      	ldr	r3, [r7, #16]
 8005a16:	015a      	lsls	r2, r3, #5
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4413      	add	r3, r2
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	461a      	mov	r2, r3
 8005a22:	2300      	movs	r3, #0
 8005a24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8005a26:	693b      	ldr	r3, [r7, #16]
 8005a28:	015a      	lsls	r2, r3, #5
 8005a2a:	68fb      	ldr	r3, [r7, #12]
 8005a2c:	4413      	add	r3, r2
 8005a2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a32:	461a      	mov	r2, r3
 8005a34:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8005a38:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8005a3a:	693b      	ldr	r3, [r7, #16]
 8005a3c:	3301      	adds	r3, #1
 8005a3e:	613b      	str	r3, [r7, #16]
 8005a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	429a      	cmp	r2, r3
 8005a46:	d3b7      	bcc.n	80059b8 <USB_DevInit+0x190>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a56:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a5a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	2200      	movs	r2, #0
 8005a60:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005a68:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	699b      	ldr	r3, [r3, #24]
 8005a6e:	f043 0210 	orr.w	r2, r3, #16
 8005a72:	687b      	ldr	r3, [r7, #4]
 8005a74:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	699a      	ldr	r2, [r3, #24]
 8005a7a:	4b10      	ldr	r3, [pc, #64]	; (8005abc <USB_DevInit+0x294>)
 8005a7c:	4313      	orrs	r3, r2
 8005a7e:	687a      	ldr	r2, [r7, #4]
 8005a80:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005a82:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d005      	beq.n	8005a94 <USB_DevInit+0x26c>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	699b      	ldr	r3, [r3, #24]
 8005a8c:	f043 0208 	orr.w	r2, r3, #8
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005a94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a96:	2b01      	cmp	r3, #1
 8005a98:	d107      	bne.n	8005aaa <USB_DevInit+0x282>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	699b      	ldr	r3, [r3, #24]
 8005a9e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005aa2:	f043 0304 	orr.w	r3, r3, #4
 8005aa6:	687a      	ldr	r2, [r7, #4]
 8005aa8:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005aaa:	7dfb      	ldrb	r3, [r7, #23]
}
 8005aac:	4618      	mov	r0, r3
 8005aae:	3718      	adds	r7, #24
 8005ab0:	46bd      	mov	sp, r7
 8005ab2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005ab6:	b004      	add	sp, #16
 8005ab8:	4770      	bx	lr
 8005aba:	bf00      	nop
 8005abc:	803c3800 	.word	0x803c3800

08005ac0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b085      	sub	sp, #20
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
 8005ac8:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005aca:	2300      	movs	r3, #0
 8005acc:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	019b      	lsls	r3, r3, #6
 8005ad2:	f043 0220 	orr.w	r2, r3, #32
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	3301      	adds	r3, #1
 8005ade:	60fb      	str	r3, [r7, #12]
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	4a09      	ldr	r2, [pc, #36]	; (8005b08 <USB_FlushTxFifo+0x48>)
 8005ae4:	4293      	cmp	r3, r2
 8005ae6:	d901      	bls.n	8005aec <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005ae8:	2303      	movs	r3, #3
 8005aea:	e006      	b.n	8005afa <USB_FlushTxFifo+0x3a>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f003 0320 	and.w	r3, r3, #32
 8005af4:	2b20      	cmp	r3, #32
 8005af6:	d0f0      	beq.n	8005ada <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005af8:	2300      	movs	r3, #0
}
 8005afa:	4618      	mov	r0, r3
 8005afc:	3714      	adds	r7, #20
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	00030d40 	.word	0x00030d40

08005b0c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b085      	sub	sp, #20
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8005b14:	2300      	movs	r3, #0
 8005b16:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2210      	movs	r2, #16
 8005b1c:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	3301      	adds	r3, #1
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	4a09      	ldr	r2, [pc, #36]	; (8005b4c <USB_FlushRxFifo+0x40>)
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	d901      	bls.n	8005b30 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8005b2c:	2303      	movs	r3, #3
 8005b2e:	e006      	b.n	8005b3e <USB_FlushRxFifo+0x32>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f003 0310 	and.w	r3, r3, #16
 8005b38:	2b10      	cmp	r3, #16
 8005b3a:	d0f0      	beq.n	8005b1e <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8005b3c:	2300      	movs	r3, #0
}
 8005b3e:	4618      	mov	r0, r3
 8005b40:	3714      	adds	r7, #20
 8005b42:	46bd      	mov	sp, r7
 8005b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b48:	4770      	bx	lr
 8005b4a:	bf00      	nop
 8005b4c:	00030d40 	.word	0x00030d40

08005b50 <USB_SetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
 8005b58:	460b      	mov	r3, r1
 8005b5a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b66:	681a      	ldr	r2, [r3, #0]
 8005b68:	78fb      	ldrb	r3, [r7, #3]
 8005b6a:	68f9      	ldr	r1, [r7, #12]
 8005b6c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005b70:	4313      	orrs	r3, r2
 8005b72:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005b74:	2300      	movs	r3, #0
}
 8005b76:	4618      	mov	r0, r3
 8005b78:	3714      	adds	r7, #20
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b80:	4770      	bx	lr

08005b82 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling the pull-up/pull-down
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b82:	b580      	push	{r7, lr}
 8005b84:	b084      	sub	sp, #16
 8005b86:	af00      	add	r7, sp, #0
 8005b88:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b94:	685b      	ldr	r3, [r3, #4]
 8005b96:	68fa      	ldr	r2, [r7, #12]
 8005b98:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b9c:	f043 0302 	orr.w	r3, r3, #2
 8005ba0:	6053      	str	r3, [r2, #4]
  HAL_Delay(3U);
 8005ba2:	2003      	movs	r0, #3
 8005ba4:	f7fb fad8 	bl	8001158 <HAL_Delay>

  return HAL_OK;
 8005ba8:	2300      	movs	r3, #0
}
 8005baa:	4618      	mov	r0, r3
 8005bac:	3710      	adds	r7, #16
 8005bae:	46bd      	mov	sp, r7
 8005bb0:	bd80      	pop	{r7, pc}
	...

08005bb4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b085      	sub	sp, #20
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005bbc:	2300      	movs	r3, #0
 8005bbe:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8005bc0:	68fb      	ldr	r3, [r7, #12]
 8005bc2:	3301      	adds	r3, #1
 8005bc4:	60fb      	str	r3, [r7, #12]
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	4a13      	ldr	r2, [pc, #76]	; (8005c18 <USB_CoreReset+0x64>)
 8005bca:	4293      	cmp	r3, r2
 8005bcc:	d901      	bls.n	8005bd2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005bce:	2303      	movs	r3, #3
 8005bd0:	e01b      	b.n	8005c0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	691b      	ldr	r3, [r3, #16]
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	daf2      	bge.n	8005bc0 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005bda:	2300      	movs	r3, #0
 8005bdc:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	691b      	ldr	r3, [r3, #16]
 8005be2:	f043 0201 	orr.w	r2, r3, #1
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	3301      	adds	r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	4a09      	ldr	r2, [pc, #36]	; (8005c18 <USB_CoreReset+0x64>)
 8005bf4:	4293      	cmp	r3, r2
 8005bf6:	d901      	bls.n	8005bfc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	e006      	b.n	8005c0a <USB_CoreReset+0x56>
    }
  }
  while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	691b      	ldr	r3, [r3, #16]
 8005c00:	f003 0301 	and.w	r3, r3, #1
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	d0f0      	beq.n	8005bea <USB_CoreReset+0x36>

  return HAL_OK;
 8005c08:	2300      	movs	r3, #0
}
 8005c0a:	4618      	mov	r0, r3
 8005c0c:	3714      	adds	r7, #20
 8005c0e:	46bd      	mov	sp, r7
 8005c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c14:	4770      	bx	lr
 8005c16:	bf00      	nop
 8005c18:	00030d40 	.word	0x00030d40

08005c1c <__libc_init_array>:
 8005c1c:	b570      	push	{r4, r5, r6, lr}
 8005c1e:	4e0d      	ldr	r6, [pc, #52]	; (8005c54 <__libc_init_array+0x38>)
 8005c20:	4c0d      	ldr	r4, [pc, #52]	; (8005c58 <__libc_init_array+0x3c>)
 8005c22:	1ba4      	subs	r4, r4, r6
 8005c24:	10a4      	asrs	r4, r4, #2
 8005c26:	2500      	movs	r5, #0
 8005c28:	42a5      	cmp	r5, r4
 8005c2a:	d109      	bne.n	8005c40 <__libc_init_array+0x24>
 8005c2c:	4e0b      	ldr	r6, [pc, #44]	; (8005c5c <__libc_init_array+0x40>)
 8005c2e:	4c0c      	ldr	r4, [pc, #48]	; (8005c60 <__libc_init_array+0x44>)
 8005c30:	f000 f820 	bl	8005c74 <_init>
 8005c34:	1ba4      	subs	r4, r4, r6
 8005c36:	10a4      	asrs	r4, r4, #2
 8005c38:	2500      	movs	r5, #0
 8005c3a:	42a5      	cmp	r5, r4
 8005c3c:	d105      	bne.n	8005c4a <__libc_init_array+0x2e>
 8005c3e:	bd70      	pop	{r4, r5, r6, pc}
 8005c40:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c44:	4798      	blx	r3
 8005c46:	3501      	adds	r5, #1
 8005c48:	e7ee      	b.n	8005c28 <__libc_init_array+0xc>
 8005c4a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8005c4e:	4798      	blx	r3
 8005c50:	3501      	adds	r5, #1
 8005c52:	e7f2      	b.n	8005c3a <__libc_init_array+0x1e>
 8005c54:	080174ec 	.word	0x080174ec
 8005c58:	080174ec 	.word	0x080174ec
 8005c5c:	080174ec 	.word	0x080174ec
 8005c60:	080174f0 	.word	0x080174f0

08005c64 <memset>:
 8005c64:	4402      	add	r2, r0
 8005c66:	4603      	mov	r3, r0
 8005c68:	4293      	cmp	r3, r2
 8005c6a:	d100      	bne.n	8005c6e <memset+0xa>
 8005c6c:	4770      	bx	lr
 8005c6e:	f803 1b01 	strb.w	r1, [r3], #1
 8005c72:	e7f9      	b.n	8005c68 <memset+0x4>

08005c74 <_init>:
 8005c74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c76:	bf00      	nop
 8005c78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c7a:	bc08      	pop	{r3}
 8005c7c:	469e      	mov	lr, r3
 8005c7e:	4770      	bx	lr

08005c80 <_fini>:
 8005c80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005c82:	bf00      	nop
 8005c84:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005c86:	bc08      	pop	{r3}
 8005c88:	469e      	mov	lr, r3
 8005c8a:	4770      	bx	lr
